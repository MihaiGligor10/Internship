
Trial_CAN_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f24  08004f24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f2c  08004f2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  2000000c  08004f40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08004f40  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129a0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002750  00000000  00000000  00032a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00035170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2c  00000000  00000000  00035ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029667  00000000  00000000  00036b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a24  00000000  00000000  0006018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe146  00000000  00000000  00071baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cf8  00000000  00000000  0016fcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001739f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004e9c 	.word	0x08004e9c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004e9c 	.word	0x08004e9c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80004fc:	f000 fc9d 	bl	8000e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f80d 	bl	800051e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f95c 	bl	80007c0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000508:	f000 f892 	bl	8000630 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800050c:	f000 f8de 	bl	80006cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000510:	f000 f928 	bl	8000764 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000514:	f000 f856 	bl	80005c4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config();
 8000518:	f000 f9f6 	bl	8000908 <CAN_Config>
	   	  }*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x24>

0800051e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b096      	sub	sp, #88	; 0x58
 8000522:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2244      	movs	r2, #68	; 0x44
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f004 fc89 	bl	8004e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	463b      	mov	r3, r7
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000540:	2000      	movs	r0, #0
 8000542:	f001 feb7 	bl	80022b4 <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800054c:	f000 fa5e 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000550:	2322      	movs	r3, #34	; 0x22
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000558:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2340      	movs	r3, #64	; 0x40
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800056a:	2302      	movs	r3, #2
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800056e:	231e      	movs	r3, #30
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4618      	mov	r0, r3
 8000584:	f001 ff5a 	bl	800243c <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800058e:	f000 fa3d 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2303      	movs	r3, #3
 8000598:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	2105      	movs	r1, #5
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fb5f 	bl	8002c70 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005b8:	f000 fa28 	bl	8000a0c <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3758      	adds	r7, #88	; 0x58
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_CAN1_Init+0x64>)
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <MX_CAN1_Init+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_CAN1_Init+0x64>)
 80005d0:	2210      	movs	r2, #16
 80005d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_CAN1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_CAN1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_CAN1_Init+0x64>)
 80005e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_CAN1_Init+0x64>)
 80005ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_CAN1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_CAN1_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_CAN1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_CAN1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_CAN1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_CAN1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_CAN1_Init+0x64>)
 8000616:	f000 fca9 	bl	8000f6c <HAL_CAN_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000620:	f000 f9f4 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000028 	.word	0x20000028
 800062c:	40006400 	.word	0x40006400

08000630 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 8000636:	4a23      	ldr	r2, [pc, #140]	; (80006c4 <MX_LPUART1_UART_Init+0x94>)
 8000638:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <MX_LPUART1_UART_Init+0x98>)
 800063e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 8000642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000646:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 800067a:	f003 facf 	bl	8003c1c <HAL_UART_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000684:	f000 f9c2 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 800068c:	f004 f864 	bl	8004758 <HAL_UARTEx_SetTxFifoThreshold>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000696:	f000 f9b9 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 800069e:	f004 f899 	bl	80047d4 <HAL_UARTEx_SetRxFifoThreshold>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f9b0 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_LPUART1_UART_Init+0x90>)
 80006ae:	f004 f81a 	bl	80046e6 <HAL_UARTEx_DisableFifoMode>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006b8:	f000 f9a8 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000050 	.word	0x20000050
 80006c4:	40008000 	.word	0x40008000
 80006c8:	00033324 	.word	0x00033324

080006cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_USART3_UART_Init+0x90>)
 80006d2:	4a23      	ldr	r2, [pc, #140]	; (8000760 <MX_USART3_UART_Init+0x94>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_USART3_UART_Init+0x90>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_USART3_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_USART3_UART_Init+0x90>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_USART3_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_USART3_UART_Init+0x90>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_USART3_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_USART3_UART_Init+0x90>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_USART3_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART3_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART3_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000714:	4811      	ldr	r0, [pc, #68]	; (800075c <MX_USART3_UART_Init+0x90>)
 8000716:	f003 fa81 	bl	8003c1c <HAL_UART_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000720:	f000 f974 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_USART3_UART_Init+0x90>)
 8000728:	f004 f816 	bl	8004758 <HAL_UARTEx_SetTxFifoThreshold>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000732:	f000 f96b 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4808      	ldr	r0, [pc, #32]	; (800075c <MX_USART3_UART_Init+0x90>)
 800073a:	f004 f84b 	bl	80047d4 <HAL_UARTEx_SetRxFifoThreshold>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000744:	f000 f962 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_USART3_UART_Init+0x90>)
 800074a:	f003 ffcc 	bl	80046e6 <HAL_UARTEx_DisableFifoMode>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000754:	f000 f95a 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000e4 	.word	0x200000e4
 8000760:	40004800 	.word	0x40004800

08000764 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800076e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	2206      	movs	r2, #6
 8000774:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000778:	2202      	movs	r2, #2
 800077a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2202      	movs	r2, #2
 8000780:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2201      	movs	r2, #1
 8000786:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	f001 fc1c 	bl	8001fe4 <HAL_PCD_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f92b 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000178 	.word	0x20000178

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <MX_GPIO_Init+0x138>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a47      	ldr	r2, [pc, #284]	; (80008f8 <MX_GPIO_Init+0x138>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <MX_GPIO_Init+0x138>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <MX_GPIO_Init+0x138>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a41      	ldr	r2, [pc, #260]	; (80008f8 <MX_GPIO_Init+0x138>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b3f      	ldr	r3, [pc, #252]	; (80008f8 <MX_GPIO_Init+0x138>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a3b      	ldr	r2, [pc, #236]	; (80008f8 <MX_GPIO_Init+0x138>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a35      	ldr	r2, [pc, #212]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <MX_GPIO_Init+0x138>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <MX_GPIO_Init+0x138>)
 800083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800084e:	f001 fde5 	bl	800241c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_GPIO_Init+0x138>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <MX_GPIO_Init+0x13c>)
 8000872:	f001 fb9f 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <MX_GPIO_Init+0x140>)
 800087c:	f001 fb9a 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <MX_GPIO_Init+0x144>)
 8000898:	f001 f9fa 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800089c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <MX_GPIO_Init+0x13c>)
 80008b6:	f001 f9eb 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_GPIO_Init+0x140>)
 80008ce:	f001 f9df 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d2:	2340      	movs	r3, #64	; 0x40
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_GPIO_Init+0x140>)
 80008ea:	f001 f9d1 	bl	8001c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400
 8000900:	48001800 	.word	0x48001800
 8000904:	48000800 	.word	0x48000800

08000908 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan1.Instance = CAN1;
 800090e:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <CAN_Config+0xc8>)
 8000910:	4a30      	ldr	r2, [pc, #192]	; (80009d4 <CAN_Config+0xcc>)
 8000912:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000914:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <CAN_Config+0xc8>)
 8000916:	2210      	movs	r2, #16
 8000918:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <CAN_Config+0xc8>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <CAN_Config+0xc8>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <CAN_Config+0xc8>)
 8000928:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800092c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <CAN_Config+0xc8>)
 8000930:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000934:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <CAN_Config+0xc8>)
 8000938:	2200      	movs	r2, #0
 800093a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <CAN_Config+0xc8>)
 800093e:	2200      	movs	r2, #0
 8000940:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <CAN_Config+0xc8>)
 8000944:	2200      	movs	r2, #0
 8000946:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <CAN_Config+0xc8>)
 800094a:	2200      	movs	r2, #0
 800094c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <CAN_Config+0xc8>)
 8000950:	2200      	movs	r2, #0
 8000952:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <CAN_Config+0xc8>)
 8000956:	2200      	movs	r2, #0
 8000958:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800095a:	481d      	ldr	r0, [pc, #116]	; (80009d0 <CAN_Config+0xc8>)
 800095c:	f000 fb06 	bl	8000f6c <HAL_CAN_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <CAN_Config+0x62>
  {
    Error_Handler();
 8000966:	f000 f851 	bl	8000a0c <Error_Handler>
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800098e:	230e      	movs	r3, #14
 8000990:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	4810      	ldr	r0, [pc, #64]	; (80009d8 <CAN_Config+0xd0>)
 8000998:	f000 fbe3 	bl	8001162 <HAL_CAN_ConfigFilter>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <CAN_Config+0x9e>
  {
    /* Filter configuration Error */
    Error_Handler();
 80009a2:	f000 f833 	bl	8000a0c <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&CanHandle) != HAL_OK)
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <CAN_Config+0xd0>)
 80009a8:	f000 fca5 	bl	80012f6 <HAL_CAN_Start>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <CAN_Config+0xae>
  {
    /* Start Error */
    Error_Handler();
 80009b2:	f000 f82b 	bl	8000a0c <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80009b6:	2102      	movs	r1, #2
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <CAN_Config+0xd0>)
 80009ba:	f000 fe02 	bl	80015c2 <HAL_CAN_ActivateNotification>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <CAN_Config+0xc0>
  {
    /* Notification Error */
    Error_Handler();
 80009c4:	f000 f822 	bl	8000a0c <Error_Handler>
  TxHeader.ExtId = 0x01;
  TxHeader.RTR = CAN_RTR_DATA;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.DLC = 2;
  TxHeader.TransmitGlobalTime = DISABLE;*/
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000028 	.word	0x20000028
 80009d4:	40006400 	.word	0x40006400
 80009d8:	20000684 	.word	0x20000684

080009dc <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 fcc7 	bl	800137e <HAL_CAN_GetRxMessage>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80009f6:	f000 f809 	bl	8000a0c <Error_Handler>
  //if ((RxHeader.StdId == 0x321) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 2))
  //{
   // LED_Display(RxData[0]);
   // ubKeyNumber = RxData[0];
  //}
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200006c8 	.word	0x200006c8
 8000a08:	200006ac 	.word	0x200006ac

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6593      	str	r3, [r2, #88]	; 0x58
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_CAN_MspInit+0x8c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12f      	bne.n	8000ae2 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_CAN_MspInit+0x90>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <HAL_CAN_MspInit+0x90>)
 8000a88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_CAN_MspInit+0x90>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_CAN_MspInit+0x90>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_CAN_MspInit+0x90>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_CAN_MspInit+0x90>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ac2:	2309      	movs	r3, #9
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <HAL_CAN_MspInit+0x94>)
 8000ace:	f001 f8df 	bl	8001c90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2014      	movs	r0, #20
 8000ad8:	f001 f8a3 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000adc:	2014      	movs	r0, #20
 8000ade:	f001 f8bc 	bl	8001c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40006400 	.word	0x40006400
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000c00 	.word	0x48000c00

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0b0      	sub	sp, #192	; 0xc0
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	2294      	movs	r2, #148	; 0x94
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f004 f993 	bl	8004e44 <memset>
  if(huart->Instance==LPUART1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <HAL_UART_MspInit+0x138>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d13e      	bne.n	8000ba6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fb59 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b40:	f7ff ff64 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b44:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b48:	4a3a      	ldr	r2, [pc, #232]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b50:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	4a34      	ldr	r2, [pc, #208]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000b74:	f001 fc52 	bl	800241c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b92:	2308      	movs	r3, #8
 8000b94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4826      	ldr	r0, [pc, #152]	; (8000c38 <HAL_UART_MspInit+0x140>)
 8000ba0:	f001 f876 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ba4:	e040      	b.n	8000c28 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <HAL_UART_MspInit+0x144>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d13b      	bne.n	8000c28 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 fb15 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000bc8:	f7ff ff20 	bl	8000a0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd0:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be8:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000bea:	f043 0308 	orr.w	r3, r3, #8
 8000bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_UART_MspInit+0x13c>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf4:	f003 0308 	and.w	r3, r3, #8
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c16:	2307      	movs	r3, #7
 8000c18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <HAL_UART_MspInit+0x148>)
 8000c24:	f001 f834 	bl	8001c90 <HAL_GPIO_Init>
}
 8000c28:	bf00      	nop
 8000c2a:	37c0      	adds	r7, #192	; 0xc0
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40008000 	.word	0x40008000
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48001800 	.word	0x48001800
 8000c3c:	40004800 	.word	0x40004800
 8000c40:	48000c00 	.word	0x48000c00

08000c44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0b0      	sub	sp, #192	; 0xc0
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	2294      	movs	r2, #148	; 0x94
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f8ed 	bl	8004e44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c72:	d16c      	bne.n	8000d4e <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fab1 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c90:	f7ff febc 	bl	8000a0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c98:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 ffdb 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f000 ffca 	bl	8001c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d114      	bne.n	8000d4a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000d38:	f001 fb60 	bl	80023fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <HAL_PCD_MspInit+0x114>)
 8000d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d48:	e001      	b.n	8000d4e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000d4a:	f001 fb57 	bl	80023fc <HAL_PWREx_EnableVddUSB>
}
 8000d4e:	bf00      	nop
 8000d50:	37c0      	adds	r7, #192	; 0xc0
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f89c 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <CAN1_RX0_IRQHandler+0x10>)
 8000db6:	f000 fc2a 	bl	800160e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000028 	.word	0x20000028

08000dc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <LoopForever+0xe>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	; (8000e34 <LoopForever+0x16>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f004 f81d 	bl	8004e54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1a:	f7ff fb6d 	bl	80004f8 <main>

08000e1e <LoopForever>:

LoopForever:
    b LoopForever
 8000e1e:	e7fe      	b.n	8000e1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e2c:	08004f34 	.word	0x08004f34
  ldr r2, =_sbss
 8000e30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e34:	200006d4 	.word	0x200006d4

08000e38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_IRQHandler>

08000e3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 fee1 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f80e 	bl	8000e6c <HAL_InitTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	e001      	b.n	8000e60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5c:	f7ff fddc 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e60:	79fb      	ldrb	r3, [r7, #7]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_InitTick+0x6c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d023      	beq.n	8000ec8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_InitTick+0x70>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_InitTick+0x6c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 feed 	bl	8001c76 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10f      	bne.n	8000ec2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d809      	bhi.n	8000ebc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 feb7 	bl	8001c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_InitTick+0x74>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e007      	b.n	8000ecc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e004      	b.n	8000ecc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e001      	b.n	8000ecc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	200006d0 	.word	0x200006d0

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200006d0 	.word	0x200006d0

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0ed      	b.n	800115a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fd68 	bl	8000a60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fa0:	f7ff ffb4 	bl	8000f0c <HAL_GetTick>
 8000fa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fa6:	e012      	b.n	8000fce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fa8:	f7ff ffb0 	bl	8000f0c <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b0a      	cmp	r3, #10
 8000fb4:	d90b      	bls.n	8000fce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0c5      	b.n	800115a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0e5      	beq.n	8000fa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0202 	bic.w	r2, r2, #2
 8000fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fec:	f7ff ff8e 	bl	8000f0c <HAL_GetTick>
 8000ff0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ff2:	e012      	b.n	800101a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ff4:	f7ff ff8a 	bl	8000f0c <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b0a      	cmp	r3, #10
 8001000:	d90b      	bls.n	800101a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2205      	movs	r2, #5
 8001012:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e09f      	b.n	800115a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e5      	bne.n	8000ff4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7e1b      	ldrb	r3, [r3, #24]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d108      	bne.n	8001042 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e007      	b.n	8001052 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7e5b      	ldrb	r3, [r3, #25]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e007      	b.n	800107c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800107a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e9b      	ldrb	r3, [r3, #26]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d108      	bne.n	8001096 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0220 	orr.w	r2, r2, #32
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e007      	b.n	80010a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0220 	bic.w	r2, r2, #32
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7edb      	ldrb	r3, [r3, #27]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d108      	bne.n	80010c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0210 	bic.w	r2, r2, #16
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e007      	b.n	80010d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0210 	orr.w	r2, r2, #16
 80010ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7f1b      	ldrb	r3, [r3, #28]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d108      	bne.n	80010ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0208 	orr.w	r2, r2, #8
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e007      	b.n	80010fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0208 	bic.w	r2, r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7f5b      	ldrb	r3, [r3, #29]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0204 	orr.w	r2, r2, #4
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e007      	b.n	8001124 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	ea42 0103 	orr.w	r1, r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001162:	b480      	push	{r7}
 8001164:	b087      	sub	sp, #28
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001178:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800117a:	7cfb      	ldrb	r3, [r7, #19]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d003      	beq.n	8001188 <HAL_CAN_ConfigFilter+0x26>
 8001180:	7cfb      	ldrb	r3, [r7, #19]
 8001182:	2b02      	cmp	r3, #2
 8001184:	f040 80aa 	bne.w	80012dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800118e:	f043 0201 	orr.w	r2, r3, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2201      	movs	r2, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d123      	bne.n	800120a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	401a      	ands	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3248      	adds	r2, #72	; 0x48
 80011ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001200:	6979      	ldr	r1, [r7, #20]
 8001202:	3348      	adds	r3, #72	; 0x48
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d122      	bne.n	8001258 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	431a      	orrs	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001232:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3248      	adds	r2, #72	; 0x48
 8001238:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800124c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800124e:	6979      	ldr	r1, [r7, #20]
 8001250:	3348      	adds	r3, #72	; 0x48
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001272:	e007      	b.n	8001284 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	431a      	orrs	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800129e:	e007      	b.n	80012b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d107      	bne.n	80012c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ce:	f023 0201 	bic.w	r2, r3, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	e006      	b.n	80012ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
  }
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d12e      	bne.n	8001368 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2202      	movs	r2, #2
 800130e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001322:	f7ff fdf3 	bl	8000f0c <HAL_GetTick>
 8001326:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001328:	e012      	b.n	8001350 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800132a:	f7ff fdef 	bl	8000f0c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b0a      	cmp	r3, #10
 8001336:	d90b      	bls.n	8001350 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2205      	movs	r2, #5
 8001348:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e012      	b.n	8001376 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1e5      	bne.n	800132a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	e006      	b.n	8001376 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
  }
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800137e:	b480      	push	{r7}
 8001380:	b087      	sub	sp, #28
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001392:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d003      	beq.n	80013a2 <HAL_CAN_GetRxMessage+0x24>
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b02      	cmp	r3, #2
 800139e:	f040 8103 	bne.w	80015a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10e      	bne.n	80013c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d116      	bne.n	80013e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0f7      	b.n	80015b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0e8      	b.n	80015b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	331b      	adds	r3, #27
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0204 	and.w	r2, r3, #4
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	331b      	adds	r3, #27
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4413      	add	r3, r2
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0d5b      	lsrs	r3, r3, #21
 8001412:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e00b      	b.n	8001434 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	331b      	adds	r3, #27
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	331b      	adds	r3, #27
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0202 	and.w	r2, r3, #2
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	331b      	adds	r3, #27
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2208      	movs	r2, #8
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	e00b      	b.n	8001482 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	331b      	adds	r3, #27
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	3304      	adds	r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 020f 	and.w	r2, r3, #15
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	331b      	adds	r3, #27
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	4413      	add	r3, r2
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b2da      	uxtb	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	331b      	adds	r3, #27
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	4413      	add	r3, r2
 80014a6:	3304      	adds	r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0a1a      	lsrs	r2, r3, #8
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0c1a      	lsrs	r2, r3, #16
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3302      	adds	r3, #2
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	4413      	add	r3, r2
 8001506:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0e1a      	lsrs	r2, r3, #24
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3303      	adds	r3, #3
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4413      	add	r3, r2
 8001520:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3304      	adds	r3, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0a1a      	lsrs	r2, r3, #8
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3305      	adds	r3, #5
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0c1a      	lsrs	r2, r3, #16
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	3306      	adds	r3, #6
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0e1a      	lsrs	r2, r3, #24
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3307      	adds	r3, #7
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d108      	bne.n	8001594 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0220 	orr.w	r2, r2, #32
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e007      	b.n	80015a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0220 	orr.w	r2, r2, #32
 80015a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e006      	b.n	80015b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
  }
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d002      	beq.n	80015e0 <HAL_CAN_ActivateNotification+0x1e>
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d109      	bne.n	80015f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6959      	ldr	r1, [r3, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e006      	b.n	8001602 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
  }
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b08a      	sub	sp, #40	; 0x28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d07c      	beq.n	800174e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d023      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f983 	bl	800197c <HAL_CAN_TxMailbox0CompleteCallback>
 8001676:	e016      	b.n	80016a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
 800168a:	e00c      	b.n	80016a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
 800169e:	e002      	b.n	80016a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f989 	bl	80019b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d024      	beq.n	80016fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f963 	bl	8001990 <HAL_CAN_TxMailbox1CompleteCallback>
 80016ca:	e016      	b.n	80016fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	e00c      	b.n	80016fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	e002      	b.n	80016fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f969 	bl	80019cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d024      	beq.n	800174e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800170c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f943 	bl	80019a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800171e:	e016      	b.n	800174e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
 8001732:	e00c      	b.n	800174e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	e002      	b.n	800174e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f949 	bl	80019e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00c      	beq.n	8001772 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2210      	movs	r2, #16
 8001770:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00b      	beq.n	8001794 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2208      	movs	r2, #8
 800178c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f930 	bl	80019f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d009      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff f915 	bl	80009dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00c      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2210      	movs	r2, #16
 80017d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00b      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2208      	movs	r2, #8
 80017f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f912 	bl	8001a1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f8f9 	bl	8001a08 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00b      	beq.n	8001838 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2210      	movs	r2, #16
 8001830:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f8fc 	bl	8001a30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2208      	movs	r2, #8
 8001852:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f8f5 	bl	8001a44 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d07b      	beq.n	800195c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d072      	beq.n	8001954 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d043      	beq.n	8001954 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03e      	beq.n	8001954 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018dc:	2b60      	cmp	r3, #96	; 0x60
 80018de:	d02b      	beq.n	8001938 <HAL_CAN_IRQHandler+0x32a>
 80018e0:	2b60      	cmp	r3, #96	; 0x60
 80018e2:	d82e      	bhi.n	8001942 <HAL_CAN_IRQHandler+0x334>
 80018e4:	2b50      	cmp	r3, #80	; 0x50
 80018e6:	d022      	beq.n	800192e <HAL_CAN_IRQHandler+0x320>
 80018e8:	2b50      	cmp	r3, #80	; 0x50
 80018ea:	d82a      	bhi.n	8001942 <HAL_CAN_IRQHandler+0x334>
 80018ec:	2b40      	cmp	r3, #64	; 0x40
 80018ee:	d019      	beq.n	8001924 <HAL_CAN_IRQHandler+0x316>
 80018f0:	2b40      	cmp	r3, #64	; 0x40
 80018f2:	d826      	bhi.n	8001942 <HAL_CAN_IRQHandler+0x334>
 80018f4:	2b30      	cmp	r3, #48	; 0x30
 80018f6:	d010      	beq.n	800191a <HAL_CAN_IRQHandler+0x30c>
 80018f8:	2b30      	cmp	r3, #48	; 0x30
 80018fa:	d822      	bhi.n	8001942 <HAL_CAN_IRQHandler+0x334>
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d002      	beq.n	8001906 <HAL_CAN_IRQHandler+0x2f8>
 8001900:	2b20      	cmp	r3, #32
 8001902:	d005      	beq.n	8001910 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001904:	e01d      	b.n	8001942 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800190e:	e019      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001918:	e014      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001922:	e00f      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800192c:	e00a      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001936:	e005      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001940:	e000      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            break;
 8001942:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001952:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2204      	movs	r2, #4
 800195a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f872 	bl	8001a58 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	; (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff8e 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff29 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff3e 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff8e 	bl	8001b60 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5d 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff31 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffa2 	bl	8001bc8 <SysTick_Config>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	e166      	b.n	8001f6e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8158 	beq.w	8001f68 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x40>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d017      	beq.n	8001d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d123      	bne.n	8001dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	6939      	ldr	r1, [r7, #16]
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80b2 	beq.w	8001f68 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b61      	ldr	r3, [pc, #388]	; (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	4a60      	ldr	r2, [pc, #384]	; (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e10:	4b5e      	ldr	r3, [pc, #376]	; (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e1c:	4a5c      	ldr	r2, [pc, #368]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e46:	d02b      	beq.n	8001ea0 <HAL_GPIO_Init+0x210>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d025      	beq.n	8001e9c <HAL_GPIO_Init+0x20c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a51      	ldr	r2, [pc, #324]	; (8001f98 <HAL_GPIO_Init+0x308>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d01f      	beq.n	8001e98 <HAL_GPIO_Init+0x208>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <HAL_GPIO_Init+0x30c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d019      	beq.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a4f      	ldr	r2, [pc, #316]	; (8001fa0 <HAL_GPIO_Init+0x310>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_GPIO_Init+0x200>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a4e      	ldr	r2, [pc, #312]	; (8001fa4 <HAL_GPIO_Init+0x314>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1fc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a4d      	ldr	r2, [pc, #308]	; (8001fa8 <HAL_GPIO_Init+0x318>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1f8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <HAL_GPIO_Init+0x31c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1f4>
 8001e80:	2307      	movs	r3, #7
 8001e82:	e00e      	b.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001e84:	2308      	movs	r3, #8
 8001e86:	e00c      	b.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001e88:	2306      	movs	r3, #6
 8001e8a:	e00a      	b.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001e8c:	2305      	movs	r3, #5
 8001e8e:	e008      	b.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e006      	b.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001e94:	2303      	movs	r3, #3
 8001e96:	e004      	b.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e002      	b.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_GPIO_Init+0x212>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	f002 0203 	and.w	r2, r2, #3
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	4093      	lsls	r3, r2
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb2:	4937      	ldr	r1, [pc, #220]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ee4:	4a32      	ldr	r2, [pc, #200]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f0e:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f62:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <HAL_GPIO_Init+0x320>)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f47f ae91 	bne.w	8001ca0 <HAL_GPIO_Init+0x10>
  }
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40010000 	.word	0x40010000
 8001f94:	48000400 	.word	0x48000400
 8001f98:	48000800 	.word	0x48000800
 8001f9c:	48000c00 	.word	0x48000c00
 8001fa0:	48001000 	.word	0x48001000
 8001fa4:	48001400 	.word	0x48001400
 8001fa8:	48001800 	.word	0x48001800
 8001fac:	48001c00 	.word	0x48001c00
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	b08f      	sub	sp, #60	; 0x3c
 8001fe8:	af0a      	add	r7, sp, #40	; 0x28
 8001fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e116      	b.n	8002224 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7fe fe17 	bl	8000c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2203      	movs	r2, #3
 800201a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fc85 	bl	8004944 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	687e      	ldr	r6, [r7, #4]
 8002042:	466d      	mov	r5, sp
 8002044:	f106 0410 	add.w	r4, r6, #16
 8002048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002050:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002054:	e885 0003 	stmia.w	r5, {r0, r1}
 8002058:	1d33      	adds	r3, r6, #4
 800205a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205c:	6838      	ldr	r0, [r7, #0]
 800205e:	f002 fc45 	bl	80048ec <USB_CoreInit>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d7      	b.n	8002224 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fc73 	bl	8004966 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e04a      	b.n	800211c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	333d      	adds	r3, #61	; 0x3d
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	333c      	adds	r3, #60	; 0x3c
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	b298      	uxth	r0, r3
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3356      	adds	r3, #86	; 0x56
 80020c2:	4602      	mov	r2, r0
 80020c4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3340      	adds	r3, #64	; 0x40
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3344      	adds	r3, #68	; 0x44
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3348      	adds	r3, #72	; 0x48
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	334c      	adds	r3, #76	; 0x4c
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	3301      	adds	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3af      	bcc.n	8002086 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e044      	b.n	80021b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	3301      	adds	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d3b5      	bcc.n	800212c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	687e      	ldr	r6, [r7, #4]
 80021c8:	466d      	mov	r5, sp
 80021ca:	f106 0410 	add.w	r4, r6, #16
 80021ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021da:	e885 0003 	stmia.w	r5, {r0, r1}
 80021de:	1d33      	adds	r3, r6, #4
 80021e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	f002 fc0c 	bl	8004a00 <USB_DevInit>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e014      	b.n	8002224 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f80a 	bl	800222c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fdae 	bl	8004d7e <USB_DevDisconnect>

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800222c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	f043 0303 	orr.w	r3, r3, #3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002284:	d102      	bne.n	800228c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800228a:	e00b      	b.n	80022a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229a:	d102      	bne.n	80022a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800229c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a0:	e000      	b.n	80022a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80022a2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40007000 	.word	0x40007000

080022b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d141      	bne.n	8002346 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d131      	bne.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d0:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022d6:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e0:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e8:	4a41      	ldr	r2, [pc, #260]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022f0:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2232      	movs	r2, #50	; 0x32
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a3f      	ldr	r2, [pc, #252]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	0c9b      	lsrs	r3, r3, #18
 8002302:	3301      	adds	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002306:	e002      	b.n	800230e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3b01      	subs	r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d102      	bne.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f2      	bne.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002322:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d158      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e057      	b.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800233a:	4a2d      	ldr	r2, [pc, #180]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002344:	e04d      	b.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234c:	d141      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d131      	bne.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002362:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800236c:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002374:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2232      	movs	r2, #50	; 0x32
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	0c9b      	lsrs	r3, r3, #18
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002392:	e002      	b.n	800239a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3b01      	subs	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a6:	d102      	bne.n	80023ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f2      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	d112      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e011      	b.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023d0:	e007      	b.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40007000 	.word	0x40007000
 80023f4:	20000000 	.word	0x20000000
 80023f8:	431bde83 	.word	0x431bde83

080023fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800240a:	6053      	str	r3, [r2, #4]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40007000 	.word	0x40007000

0800241c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242a:	6053      	str	r3, [r2, #4]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40007000 	.word	0x40007000

0800243c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f000 bc08 	b.w	8002c60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002450:	4b96      	ldr	r3, [pc, #600]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245a:	4b94      	ldr	r3, [pc, #592]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80e4 	beq.w	800263a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_RCC_OscConfig+0x4c>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	f040 808b 	bne.w	8002596 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b01      	cmp	r3, #1
 8002484:	f040 8087 	bne.w	8002596 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002488:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_OscConfig+0x64>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e3df      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <HAL_RCC_OscConfig+0x7e>
 80024b0:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b8:	e005      	b.n	80024c6 <HAL_RCC_OscConfig+0x8a>
 80024ba:	4b7c      	ldr	r3, [pc, #496]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d223      	bcs.n	8002512 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fdcc 	bl	800306c <RCC_SetFlashLatencyFromMSIRange>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e3c0      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024e4:	f043 0308 	orr.w	r3, r3, #8
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	496d      	ldr	r1, [pc, #436]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fc:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	4968      	ldr	r1, [pc, #416]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e025      	b.n	800255e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002512:	4b66      	ldr	r3, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a65      	ldr	r2, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b63      	ldr	r3, [pc, #396]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4960      	ldr	r1, [pc, #384]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002530:	4b5e      	ldr	r3, [pc, #376]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	495b      	ldr	r1, [pc, #364]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fd8c 	bl	800306c <RCC_SetFlashLatencyFromMSIRange>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e380      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800255e:	f000 fcc1 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b51      	ldr	r3, [pc, #324]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4950      	ldr	r1, [pc, #320]	; (80026b0 <HAL_RCC_OscConfig+0x274>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a4e      	ldr	r2, [pc, #312]	; (80026b4 <HAL_RCC_OscConfig+0x278>)
 800257c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800257e:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fc72 	bl	8000e6c <HAL_InitTick>
 8002588:	4603      	mov	r3, r0
 800258a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d052      	beq.n	8002638 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	e364      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d032      	beq.n	8002604 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800259e:	4b43      	ldr	r3, [pc, #268]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a42      	ldr	r2, [pc, #264]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fcaf 	bl	8000f0c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b2:	f7fe fcab 	bl	8000f0c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e34d      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025d6:	f043 0308 	orr.w	r3, r3, #8
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b33      	ldr	r3, [pc, #204]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4930      	ldr	r1, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	492b      	ldr	r1, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
 8002602:	e01a      	b.n	800263a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002610:	f7fe fc7c 	bl	8000f0c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002618:	f7fe fc78 	bl	8000f0c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e31a      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x1dc>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d073      	beq.n	800272e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d005      	beq.n	8002658 <HAL_RCC_OscConfig+0x21c>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d10e      	bne.n	8002670 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d10b      	bne.n	8002670 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d063      	beq.n	800272c <HAL_RCC_OscConfig+0x2f0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d15f      	bne.n	800272c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e2f7      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d106      	bne.n	8002688 <HAL_RCC_OscConfig+0x24c>
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e025      	b.n	80026d4 <HAL_RCC_OscConfig+0x298>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002690:	d114      	bne.n	80026bc <HAL_RCC_OscConfig+0x280>
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a02      	ldr	r2, [pc, #8]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e013      	b.n	80026d4 <HAL_RCC_OscConfig+0x298>
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08004eb4 	.word	0x08004eb4
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004
 80026bc:	4ba0      	ldr	r3, [pc, #640]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a9f      	ldr	r2, [pc, #636]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b9d      	ldr	r3, [pc, #628]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a9c      	ldr	r2, [pc, #624]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fc16 	bl	8000f0c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fc12 	bl	8000f0c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e2b4      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f6:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2a8>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fc02 	bl	8000f0c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fbfe 	bl	8000f0c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e2a0      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271e:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x2d0>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d060      	beq.n	80027fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x310>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d119      	bne.n	800277a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d116      	bne.n	800277a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274c:	4b7c      	ldr	r3, [pc, #496]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x328>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e27d      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	4973      	ldr	r1, [pc, #460]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	e040      	b.n	80027fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d023      	beq.n	80027ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002782:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6e      	ldr	r2, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fbbd 	bl	8000f0c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fbb9 	bl	8000f0c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e25b      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a8:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	495f      	ldr	r1, [pc, #380]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e018      	b.n	80027fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a5c      	ldr	r2, [pc, #368]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fb99 	bl	8000f0c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027de:	f7fe fb95 	bl	8000f0c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e237      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d03c      	beq.n	8002882 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01c      	beq.n	800284a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002816:	4a4a      	ldr	r2, [pc, #296]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fb74 	bl	8000f0c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe fb70 	bl	8000f0c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e212      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <HAL_RCC_OscConfig+0x3ec>
 8002848:	e01b      	b.n	8002882 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800284c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002850:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fb57 	bl	8000f0c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002862:	f7fe fb53 	bl	8000f0c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1f5      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002874:	4b32      	ldr	r3, [pc, #200]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ef      	bne.n	8002862 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80a6 	beq.w	80029dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10d      	bne.n	80028bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_OscConfig+0x508>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d118      	bne.n	80028fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_RCC_OscConfig+0x508>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_RCC_OscConfig+0x508>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d4:	f7fe fb1a 	bl	8000f0c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fb16 	bl	8000f0c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1b8      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_RCC_OscConfig+0x508>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d108      	bne.n	8002914 <HAL_RCC_OscConfig+0x4d8>
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002912:	e029      	b.n	8002968 <HAL_RCC_OscConfig+0x52c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d115      	bne.n	8002948 <HAL_RCC_OscConfig+0x50c>
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	4a03      	ldr	r2, [pc, #12]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x52c>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	4b9d      	ldr	r3, [pc, #628]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	4a9c      	ldr	r2, [pc, #624]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	4a98      	ldr	r2, [pc, #608]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d016      	beq.n	800299e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe facc 	bl	8000f0c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe fac8 	bl	8000f0c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e168      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298e:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0ed      	beq.n	8002978 <HAL_RCC_OscConfig+0x53c>
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe fab5 	bl	8000f0c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fab1 	bl	8000f0c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e151      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029bc:	4b80      	ldr	r3, [pc, #512]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ed      	bne.n	80029a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ca:	7ffb      	ldrb	r3, [r7, #31]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b7b      	ldr	r3, [pc, #492]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	4a7a      	ldr	r2, [pc, #488]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029f0:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 80029f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029f6:	4a72      	ldr	r2, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fa84 	bl	8000f0c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a08:	f7fe fa80 	bl	8000f0c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e122      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a1a:	4b69      	ldr	r3, [pc, #420]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ef      	beq.n	8002a08 <HAL_RCC_OscConfig+0x5cc>
 8002a28:	e01b      	b.n	8002a62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a2a:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a30:	4a63      	ldr	r2, [pc, #396]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fa67 	bl	8000f0c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a42:	f7fe fa63 	bl	8000f0c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e105      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a54:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80f9 	beq.w	8002c5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	f040 80cf 	bne.w	8002c14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a76:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f003 0203 	and.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d12c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	3b01      	subs	r3, #1
 8002a96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d123      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d113      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d109      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d071      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d068      	beq.n	8002bbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aea:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0ac      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2d      	ldr	r2, [pc, #180]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b12:	f7fe f9fb 	bl	8000f0c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe f9f7 	bl	8000f0c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e099      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_RCC_OscConfig+0x788>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b52:	0212      	lsls	r2, r2, #8
 8002b54:	4311      	orrs	r1, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b5a:	0852      	lsrs	r2, r2, #1
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	0552      	lsls	r2, r2, #21
 8002b60:	4311      	orrs	r1, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b66:	0852      	lsrs	r2, r2, #1
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0652      	lsls	r2, r2, #25
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b72:	06d2      	lsls	r2, r2, #27
 8002b74:	430a      	orrs	r2, r1
 8002b76:	4912      	ldr	r1, [pc, #72]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b94:	f7fe f9ba 	bl	8000f0c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe f9b6 	bl	8000f0c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e058      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <HAL_RCC_OscConfig+0x784>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bba:	e050      	b.n	8002c5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e04f      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d144      	bne.n	8002c5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bec:	f7fe f98e 	bl	8000f0c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe f98a 	bl	8000f0c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e02c      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x7b8>
 8002c12:	e024      	b.n	8002c5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d01f      	beq.n	8002c5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe f971 	bl	8000f0c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe f96d 	bl	8000f0c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e00f      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	4905      	ldr	r1, [pc, #20]	; (8002c68 <HAL_RCC_OscConfig+0x82c>)
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCC_OscConfig+0x830>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]
 8002c58:	e001      	b.n	8002c5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	feeefffc 	.word	0xfeeefffc

08002c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e11d      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b90      	ldr	r3, [pc, #576]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d910      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b8d      	ldr	r3, [pc, #564]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 020f 	bic.w	r2, r3, #15
 8002c9e:	498b      	ldr	r1, [pc, #556]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e105      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d908      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	497b      	ldr	r1, [pc, #492]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d079      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d11e      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0dc      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d0a:	f000 fa09 	bl	8003120 <RCC_GetSysClockFreqFromPLLSource>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a70      	ldr	r2, [pc, #448]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d946      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d16:	4b6e      	ldr	r3, [pc, #440]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d140      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d22:	4b6b      	ldr	r3, [pc, #428]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	4a69      	ldr	r2, [pc, #420]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e035      	b.n	8002da4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d40:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d115      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b9      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d58:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0ad      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0a5      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d78:	f000 f8b4 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d90f      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d84:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d90:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d98:	4a4d      	ldr	r2, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da4:	4b4a      	ldr	r3, [pc, #296]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 0203 	bic.w	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4947      	ldr	r1, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db6:	f7fe f8a9 	bl	8000f0c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbe:	f7fe f8a5 	bl	8000f0c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e077      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd4:	4b3e      	ldr	r3, [pc, #248]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 020c 	and.w	r2, r3, #12
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d1eb      	bne.n	8002dbe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d105      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dec:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a37      	ldr	r2, [pc, #220]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d208      	bcs.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	492b      	ldr	r1, [pc, #172]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d210      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e34:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 020f 	bic.w	r2, r3, #15
 8002e3c:	4923      	ldr	r1, [pc, #140]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e036      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	4918      	ldr	r1, [pc, #96]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4910      	ldr	r1, [pc, #64]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e94:	f000 f826 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	490c      	ldr	r1, [pc, #48]	; (8002ed8 <HAL_RCC_ClockConfig+0x268>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb0:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_RCC_ClockConfig+0x26c>)
 8002eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_RCC_ClockConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd ffd7 	bl	8000e6c <HAL_InitTick>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	04c4b400 	.word	0x04c4b400
 8002ed8:	08004eb4 	.word	0x08004eb4
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	20000004 	.word	0x20000004

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x34>
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d121      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d11e      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f18:	4b34      	ldr	r3, [pc, #208]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f24:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e005      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f40:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10d      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e004      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f68:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d134      	bne.n	8002fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d003      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0xac>
 8002f88:	e005      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f8c:	617b      	str	r3, [r7, #20]
      break;
 8002f8e:	e005      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f92:	617b      	str	r3, [r7, #20]
      break;
 8002f94:	e002      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	617b      	str	r3, [r7, #20]
      break;
 8002f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	fb03 f202 	mul.w	r2, r3, r2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	0e5b      	lsrs	r3, r3, #25
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	08004ecc 	.word	0x08004ecc
 8002ff4:	00f42400 	.word	0x00f42400
 8002ff8:	007a1200 	.word	0x007a1200

08002ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_GetHCLKFreq+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003018:	f7ff fff0 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4904      	ldr	r1, [pc, #16]	; (800303c <HAL_RCC_GetPCLK1Freq+0x28>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	08004ec4 	.word	0x08004ec4

08003040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003044:	f7ff ffda 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0adb      	lsrs	r3, r3, #11
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08004ec4 	.word	0x08004ec4

0800306c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003078:	4b27      	ldr	r3, [pc, #156]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003084:	f7ff f8f6 	bl	8002274 <HAL_PWREx_GetVoltageRange>
 8003088:	6178      	str	r0, [r7, #20]
 800308a:	e014      	b.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	4a21      	ldr	r2, [pc, #132]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003096:	6593      	str	r3, [r2, #88]	; 0x58
 8003098:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a4:	f7ff f8e6 	bl	8002274 <HAL_PWREx_GetVoltageRange>
 80030a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d10b      	bne.n	80030d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d913      	bls.n	80030ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2ba0      	cmp	r3, #160	; 0xa0
 80030c8:	d902      	bls.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ca:	2302      	movs	r3, #2
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	e00d      	b.n	80030ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d0:	2301      	movs	r3, #1
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	e00a      	b.n	80030ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b7f      	cmp	r3, #127	; 0x7f
 80030da:	d902      	bls.n	80030e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030dc:	2302      	movs	r3, #2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	e004      	b.n	80030ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d101      	bne.n	80030ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e8:	2301      	movs	r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 020f 	bic.w	r2, r3, #15
 80030f4:	4909      	ldr	r1, [pc, #36]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	40022000 	.word	0x40022000

08003120 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d00b      	beq.n	800314e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d825      	bhi.n	8003188 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d008      	beq.n	8003154 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d11f      	bne.n	8003188 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800314a:	613b      	str	r3, [r7, #16]
    break;
 800314c:	e01f      	b.n	800318e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800314e:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003150:	613b      	str	r3, [r7, #16]
    break;
 8003152:	e01c      	b.n	800318e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003154:	4b21      	ldr	r3, [pc, #132]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003160:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e005      	b.n	800317c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003184:	613b      	str	r3, [r7, #16]
    break;
 8003186:	e002      	b.n	800318e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
    break;
 800318c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	3301      	adds	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	fb03 f202 	mul.w	r2, r3, r2
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	0e5b      	lsrs	r3, r3, #25
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	3301      	adds	r3, #1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031ce:	683b      	ldr	r3, [r7, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40021000 	.word	0x40021000
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200
 80031e8:	08004ecc 	.word	0x08004ecc

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003204:	2b00      	cmp	r3, #0
 8003206:	d040      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d02a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003210:	2b80      	cmp	r3, #128	; 0x80
 8003212:	d825      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003214:	2b60      	cmp	r3, #96	; 0x60
 8003216:	d026      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003218:	2b60      	cmp	r3, #96	; 0x60
 800321a:	d821      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d006      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d81d      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d010      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800322c:	e018      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800322e:	4b89      	ldr	r3, [pc, #548]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	4a88      	ldr	r2, [pc, #544]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323a:	e015      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fb02 	bl	800384c <RCCEx_PLLSAI1_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324c:	e00c      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3320      	adds	r3, #32
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fbed 	bl	8003a34 <RCCEx_PLLSAI2_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325e:	e003      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	74fb      	strb	r3, [r7, #19]
      break;
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10b      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800326e:	4b79      	ldr	r3, [pc, #484]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003270:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003274:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327c:	4975      	ldr	r1, [pc, #468]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003284:	e001      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d047      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d030      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d82a      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032aa:	d02a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b0:	d824      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032bc:	d81e      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c6:	d010      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032c8:	e018      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	4a61      	ldr	r2, [pc, #388]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d6:	e015      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fab4 	bl	800384c <RCCEx_PLLSAI1_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e8:	e00c      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3320      	adds	r3, #32
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fb9f 	bl	8003a34 <RCCEx_PLLSAI2_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fa:	e003      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	74fb      	strb	r3, [r7, #19]
      break;
 8003300:	e000      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10b      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800330a:	4b52      	ldr	r3, [pc, #328]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	494e      	ldr	r1, [pc, #312]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003320:	e001      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 809f 	beq.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	4a40      	ldr	r2, [pc, #256]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6593      	str	r3, [r2, #88]	; 0x58
 800335a:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336a:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3a      	ldr	r2, [pc, #232]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003376:	f7fd fdc9 	bl	8000f0c <HAL_GetTick>
 800337a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800337c:	e009      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337e:	f7fd fdc5 	bl	8000f0c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d902      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	74fb      	strb	r3, [r7, #19]
        break;
 8003390:	e005      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003392:	4b31      	ldr	r3, [pc, #196]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ef      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d15b      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01f      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d019      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ce:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ee:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d016      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd fd84 	bl	8000f0c <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	e00b      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fd fd80 	bl	8000f0c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d902      	bls.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	74fb      	strb	r3, [r7, #19]
            break;
 800341e:	e006      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ec      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10c      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	4903      	ldr	r1, [pc, #12]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800344c:	e008      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	74bb      	strb	r3, [r7, #18]
 8003452:	e005      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003454:	40021000 	.word	0x40021000
 8003458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003460:	7c7b      	ldrb	r3, [r7, #17]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4ba0      	ldr	r3, [pc, #640]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	4a9f      	ldr	r2, [pc, #636]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347e:	4b9a      	ldr	r3, [pc, #616]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f023 0203 	bic.w	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	4996      	ldr	r1, [pc, #600]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a0:	4b91      	ldr	r3, [pc, #580]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f023 020c 	bic.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	498e      	ldr	r1, [pc, #568]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	4985      	ldr	r1, [pc, #532]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e4:	4b80      	ldr	r3, [pc, #512]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	497d      	ldr	r1, [pc, #500]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003506:	4b78      	ldr	r3, [pc, #480]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	4974      	ldr	r1, [pc, #464]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003528:	4b6f      	ldr	r3, [pc, #444]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	496c      	ldr	r1, [pc, #432]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354a:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003558:	4963      	ldr	r1, [pc, #396]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800356c:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357a:	495b      	ldr	r1, [pc, #364]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358e:	4b56      	ldr	r3, [pc, #344]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	4952      	ldr	r1, [pc, #328]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b0:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	494a      	ldr	r1, [pc, #296]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d2:	4b45      	ldr	r3, [pc, #276]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	4941      	ldr	r1, [pc, #260]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f4:	4b3c      	ldr	r3, [pc, #240]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003602:	4939      	ldr	r1, [pc, #228]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d028      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	4930      	ldr	r1, [pc, #192]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003634:	d106      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003640:	60d3      	str	r3, [r2, #12]
 8003642:	e011      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800364c:	d10c      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f8f9 	bl	800384c <RCCEx_PLLSAI1_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d04d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367c:	d108      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003684:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800368e:	e012      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003690:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003696:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800369c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ae:	490e      	ldr	r1, [pc, #56]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036be:	d106      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ca:	60d3      	str	r3, [r2, #12]
 80036cc:	e020      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d6:	d109      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a02      	ldr	r2, [pc, #8]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	e014      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f8a5 	bl	800384c <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d028      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800371c:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372a:	4947      	ldr	r1, [pc, #284]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800373a:	d106      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a41      	ldr	r2, [pc, #260]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003746:	60d3      	str	r3, [r2, #12]
 8003748:	e011      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003752:	d10c      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3304      	adds	r3, #4
 8003758:	2101      	movs	r1, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f876 	bl	800384c <RCCEx_PLLSAI1_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01e      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800377a:	4b33      	ldr	r3, [pc, #204]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378a:	492f      	ldr	r1, [pc, #188]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2102      	movs	r1, #2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f851 	bl	800384c <RCCEx_PLLSAI1_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ca:	f023 0204 	bic.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d4:	491c      	ldr	r1, [pc, #112]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ee:	f023 0218 	bic.w	r2, r3, #24
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f8:	4913      	ldr	r1, [pc, #76]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d017      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003812:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381c:	490a      	ldr	r1, [pc, #40]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800382e:	d105      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800383c:	7cbb      	ldrb	r3, [r7, #18]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000

0800384c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800385a:	4b72      	ldr	r3, [pc, #456]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00e      	beq.n	8003884 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003866:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0203 	and.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d103      	bne.n	800387e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
       ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	d142      	bne.n	8003904 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e03f      	b.n	8003904 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d018      	beq.n	80038be <RCCEx_PLLSAI1_Config+0x72>
 800388c:	2b03      	cmp	r3, #3
 800388e:	d825      	bhi.n	80038dc <RCCEx_PLLSAI1_Config+0x90>
 8003890:	2b01      	cmp	r3, #1
 8003892:	d002      	beq.n	800389a <RCCEx_PLLSAI1_Config+0x4e>
 8003894:	2b02      	cmp	r3, #2
 8003896:	d009      	beq.n	80038ac <RCCEx_PLLSAI1_Config+0x60>
 8003898:	e020      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800389a:	4b62      	ldr	r3, [pc, #392]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11d      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038aa:	e01a      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038ac:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038bc:	e013      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ca:	4b56      	ldr	r3, [pc, #344]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038da:	e006      	b.n	80038ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	e004      	b.n	80038ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038e2:	bf00      	nop
 80038e4:	e002      	b.n	80038ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d108      	bne.n	8003904 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038f2:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4949      	ldr	r1, [pc, #292]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 8086 	bne.w	8003a18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800390c:	4b45      	ldr	r3, [pc, #276]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a44      	ldr	r2, [pc, #272]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fd faf8 	bl	8000f0c <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003920:	f7fd faf4 	bl	8000f0c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
        break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003934:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ef      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d168      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d113      	bne.n	8003974 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003952:	4013      	ands	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6892      	ldr	r2, [r2, #8]
 8003958:	0211      	lsls	r1, r2, #8
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	06d2      	lsls	r2, r2, #27
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6852      	ldr	r2, [r2, #4]
 8003966:	3a01      	subs	r2, #1
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	430a      	orrs	r2, r1
 800396c:	492d      	ldr	r1, [pc, #180]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	610b      	str	r3, [r1, #16]
 8003972:	e02d      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d115      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	0211      	lsls	r1, r2, #8
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6912      	ldr	r2, [r2, #16]
 800398c:	0852      	lsrs	r2, r2, #1
 800398e:	3a01      	subs	r2, #1
 8003990:	0552      	lsls	r2, r2, #21
 8003992:	4311      	orrs	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6852      	ldr	r2, [r2, #4]
 8003998:	3a01      	subs	r2, #1
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	430a      	orrs	r2, r1
 800399e:	4921      	ldr	r1, [pc, #132]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
 80039a4:	e014      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6892      	ldr	r2, [r2, #8]
 80039b2:	0211      	lsls	r1, r2, #8
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6952      	ldr	r2, [r2, #20]
 80039b8:	0852      	lsrs	r2, r2, #1
 80039ba:	3a01      	subs	r2, #1
 80039bc:	0652      	lsls	r2, r2, #25
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6852      	ldr	r2, [r2, #4]
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	430a      	orrs	r2, r1
 80039ca:	4916      	ldr	r1, [pc, #88]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039d0:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd fa96 	bl	8000f0c <HAL_GetTick>
 80039e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e2:	e009      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e4:	f7fd fa92 	bl	8000f0c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d902      	bls.n	80039f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	73fb      	strb	r3, [r7, #15]
          break;
 80039f6:	e005      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	4904      	ldr	r1, [pc, #16]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	07ff800f 	.word	0x07ff800f
 8003a2c:	ff9f800f 	.word	0xff9f800f
 8003a30:	f9ff800f 	.word	0xf9ff800f

08003a34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a42:	4b72      	ldr	r3, [pc, #456]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00e      	beq.n	8003a6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a4e:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0203 	and.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d103      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
       ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d142      	bne.n	8003aec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	e03f      	b.n	8003aec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d018      	beq.n	8003aa6 <RCCEx_PLLSAI2_Config+0x72>
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d825      	bhi.n	8003ac4 <RCCEx_PLLSAI2_Config+0x90>
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d002      	beq.n	8003a82 <RCCEx_PLLSAI2_Config+0x4e>
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d009      	beq.n	8003a94 <RCCEx_PLLSAI2_Config+0x60>
 8003a80:	e020      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a82:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d11d      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a92:	e01a      	b.n	8003aca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a94:	4b5d      	ldr	r3, [pc, #372]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d116      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa4:	e013      	b.n	8003ace <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aa6:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10f      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ab2:	4b56      	ldr	r3, [pc, #344]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ac2:	e006      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e004      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ad2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ada:	4b4c      	ldr	r3, [pc, #304]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4949      	ldr	r1, [pc, #292]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 8086 	bne.w	8003c00 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003af4:	4b45      	ldr	r3, [pc, #276]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a44      	ldr	r2, [pc, #272]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd fa04 	bl	8000f0c <HAL_GetTick>
 8003b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b06:	e009      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b08:	f7fd fa00 	bl	8000f0c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d902      	bls.n	8003b1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	73fb      	strb	r3, [r7, #15]
        break;
 8003b1a:	e005      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ef      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d168      	bne.n	8003c00 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d113      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b34:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6892      	ldr	r2, [r2, #8]
 8003b40:	0211      	lsls	r1, r2, #8
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	06d2      	lsls	r2, r2, #27
 8003b48:	4311      	orrs	r1, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6852      	ldr	r2, [r2, #4]
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0112      	lsls	r2, r2, #4
 8003b52:	430a      	orrs	r2, r1
 8003b54:	492d      	ldr	r1, [pc, #180]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	614b      	str	r3, [r1, #20]
 8003b5a:	e02d      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d115      	bne.n	8003b8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b62:	4b2a      	ldr	r3, [pc, #168]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6892      	ldr	r2, [r2, #8]
 8003b6e:	0211      	lsls	r1, r2, #8
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6912      	ldr	r2, [r2, #16]
 8003b74:	0852      	lsrs	r2, r2, #1
 8003b76:	3a01      	subs	r2, #1
 8003b78:	0552      	lsls	r2, r2, #21
 8003b7a:	4311      	orrs	r1, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6852      	ldr	r2, [r2, #4]
 8003b80:	3a01      	subs	r2, #1
 8003b82:	0112      	lsls	r2, r2, #4
 8003b84:	430a      	orrs	r2, r1
 8003b86:	4921      	ldr	r1, [pc, #132]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	614b      	str	r3, [r1, #20]
 8003b8c:	e014      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6892      	ldr	r2, [r2, #8]
 8003b9a:	0211      	lsls	r1, r2, #8
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6952      	ldr	r2, [r2, #20]
 8003ba0:	0852      	lsrs	r2, r2, #1
 8003ba2:	3a01      	subs	r2, #1
 8003ba4:	0652      	lsls	r2, r2, #25
 8003ba6:	4311      	orrs	r1, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6852      	ldr	r2, [r2, #4]
 8003bac:	3a01      	subs	r2, #1
 8003bae:	0112      	lsls	r2, r2, #4
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	4916      	ldr	r1, [pc, #88]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd f9a2 	bl	8000f0c <HAL_GetTick>
 8003bc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bca:	e009      	b.n	8003be0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bcc:	f7fd f99e 	bl	8000f0c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d902      	bls.n	8003be0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	73fb      	strb	r3, [r7, #15]
          break;
 8003bde:	e005      	b.n	8003bec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ef      	beq.n	8003bcc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	4904      	ldr	r1, [pc, #16]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	07ff800f 	.word	0x07ff800f
 8003c14:	ff9f800f 	.word	0xff9f800f
 8003c18:	f9ff800f 	.word	0xf9ff800f

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e042      	b.n	8003cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fc ff59 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2224      	movs	r2, #36	; 0x24
 8003c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fb24 	bl	80042b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f825 	bl	8003cbc <UART_SetConfig>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e01b      	b.n	8003cb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fba3 	bl	80043f8 <UART_CheckIdleState>
 8003cb2:	4603      	mov	r3, r0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc0:	b08c      	sub	sp, #48	; 0x30
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4baa      	ldr	r3, [pc, #680]	; (8003f94 <UART_SetConfig+0x2d8>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a9f      	ldr	r2, [pc, #636]	; (8003f98 <UART_SetConfig+0x2dc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d24:	4313      	orrs	r3, r2
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	f023 010f 	bic.w	r1, r3, #15
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a90      	ldr	r2, [pc, #576]	; (8003f9c <UART_SetConfig+0x2e0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d125      	bne.n	8003dac <UART_SetConfig+0xf0>
 8003d60:	4b8f      	ldr	r3, [pc, #572]	; (8003fa0 <UART_SetConfig+0x2e4>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d81a      	bhi.n	8003da4 <UART_SetConfig+0xe8>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <UART_SetConfig+0xb8>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d95 	.word	0x08003d95
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d9d 	.word	0x08003d9d
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	e116      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d92:	e112      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9a:	e10e      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da2:	e10a      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003daa:	e106      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7c      	ldr	r2, [pc, #496]	; (8003fa4 <UART_SetConfig+0x2e8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d138      	bne.n	8003e28 <UART_SetConfig+0x16c>
 8003db6:	4b7a      	ldr	r3, [pc, #488]	; (8003fa0 <UART_SetConfig+0x2e4>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	d82d      	bhi.n	8003e20 <UART_SetConfig+0x164>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0x110>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e21 	.word	0x08003e21
 8003dd4:	08003e21 	.word	0x08003e21
 8003dd8:	08003e21 	.word	0x08003e21
 8003ddc:	08003e11 	.word	0x08003e11
 8003de0:	08003e21 	.word	0x08003e21
 8003de4:	08003e21 	.word	0x08003e21
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	08003e21 	.word	0x08003e21
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e19 	.word	0x08003e19
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e06:	e0d8      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0e:	e0d4      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e10:	2304      	movs	r3, #4
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e16:	e0d0      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e18:	2308      	movs	r3, #8
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1e:	e0cc      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e20:	2310      	movs	r3, #16
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e26:	e0c8      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5e      	ldr	r2, [pc, #376]	; (8003fa8 <UART_SetConfig+0x2ec>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d125      	bne.n	8003e7e <UART_SetConfig+0x1c2>
 8003e32:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <UART_SetConfig+0x2e4>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d016      	beq.n	8003e6e <UART_SetConfig+0x1b2>
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d818      	bhi.n	8003e76 <UART_SetConfig+0x1ba>
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d00a      	beq.n	8003e5e <UART_SetConfig+0x1a2>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d814      	bhi.n	8003e76 <UART_SetConfig+0x1ba>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <UART_SetConfig+0x19a>
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d008      	beq.n	8003e66 <UART_SetConfig+0x1aa>
 8003e54:	e00f      	b.n	8003e76 <UART_SetConfig+0x1ba>
 8003e56:	2300      	movs	r3, #0
 8003e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5c:	e0ad      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e64:	e0a9      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e66:	2304      	movs	r3, #4
 8003e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e6c:	e0a5      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e74:	e0a1      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e76:	2310      	movs	r3, #16
 8003e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e7c:	e09d      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4a      	ldr	r2, [pc, #296]	; (8003fac <UART_SetConfig+0x2f0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d125      	bne.n	8003ed4 <UART_SetConfig+0x218>
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <UART_SetConfig+0x2e4>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e92:	2bc0      	cmp	r3, #192	; 0xc0
 8003e94:	d016      	beq.n	8003ec4 <UART_SetConfig+0x208>
 8003e96:	2bc0      	cmp	r3, #192	; 0xc0
 8003e98:	d818      	bhi.n	8003ecc <UART_SetConfig+0x210>
 8003e9a:	2b80      	cmp	r3, #128	; 0x80
 8003e9c:	d00a      	beq.n	8003eb4 <UART_SetConfig+0x1f8>
 8003e9e:	2b80      	cmp	r3, #128	; 0x80
 8003ea0:	d814      	bhi.n	8003ecc <UART_SetConfig+0x210>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <UART_SetConfig+0x1f0>
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d008      	beq.n	8003ebc <UART_SetConfig+0x200>
 8003eaa:	e00f      	b.n	8003ecc <UART_SetConfig+0x210>
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb2:	e082      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eba:	e07e      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec2:	e07a      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003ec4:	2308      	movs	r3, #8
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eca:	e076      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed2:	e072      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a35      	ldr	r2, [pc, #212]	; (8003fb0 <UART_SetConfig+0x2f4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d12a      	bne.n	8003f34 <UART_SetConfig+0x278>
 8003ede:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <UART_SetConfig+0x2e4>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eec:	d01a      	beq.n	8003f24 <UART_SetConfig+0x268>
 8003eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef2:	d81b      	bhi.n	8003f2c <UART_SetConfig+0x270>
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef8:	d00c      	beq.n	8003f14 <UART_SetConfig+0x258>
 8003efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efe:	d815      	bhi.n	8003f2c <UART_SetConfig+0x270>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <UART_SetConfig+0x250>
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f08:	d008      	beq.n	8003f1c <UART_SetConfig+0x260>
 8003f0a:	e00f      	b.n	8003f2c <UART_SetConfig+0x270>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f12:	e052      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f14:	2302      	movs	r3, #2
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1a:	e04e      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f22:	e04a      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f24:	2308      	movs	r3, #8
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2a:	e046      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f32:	e042      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <UART_SetConfig+0x2dc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d13a      	bne.n	8003fb4 <UART_SetConfig+0x2f8>
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <UART_SetConfig+0x2e4>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f4c:	d01a      	beq.n	8003f84 <UART_SetConfig+0x2c8>
 8003f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f52:	d81b      	bhi.n	8003f8c <UART_SetConfig+0x2d0>
 8003f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f58:	d00c      	beq.n	8003f74 <UART_SetConfig+0x2b8>
 8003f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5e:	d815      	bhi.n	8003f8c <UART_SetConfig+0x2d0>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <UART_SetConfig+0x2b0>
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f68:	d008      	beq.n	8003f7c <UART_SetConfig+0x2c0>
 8003f6a:	e00f      	b.n	8003f8c <UART_SetConfig+0x2d0>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f72:	e022      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f74:	2302      	movs	r3, #2
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7a:	e01e      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f82:	e01a      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f84:	2308      	movs	r3, #8
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8a:	e016      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f92:	e012      	b.n	8003fba <UART_SetConfig+0x2fe>
 8003f94:	cfff69f3 	.word	0xcfff69f3
 8003f98:	40008000 	.word	0x40008000
 8003f9c:	40013800 	.word	0x40013800
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40004400 	.word	0x40004400
 8003fa8:	40004800 	.word	0x40004800
 8003fac:	40004c00 	.word	0x40004c00
 8003fb0:	40005000 	.word	0x40005000
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4aae      	ldr	r2, [pc, #696]	; (8004278 <UART_SetConfig+0x5bc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	f040 8097 	bne.w	80040f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d823      	bhi.n	8004016 <UART_SetConfig+0x35a>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x318>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004017 	.word	0x08004017
 8003fdc:	08004001 	.word	0x08004001
 8003fe0:	08004017 	.word	0x08004017
 8003fe4:	08004007 	.word	0x08004007
 8003fe8:	08004017 	.word	0x08004017
 8003fec:	08004017 	.word	0x08004017
 8003ff0:	08004017 	.word	0x08004017
 8003ff4:	0800400f 	.word	0x0800400f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7ff f80c 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ffe:	e010      	b.n	8004022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004000:	4b9e      	ldr	r3, [pc, #632]	; (800427c <UART_SetConfig+0x5c0>)
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004004:	e00d      	b.n	8004022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004006:	f7fe ff6d 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800400c:	e009      	b.n	8004022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004014:	e005      	b.n	8004022 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8130 	beq.w	800428a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	4a94      	ldr	r2, [pc, #592]	; (8004280 <UART_SetConfig+0x5c4>)
 8004030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004034:	461a      	mov	r2, r3
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	fbb3 f3f2 	udiv	r3, r3, r2
 800403c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	429a      	cmp	r2, r3
 800404c:	d305      	bcc.n	800405a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	429a      	cmp	r2, r3
 8004058:	d903      	bls.n	8004062 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004060:	e113      	b.n	800428a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2200      	movs	r2, #0
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	60fa      	str	r2, [r7, #12]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	4a84      	ldr	r2, [pc, #528]	; (8004280 <UART_SetConfig+0x5c4>)
 8004070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004074:	b29b      	uxth	r3, r3
 8004076:	2200      	movs	r2, #0
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004080:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004084:	f7fc f8ba 	bl	80001fc <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	020b      	lsls	r3, r1, #8
 800409a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800409e:	0202      	lsls	r2, r0, #8
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	6849      	ldr	r1, [r1, #4]
 80040a4:	0849      	lsrs	r1, r1, #1
 80040a6:	2000      	movs	r0, #0
 80040a8:	460c      	mov	r4, r1
 80040aa:	4605      	mov	r5, r0
 80040ac:	eb12 0804 	adds.w	r8, r2, r4
 80040b0:	eb43 0905 	adc.w	r9, r3, r5
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	469a      	mov	sl, r3
 80040bc:	4693      	mov	fp, r2
 80040be:	4652      	mov	r2, sl
 80040c0:	465b      	mov	r3, fp
 80040c2:	4640      	mov	r0, r8
 80040c4:	4649      	mov	r1, r9
 80040c6:	f7fc f899 	bl	80001fc <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4613      	mov	r3, r2
 80040d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d8:	d308      	bcc.n	80040ec <UART_SetConfig+0x430>
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e0:	d204      	bcs.n	80040ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a3a      	ldr	r2, [r7, #32]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	e0ce      	b.n	800428a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040f2:	e0ca      	b.n	800428a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	d166      	bne.n	80041cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80040fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004102:	2b08      	cmp	r3, #8
 8004104:	d827      	bhi.n	8004156 <UART_SetConfig+0x49a>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x450>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004131 	.word	0x08004131
 8004110:	08004139 	.word	0x08004139
 8004114:	08004141 	.word	0x08004141
 8004118:	08004157 	.word	0x08004157
 800411c:	08004147 	.word	0x08004147
 8004120:	08004157 	.word	0x08004157
 8004124:	08004157 	.word	0x08004157
 8004128:	08004157 	.word	0x08004157
 800412c:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe ff70 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8004134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004136:	e014      	b.n	8004162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7fe ff82 	bl	8003040 <HAL_RCC_GetPCLK2Freq>
 800413c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800413e:	e010      	b.n	8004162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b4e      	ldr	r3, [pc, #312]	; (800427c <UART_SetConfig+0x5c0>)
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004144:	e00d      	b.n	8004162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7fe fecd 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800414c:	e009      	b.n	8004162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004154:	e005      	b.n	8004162 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8090 	beq.w	800428a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	4a44      	ldr	r2, [pc, #272]	; (8004280 <UART_SetConfig+0x5c4>)
 8004170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004174:	461a      	mov	r2, r3
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	fbb3 f3f2 	udiv	r3, r3, r2
 800417c:	005a      	lsls	r2, r3, #1
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	441a      	add	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d916      	bls.n	80041c4 <UART_SetConfig+0x508>
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d212      	bcs.n	80041c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f023 030f 	bic.w	r3, r3, #15
 80041a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	8bfb      	ldrh	r3, [r7, #30]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	8bfa      	ldrh	r2, [r7, #30]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	e062      	b.n	800428a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041ca:	e05e      	b.n	800428a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d828      	bhi.n	8004226 <UART_SetConfig+0x56a>
 80041d4:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x520>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004211 	.word	0x08004211
 80041e8:	08004227 	.word	0x08004227
 80041ec:	08004217 	.word	0x08004217
 80041f0:	08004227 	.word	0x08004227
 80041f4:	08004227 	.word	0x08004227
 80041f8:	08004227 	.word	0x08004227
 80041fc:	0800421f 	.word	0x0800421f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7fe ff08 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8004204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004206:	e014      	b.n	8004232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7fe ff1a 	bl	8003040 <HAL_RCC_GetPCLK2Freq>
 800420c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800420e:	e010      	b.n	8004232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <UART_SetConfig+0x5c0>)
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004214:	e00d      	b.n	8004232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004216:	f7fe fe65 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 800421a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800421c:	e009      	b.n	8004232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004224:	e005      	b.n	8004232 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004230:	bf00      	nop
    }

    if (pclk != 0U)
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d028      	beq.n	800428a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	4a10      	ldr	r2, [pc, #64]	; (8004280 <UART_SetConfig+0x5c4>)
 800423e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004242:	461a      	mov	r2, r3
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	fbb3 f2f2 	udiv	r2, r3, r2
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	441a      	add	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	2b0f      	cmp	r3, #15
 8004260:	d910      	bls.n	8004284 <UART_SetConfig+0x5c8>
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d20c      	bcs.n	8004284 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	b29a      	uxth	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60da      	str	r2, [r3, #12]
 8004274:	e009      	b.n	800428a <UART_SetConfig+0x5ce>
 8004276:	bf00      	nop
 8004278:	40008000 	.word	0x40008000
 800427c:	00f42400 	.word	0x00f42400
 8004280:	08004efc 	.word	0x08004efc
      }
      else
      {
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2201      	movs	r2, #1
 800428e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2201      	movs	r2, #1
 8004296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2200      	movs	r2, #0
 80042a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80042a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3730      	adds	r7, #48	; 0x30
 80042ae:	46bd      	mov	sp, r7
 80042b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01a      	beq.n	80043ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b2:	d10a      	bne.n	80043ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b098      	sub	sp, #96	; 0x60
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004408:	f7fc fd80 	bl	8000f0c <HAL_GetTick>
 800440c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b08      	cmp	r3, #8
 800441a:	d12f      	bne.n	800447c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800441c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	2200      	movs	r2, #0
 8004426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f88e 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d022      	beq.n	800447c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444a:	653b      	str	r3, [r7, #80]	; 0x50
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004454:	647b      	str	r3, [r7, #68]	; 0x44
 8004456:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800445a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e6      	bne.n	8004436 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e063      	b.n	8004544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d149      	bne.n	800451e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004492:	2200      	movs	r2, #0
 8004494:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f857 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d03c      	beq.n	800451e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	623b      	str	r3, [r7, #32]
   return(result);
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
 80044c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e6      	bne.n	80044a4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3308      	adds	r3, #8
 80044dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3308      	adds	r3, #8
 80044f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f6:	61fa      	str	r2, [r7, #28]
 80044f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	69b9      	ldr	r1, [r7, #24]
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	617b      	str	r3, [r7, #20]
   return(result);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e012      	b.n	8004544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3758      	adds	r7, #88	; 0x58
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455c:	e049      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d045      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fc fcd1 	bl	8000f0c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <UART_WaitOnFlagUntilTimeout+0x30>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e048      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d031      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d110      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2208      	movs	r2, #8
 80045a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f838 	bl	800461a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2208      	movs	r2, #8
 80045ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e029      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045cc:	d111      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f81e 	bl	800461a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e00f      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4013      	ands	r3, r2
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	429a      	cmp	r2, r3
 800460e:	d0a6      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800461a:	b480      	push	{r7}
 800461c:	b095      	sub	sp, #84	; 0x54
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004640:	643b      	str	r3, [r7, #64]	; 0x40
 8004642:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004646:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	61fb      	str	r3, [r7, #28]
   return(result);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004678:	62fa      	str	r2, [r7, #44]	; 0x2c
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800467e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e3      	bne.n	8004654 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d118      	bne.n	80046c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f023 0310 	bic.w	r3, r3, #16
 80046a8:	647b      	str	r3, [r7, #68]	; 0x44
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6979      	ldr	r1, [r7, #20]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	613b      	str	r3, [r7, #16]
   return(result);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e6      	bne.n	8004694 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80046da:	bf00      	nop
 80046dc:	3754      	adds	r7, #84	; 0x54
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_UARTEx_DisableFifoMode+0x16>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e027      	b.n	800474c <HAL_UARTEx_DisableFifoMode+0x66>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2224      	movs	r2, #36	; 0x24
 8004708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800472a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e02d      	b.n	80047cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	; 0x24
 800477c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f84f 	bl	8004850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e02d      	b.n	8004848 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f811 	bl	8004850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485c:	2b00      	cmp	r3, #0
 800485e:	d108      	bne.n	8004872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004870:	e031      	b.n	80048d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004872:	2308      	movs	r3, #8
 8004874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004876:	2308      	movs	r3, #8
 8004878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	0e5b      	lsrs	r3, r3, #25
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	0f5b      	lsrs	r3, r3, #29
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800489a:	7bbb      	ldrb	r3, [r7, #14]
 800489c:	7b3a      	ldrb	r2, [r7, #12]
 800489e:	4911      	ldr	r1, [pc, #68]	; (80048e4 <UARTEx_SetNbDataToProcess+0x94>)
 80048a0:	5c8a      	ldrb	r2, [r1, r2]
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048a6:	7b3a      	ldrb	r2, [r7, #12]
 80048a8:	490f      	ldr	r1, [pc, #60]	; (80048e8 <UARTEx_SetNbDataToProcess+0x98>)
 80048aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	7b7a      	ldrb	r2, [r7, #13]
 80048bc:	4909      	ldr	r1, [pc, #36]	; (80048e4 <UARTEx_SetNbDataToProcess+0x94>)
 80048be:	5c8a      	ldrb	r2, [r1, r2]
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048c4:	7b7a      	ldrb	r2, [r7, #13]
 80048c6:	4908      	ldr	r1, [pc, #32]	; (80048e8 <UARTEx_SetNbDataToProcess+0x98>)
 80048c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	08004f14 	.word	0x08004f14
 80048e8:	08004f1c 	.word	0x08004f1c

080048ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048ec:	b084      	sub	sp, #16
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	f107 001c 	add.w	r0, r7, #28
 80048fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa66 	bl	8004ddc <USB_CoreReset>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
 8004926:	e005      	b.n	8004934 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004940:	b004      	add	sp, #16
 8004942:	4770      	bx	lr

08004944 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 0201 	bic.w	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d115      	bne.n	80049b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004994:	2001      	movs	r0, #1
 8004996:	f7fc fac5 	bl	8000f24 <HAL_Delay>
      ms++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3301      	adds	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fa0d 	bl	8004dc0 <USB_GetMode>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d01e      	beq.n	80049ea <USB_SetCurrentMode+0x84>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b31      	cmp	r3, #49	; 0x31
 80049b0:	d9f0      	bls.n	8004994 <USB_SetCurrentMode+0x2e>
 80049b2:	e01a      	b.n	80049ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d115      	bne.n	80049e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049c6:	2001      	movs	r0, #1
 80049c8:	f7fc faac 	bl	8000f24 <HAL_Delay>
      ms++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9f4 	bl	8004dc0 <USB_GetMode>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <USB_SetCurrentMode+0x84>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b31      	cmp	r3, #49	; 0x31
 80049e2:	d9f0      	bls.n	80049c6 <USB_SetCurrentMode+0x60>
 80049e4:	e001      	b.n	80049ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e005      	b.n	80049f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b32      	cmp	r3, #50	; 0x32
 80049ee:	d101      	bne.n	80049f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	e009      	b.n	8004a34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3340      	adds	r3, #64	; 0x40
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3301      	adds	r3, #1
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b0e      	cmp	r3, #14
 8004a38:	d9f2      	bls.n	8004a20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11c      	bne.n	8004a7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4e:	f043 0302 	orr.w	r3, r3, #2
 8004a52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e005      	b.n	8004a86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a92:	2103      	movs	r1, #3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f959 	bl	8004d4c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a9a:	2110      	movs	r1, #16
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f8f1 	bl	8004c84 <USB_FlushTxFifo>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f91d 	bl	8004cec <USB_FlushRxFifo>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ada:	461a      	mov	r2, r3
 8004adc:	2300      	movs	r3, #0
 8004ade:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e043      	b.n	8004b6e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004afc:	d118      	bne.n	8004b30 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	461a      	mov	r2, r3
 8004b12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e013      	b.n	8004b42 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	461a      	mov	r2, r3
 8004b28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e008      	b.n	8004b42 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	461a      	mov	r2, r3
 8004b62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3b7      	bcc.n	8004ae6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	e043      	b.n	8004c04 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b92:	d118      	bne.n	8004bc6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e013      	b.n	8004bd8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e008      	b.n	8004bd8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be4:	461a      	mov	r2, r3
 8004be6:	2300      	movs	r3, #0
 8004be8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	3301      	adds	r3, #1
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3b7      	bcc.n	8004b7c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f043 0210 	orr.w	r2, r3, #16
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <USB_DevInit+0x280>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f043 0208 	orr.w	r2, r3, #8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c7a:	b004      	add	sp, #16
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	803c3800 	.word	0x803c3800

08004c84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <USB_FlushTxFifo+0x64>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e01b      	b.n	8004cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	daf2      	bge.n	8004c92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	019b      	lsls	r3, r3, #6
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <USB_FlushTxFifo+0x64>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e006      	b.n	8004cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d0f0      	beq.n	8004cbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	00030d40 	.word	0x00030d40

08004cec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <USB_FlushRxFifo+0x5c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e018      	b.n	8004d3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	daf2      	bge.n	8004cf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2210      	movs	r2, #16
 8004d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <USB_FlushRxFifo+0x5c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e006      	b.n	8004d3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d0f0      	beq.n	8004d1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	00030d40 	.word	0x00030d40

08004d4c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d98:	f023 0303 	bic.w	r3, r3, #3
 8004d9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <USB_CoreReset+0x64>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e01b      	b.n	8004e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	daf2      	bge.n	8004de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <USB_CoreReset+0x64>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d0f0      	beq.n	8004e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	00030d40 	.word	0x00030d40

08004e44 <memset>:
 8004e44:	4402      	add	r2, r0
 8004e46:	4603      	mov	r3, r0
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <memset+0xa>
 8004e4c:	4770      	bx	lr
 8004e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e52:	e7f9      	b.n	8004e48 <memset+0x4>

08004e54 <__libc_init_array>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4d0d      	ldr	r5, [pc, #52]	; (8004e8c <__libc_init_array+0x38>)
 8004e58:	4c0d      	ldr	r4, [pc, #52]	; (8004e90 <__libc_init_array+0x3c>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	42a6      	cmp	r6, r4
 8004e62:	d109      	bne.n	8004e78 <__libc_init_array+0x24>
 8004e64:	4d0b      	ldr	r5, [pc, #44]	; (8004e94 <__libc_init_array+0x40>)
 8004e66:	4c0c      	ldr	r4, [pc, #48]	; (8004e98 <__libc_init_array+0x44>)
 8004e68:	f000 f818 	bl	8004e9c <_init>
 8004e6c:	1b64      	subs	r4, r4, r5
 8004e6e:	10a4      	asrs	r4, r4, #2
 8004e70:	2600      	movs	r6, #0
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	d105      	bne.n	8004e82 <__libc_init_array+0x2e>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7c:	4798      	blx	r3
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7ee      	b.n	8004e60 <__libc_init_array+0xc>
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	3601      	adds	r6, #1
 8004e8a:	e7f2      	b.n	8004e72 <__libc_init_array+0x1e>
 8004e8c:	08004f2c 	.word	0x08004f2c
 8004e90:	08004f2c 	.word	0x08004f2c
 8004e94:	08004f2c 	.word	0x08004f2c
 8004e98:	08004f30 	.word	0x08004f30

08004e9c <_init>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr

08004ea8 <_fini>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr
