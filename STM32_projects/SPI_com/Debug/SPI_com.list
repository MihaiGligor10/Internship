
SPI_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004288  08004288  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004288  08004288  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004288  08004288  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000068  080042f8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080042f8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e693  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4c  00000000  00000000  0002e76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  000305c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b79  00000000  00000000  000314a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae21  00000000  00000000  00032019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010030  00000000  00000000  0005ce3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111b9f  00000000  00000000  0006ce6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ec4  00000000  00000000  0017ea0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001828d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000068 	.word	0x20000068
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004224 	.word	0x08004224

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000006c 	.word	0x2000006c
 80001f8:	08004224 	.word	0x08004224

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fcaa 	bl	8000b5a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f827 	bl	8000258 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f92b 	bl	8000464 <MX_GPIO_Init>
  MX_TIM3_Init();
 800020e:	f000 f8d9 	bl	80003c4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000212:	f000 f873 	bl	80002fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  const uint8_t  dataSize = 6 ;
 8000216:	2306      	movs	r3, #6
 8000218:	73fb      	strb	r3, [r7, #15]
  //instruction list for starting the displays
  uint16_t data1[6] = {TEST_DISPLAY_ENTER, TEST_DISPLAY_EXIT, DECODE_MODE, INTENSITY, SCAN_LIMIT, SHUTDOWN_1};
 800021a:	4a0d      	ldr	r2, [pc, #52]	; (8000250 <main+0x54>)
 800021c:	463b      	mov	r3, r7
 800021e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000220:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  //writing the startup instructions for each display
  SPI_writeData(data1, dataSize,1);
 8000224:	7bf9      	ldrb	r1, [r7, #15]
 8000226:	463b      	mov	r3, r7
 8000228:	2201      	movs	r2, #1
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fa5a 	bl	80006e4 <SPI_writeData>
  SPI_writeData(data1, dataSize,2);
 8000230:	7bf9      	ldrb	r1, [r7, #15]
 8000232:	463b      	mov	r3, r7
 8000234:	2202      	movs	r2, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fa54 	bl	80006e4 <SPI_writeData>
  HAL_TIM_Base_Start_IT(&htim3);
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <main+0x58>)
 800023e:	f003 fb97 	bl	8003970 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //display refresh
	  SPI_draw_numbers();
 8000242:	f000 fb21 	bl	8000888 <SPI_draw_numbers>
	  HAL_Delay(500);
 8000246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024a:	f000 fcfb 	bl	8000c44 <HAL_Delay>
	  SPI_draw_numbers();
 800024e:	e7f8      	b.n	8000242 <main+0x46>
 8000250:	0800423c 	.word	0x0800423c
 8000254:	200000ec 	.word	0x200000ec

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b096      	sub	sp, #88	; 0x58
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	2244      	movs	r2, #68	; 0x44
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 ffb0 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	463b      	mov	r3, r7
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800027a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800027e:	f001 fec3 	bl	8002008 <HAL_PWREx_ControlVoltageScaling>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000288:	f000 fb40 	bl	800090c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	2302      	movs	r3, #2
 800028e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000294:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2340      	movs	r3, #64	; 0x40
 8000298:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80002a6:	231e      	movs	r3, #30
 80002a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002b2:	2304      	movs	r3, #4
 80002b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 ff48 	bl	8002150 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002c6:	f000 fb21 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2303      	movs	r3, #3
 80002d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	463b      	mov	r3, r7
 80002e2:	2102      	movs	r1, #2
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 fb4d 	bl	8002984 <HAL_RCC_ClockConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002f0:	f000 fb0c 	bl	800090c <Error_Handler>
  }
}
 80002f4:	bf00      	nop
 80002f6:	3758      	adds	r7, #88	; 0x58
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	463b      	mov	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000312:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000314:	4a29      	ldr	r2, [pc, #164]	; (80003bc <MX_ADC1_Init+0xc0>)
 8000316:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000318:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <MX_ADC1_Init+0xbc>)
 800031a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800031e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000320:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000326:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032c:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <MX_ADC1_Init+0xbc>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000332:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000334:	2204      	movs	r2, #4
 8000336:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000338:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <MX_ADC1_Init+0xbc>)
 800033a:	2200      	movs	r2, #0
 800033c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800033e:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000340:	2200      	movs	r2, #0
 8000342:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000344:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000346:	2201      	movs	r2, #1
 8000348:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034a:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_ADC1_Init+0xbc>)
 800034c:	2200      	movs	r2, #0
 800034e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000352:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000354:	2200      	movs	r2, #0
 8000356:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_ADC1_Init+0xbc>)
 800035a:	2200      	movs	r2, #0
 800035c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800035e:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000360:	2200      	movs	r2, #0
 8000362:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000368:	2200      	movs	r2, #0
 800036a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_ADC1_Init+0xbc>)
 800036e:	2200      	movs	r2, #0
 8000370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000374:	4810      	ldr	r0, [pc, #64]	; (80003b8 <MX_ADC1_Init+0xbc>)
 8000376:	f000 fe29 	bl	8000fcc <HAL_ADC_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000380:	f000 fac4 	bl	800090c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_ADC1_Init+0xc4>)
 8000386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000388:	2306      	movs	r3, #6
 800038a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000390:	237f      	movs	r3, #127	; 0x7f
 8000392:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000394:	2304      	movs	r3, #4
 8000396:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039c:	463b      	mov	r3, r7
 800039e:	4619      	mov	r1, r3
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_ADC1_Init+0xbc>)
 80003a2:	f000 ff59 	bl	8001258 <HAL_ADC_ConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80003ac:	f000 faae 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000084 	.word	0x20000084
 80003bc:	50040000 	.word	0x50040000
 80003c0:	14f00020 	.word	0x14f00020

080003c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003da:	463b      	mov	r3, r7
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_TIM3_Init+0x98>)
 80003e6:	4a1e      	ldr	r2, [pc, #120]	; (8000460 <MX_TIM3_Init+0x9c>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM3_Init+0x98>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM3_Init+0x98>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_TIM3_Init+0x98>)
 80003f8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80003fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_TIM3_Init+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_TIM3_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_TIM3_Init+0x98>)
 800040c:	f003 fa58 	bl	80038c0 <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000416:	f000 fa79 	bl	800090c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800041a:	2304      	movs	r3, #4
 800041c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4619      	mov	r1, r3
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <MX_TIM3_Init+0x98>)
 800042a:	f003 fc13 	bl	8003c54 <HAL_TIM_SlaveConfigSynchro>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000434:	f000 fa6a 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000438:	2300      	movs	r3, #0
 800043a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000440:	463b      	mov	r3, r7
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_TIM3_Init+0x98>)
 8000446:	f003 fe1b 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000450:	f000 fa5c 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000ec 	.word	0x200000ec
 8000460:	40000400 	.word	0x40000400

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b32      	ldr	r3, [pc, #200]	; (8000544 <MX_GPIO_Init+0xe0>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a31      	ldr	r2, [pc, #196]	; (8000544 <MX_GPIO_Init+0xe0>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b2f      	ldr	r3, [pc, #188]	; (8000544 <MX_GPIO_Init+0xe0>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000492:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <MX_GPIO_Init+0xe0>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a2b      	ldr	r2, [pc, #172]	; (8000544 <MX_GPIO_Init+0xe0>)
 8000498:	f043 0320 	orr.w	r3, r3, #32
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b29      	ldr	r3, [pc, #164]	; (8000544 <MX_GPIO_Init+0xe0>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0320 	and.w	r3, r3, #32
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004aa:	4b26      	ldr	r3, [pc, #152]	; (8000544 <MX_GPIO_Init+0xe0>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a25      	ldr	r2, [pc, #148]	; (8000544 <MX_GPIO_Init+0xe0>)
 80004b0:	f043 0310 	orr.w	r3, r3, #16
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b23      	ldr	r3, [pc, #140]	; (8000544 <MX_GPIO_Init+0xe0>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0310 	and.w	r3, r3, #16
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80004c8:	481f      	ldr	r0, [pc, #124]	; (8000548 <MX_GPIO_Init+0xe4>)
 80004ca:	f001 fd65 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d4:	481c      	ldr	r0, [pc, #112]	; (8000548 <MX_GPIO_Init+0xe4>)
 80004d6:	f001 fd5f 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e0:	481a      	ldr	r0, [pc, #104]	; (800054c <MX_GPIO_Init+0xe8>)
 80004e2:	f001 fd59 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80004ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4619      	mov	r1, r3
 80004fe:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_GPIO_Init+0xe4>)
 8000500:	f001 fbb8 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <MX_GPIO_Init+0xe8>)
 800051e:	f001 fba9 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	4619      	mov	r1, r3
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_GPIO_Init+0xe8>)
 8000538:	f001 fb9c 	bl	8001c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000
 8000548:	48001400 	.word	0x48001400
 800054c:	48001000 	.word	0x48001000

08000550 <SPI_init_device1>:
 * SPI_init(uint8_t deviceNr) -- selects the right device according to the parameter
 * SPI_stop(uint8_t deviceNr) -- disables the right device according to the parameter
*/
//-------------------------------------------------------------------------------------------------
void SPI_init_device1()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <SPI_init_device1+0x20>)
 800055c:	f001 fd1c 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	4802      	ldr	r0, [pc, #8]	; (8000570 <SPI_init_device1+0x20>)
 8000568:	f001 fd16 	bl	8001f98 <HAL_GPIO_WritePin>
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	48001400 	.word	0x48001400

08000574 <SPI_stop_device1>:


void SPI_stop_device1()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057e:	4808      	ldr	r0, [pc, #32]	; (80005a0 <SPI_stop_device1+0x2c>)
 8000580:	f001 fd0a 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <SPI_stop_device1+0x30>)
 800058c:	f001 fd04 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	4802      	ldr	r0, [pc, #8]	; (80005a0 <SPI_stop_device1+0x2c>)
 8000598:	f001 fcfe 	bl	8001f98 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	48001000 	.word	0x48001000
 80005a4:	48001400 	.word	0x48001400

080005a8 <SPI_init_device2>:


void SPI_init_device2()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <SPI_init_device2+0x20>)
 80005b4:	f001 fcf0 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005be:	4802      	ldr	r0, [pc, #8]	; (80005c8 <SPI_init_device2+0x20>)
 80005c0:	f001 fcea 	bl	8001f98 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	48001400 	.word	0x48001400

080005cc <SPI_stop_device2>:


void SPI_stop_device2()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <SPI_stop_device2+0x2c>)
 80005d8:	f001 fcde 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <SPI_stop_device2+0x30>)
 80005e4:	f001 fcd8 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <SPI_stop_device2+0x2c>)
 80005f0:	f001 fcd2 	bl	8001f98 <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	48001000 	.word	0x48001000
 80005fc:	48001400 	.word	0x48001400

08000600 <SPI_init>:

void SPI_init(uint8_t deviceNr)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	if(deviceNr == 1)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <SPI_init+0x16>
	{
		SPI_init_device1();
 8000610:	f7ff ff9e 	bl	8000550 <SPI_init_device1>
	}
	else
	{
		SPI_init_device2();
	}
}
 8000614:	e001      	b.n	800061a <SPI_init+0x1a>
		SPI_init_device2();
 8000616:	f7ff ffc7 	bl	80005a8 <SPI_init_device2>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <SPI_stop>:


void SPI_stop(uint8_t deviceNr)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	4603      	mov	r3, r0
 800062a:	71fb      	strb	r3, [r7, #7]
	if(deviceNr == 1)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d102      	bne.n	8000638 <SPI_stop+0x16>
	{
		SPI_stop_device1();
 8000632:	f7ff ff9f 	bl	8000574 <SPI_stop_device1>
	}
	else
	{
		SPI_stop_device2();
	}
}
 8000636:	e001      	b.n	800063c <SPI_stop+0x1a>
		SPI_stop_device2();
 8000638:	f7ff ffc8 	bl	80005cc <SPI_stop_device2>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <SPI_writeBit>:
 * void SPI_writeData(uint16_t *data, uint8_t dataSize, uint8_t deviceNr)
 * 		-- loops through every word in the data array
*/
//-------------------------------------------------------------------------------------------------
void SPI_writeBit(uint16_t bit)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	480e      	ldr	r0, [pc, #56]	; (8000690 <SPI_writeBit+0x4c>)
 8000656:	f001 fc9f 	bl	8001f98 <HAL_GPIO_WritePin>
		if(bit == 0)
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d106      	bne.n	800066e <SPI_writeBit+0x2a>
		{
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <SPI_writeBit+0x50>)
 8000668:	f001 fc96 	bl	8001f98 <HAL_GPIO_WritePin>
 800066c:	e005      	b.n	800067a <SPI_writeBit+0x36>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <SPI_writeBit+0x50>)
 8000676:	f001 fc8f 	bl	8001f98 <HAL_GPIO_WritePin>
		}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <SPI_writeBit+0x4c>)
 8000682:	f001 fc89 	bl	8001f98 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	48001000 	.word	0x48001000
 8000694:	48001400 	.word	0x48001400

08000698 <SPI_writeWord>:


void SPI_writeWord(uint16_t word,uint8_t deviceNr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	80fb      	strh	r3, [r7, #6]
 80006a4:	4613      	mov	r3, r2
 80006a6:	717b      	strb	r3, [r7, #5]
	SPI_init(deviceNr);
 80006a8:	797b      	ldrb	r3, [r7, #5]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffa8 	bl	8000600 <SPI_init>
	for(uint8_t i=0; i<16 ; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
 80006b4:	e00b      	b.n	80006ce <SPI_writeWord+0x36>
	{
		SPI_writeBit((word & (1<<15)) >> 15);
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	0bdb      	lsrs	r3, r3, #15
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffc1 	bl	8000644 <SPI_writeBit>
		word <<= 1;
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i<16 ; i++)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	3301      	adds	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	d9f0      	bls.n	80006b6 <SPI_writeWord+0x1e>
	}
	SPI_stop(deviceNr);
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffa3 	bl	8000622 <SPI_stop>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SPI_writeData>:

void SPI_writeData(uint16_t *data, uint8_t dataSize, uint8_t deviceNr)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
 80006f0:	4613      	mov	r3, r2
 80006f2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i=0; i<dataSize ; i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e00f      	b.n	800071a <SPI_writeData+0x36>
	{
		SPI_writeWord(data[i], deviceNr);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	78ba      	ldrb	r2, [r7, #2]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffc5 	bl	8000698 <SPI_writeWord>
		HAL_Delay(1);
 800070e:	2001      	movs	r0, #1
 8000710:	f000 fa98 	bl	8000c44 <HAL_Delay>
	for(uint8_t i=0; i<dataSize ; i++)
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3301      	adds	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	429a      	cmp	r2, r3
 8000720:	d3eb      	bcc.n	80006fa <SPI_writeData+0x16>
	}
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <SPI_draw>:
 * char (*numberSelect(int nr))
 * 		-- returns the array corresponding to the given number
*/
//-------------------------------------------------------------------------------------------------
void SPI_draw(char img[8], uint8_t deviceNr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	uint16_t displayWord = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	817b      	strh	r3, [r7, #10]

	for (int i=1;i<9;i++)
 800073c:	2301      	movs	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e016      	b.n	8000770 <SPI_draw+0x44>
	{
		displayWord = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	817b      	strh	r3, [r7, #10]
		displayWord = (i<<8) | img[i-1];
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3b01      	subs	r3, #1
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	440b      	add	r3, r1
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b21b      	sxth	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b21b      	sxth	r3, r3
 800075c:	817b      	strh	r3, [r7, #10]
		SPI_writeWord(displayWord,deviceNr);
 800075e:	78fa      	ldrb	r2, [r7, #3]
 8000760:	897b      	ldrh	r3, [r7, #10]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff97 	bl	8000698 <SPI_writeWord>
	for (int i=1;i<9;i++)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b08      	cmp	r3, #8
 8000774:	dde5      	ble.n	8000742 <SPI_draw+0x16>
	}
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <numberSelect>:


char (*numberSelect(int nr))
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	switch (nr)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b09      	cmp	r3, #9
 800078c:	d82a      	bhi.n	80007e4 <numberSelect+0x64>
 800078e:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <numberSelect+0x14>)
 8000790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000794:	080007bd 	.word	0x080007bd
 8000798:	080007c1 	.word	0x080007c1
 800079c:	080007c5 	.word	0x080007c5
 80007a0:	080007c9 	.word	0x080007c9
 80007a4:	080007cd 	.word	0x080007cd
 80007a8:	080007d1 	.word	0x080007d1
 80007ac:	080007d5 	.word	0x080007d5
 80007b0:	080007d9 	.word	0x080007d9
 80007b4:	080007dd 	.word	0x080007dd
 80007b8:	080007e1 	.word	0x080007e1
	  {
	  case 0:
	  return zero;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <numberSelect+0x74>)
 80007be:	e012      	b.n	80007e6 <numberSelect+0x66>
	  case 1:
	  return one;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <numberSelect+0x78>)
 80007c2:	e010      	b.n	80007e6 <numberSelect+0x66>
	  case 2:
	  return two;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <numberSelect+0x7c>)
 80007c6:	e00e      	b.n	80007e6 <numberSelect+0x66>
	  case 3:
	  return three;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <numberSelect+0x80>)
 80007ca:	e00c      	b.n	80007e6 <numberSelect+0x66>
	  case 4:
	  return four;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <numberSelect+0x84>)
 80007ce:	e00a      	b.n	80007e6 <numberSelect+0x66>
	  case 5:
	  return five;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <numberSelect+0x88>)
 80007d2:	e008      	b.n	80007e6 <numberSelect+0x66>
	  case 6:
	  return six;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <numberSelect+0x8c>)
 80007d6:	e006      	b.n	80007e6 <numberSelect+0x66>
	  case 7:
	  return seven;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <numberSelect+0x90>)
 80007da:	e004      	b.n	80007e6 <numberSelect+0x66>
	  case 8:
	  return eight;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <numberSelect+0x94>)
 80007de:	e002      	b.n	80007e6 <numberSelect+0x66>
	  case 9:
	  return nine;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <numberSelect+0x98>)
 80007e2:	e000      	b.n	80007e6 <numberSelect+0x66>

	  default:
	  return Skull;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <numberSelect+0x9c>)
	  }
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000004 	.word	0x20000004
 80007f8:	2000000c 	.word	0x2000000c
 80007fc:	20000014 	.word	0x20000014
 8000800:	2000001c 	.word	0x2000001c
 8000804:	20000024 	.word	0x20000024
 8000808:	2000002c 	.word	0x2000002c
 800080c:	20000034 	.word	0x20000034
 8000810:	2000003c 	.word	0x2000003c
 8000814:	20000044 	.word	0x20000044
 8000818:	2000004c 	.word	0x2000004c
 800081c:	20000054 	.word	0x20000054

08000820 <HAL_TIM_PeriodElapsedCallback>:
 * 		-- this functions represents the timer interrupt, once every 0,001 seconds
 * 		   if the timer counter variable reaches one second it updates the variable
 * 		   that holds the seconds, and resets the seconds when they reach 0
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d11d      	bne.n	800086c <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		counter++;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000838:	6013      	str	r3, [r2, #0]
		if(counter % 1000 ==0)
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000840:	fba3 1302 	umull	r1, r3, r3, r2
 8000844:	099b      	lsrs	r3, r3, #6
 8000846:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800084a:	fb01 f303 	mul.w	r3, r1, r3
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10b      	bne.n	800086c <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			seconds--;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3b01      	subs	r3, #1
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800085c:	6013      	str	r3, [r2, #0]
			if(seconds < 0)
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	da02      	bge.n	800086c <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				seconds = 59;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000868:	223b      	movs	r2, #59	; 0x3b
 800086a:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	200000ec 	.word	0x200000ec
 800087c:	20000138 	.word	0x20000138
 8000880:	10624dd3 	.word	0x10624dd3
 8000884:	20000000 	.word	0x20000000

08000888 <SPI_draw_numbers>:
int auxBtnValue=0;
int comp ;


void SPI_draw_numbers()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

	if(seconds>9)
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <SPI_draw_numbers+0x78>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b09      	cmp	r3, #9
 8000892:	dd25      	ble.n	80008e0 <SPI_draw_numbers+0x58>
		{
			SPI_draw(numberSelect(seconds%10),1);
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <SPI_draw_numbers+0x78>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <SPI_draw_numbers+0x7c>)
 800089a:	fb83 1302 	smull	r1, r3, r3, r2
 800089e:	1099      	asrs	r1, r3, #2
 80008a0:	17d3      	asrs	r3, r2, #31
 80008a2:	1ac9      	subs	r1, r1, r3
 80008a4:	460b      	mov	r3, r1
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	440b      	add	r3, r1
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	1ad1      	subs	r1, r2, r3
 80008ae:	4608      	mov	r0, r1
 80008b0:	f7ff ff66 	bl	8000780 <numberSelect>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2101      	movs	r1, #1
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff37 	bl	800072c <SPI_draw>
			SPI_draw(numberSelect(seconds/10),2);
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <SPI_draw_numbers+0x78>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <SPI_draw_numbers+0x7c>)
 80008c4:	fb82 1203 	smull	r1, r2, r2, r3
 80008c8:	1092      	asrs	r2, r2, #2
 80008ca:	17db      	asrs	r3, r3, #31
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff56 	bl	8000780 <numberSelect>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2102      	movs	r1, #2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff27 	bl	800072c <SPI_draw>
		{
			SPI_draw(numberSelect(seconds),1);
			SPI_draw(zero,2);
		}

}
 80008de:	e00d      	b.n	80008fc <SPI_draw_numbers+0x74>
			SPI_draw(numberSelect(seconds),1);
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <SPI_draw_numbers+0x78>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff4b 	bl	8000780 <numberSelect>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2101      	movs	r1, #1
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff1c 	bl	800072c <SPI_draw>
			SPI_draw(zero,2);
 80008f4:	2102      	movs	r1, #2
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <SPI_draw_numbers+0x80>)
 80008f8:	f7ff ff18 	bl	800072c <SPI_draw>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	66666667 	.word	0x66666667
 8000908:	20000004 	.word	0x20000004

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	; 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0ae      	sub	sp, #184	; 0xb8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2294      	movs	r2, #148	; 0x94
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fc23 	bl	80041cc <memset>
  if(hadc->Instance==ADC1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a27      	ldr	r2, [pc, #156]	; (8000a28 <HAL_ADC_MspInit+0xc8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d147      	bne.n	8000a20 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000994:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000996:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800099a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800099e:	2302      	movs	r3, #2
 80009a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80009a6:	230c      	movs	r3, #12
 80009a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fa65 	bl	8002e90 <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009cc:	f7ff ff9e 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_ADC_MspInit+0xcc>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <HAL_ADC_MspInit+0xcc>)
 80009d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_ADC_MspInit+0xcc>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_ADC_MspInit+0xcc>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_ADC_MspInit+0xcc>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_ADC_MspInit+0xcc>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a06:	230b      	movs	r3, #11
 8000a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f001 f92a 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	37b8      	adds	r7, #184	; 0xb8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	50040000 	.word	0x50040000
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d113      	bne.n	8000a6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_TIM_Base_MspInit+0x48>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <HAL_TIM_Base_MspInit+0x48>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_TIM_Base_MspInit+0x48>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	201d      	movs	r0, #29
 8000a60:	f001 f8d1 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a64:	201d      	movs	r0, #29
 8000a66:	f001 f8ea 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40000400 	.word	0x40000400
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f89c 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TIM3_IRQHandler+0x10>)
 8000ad6:	f002 ffbb 	bl	8003a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000ec 	.word	0x200000ec

08000ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff ffea 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f003 fb51 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fb5f 	bl	80001fc <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b4c:	08004290 	.word	0x08004290
  ldr r2, =_sbss
 8000b50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b54:	20000140 	.word	0x20000140

08000b58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_IRQHandler>

08000b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f001 f843 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f80e 	bl	8000b8c <HAL_InitTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	e001      	b.n	8000b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b7c:	f7ff fecc 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_InitTick+0x6c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d023      	beq.n	8000be8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_InitTick+0x70>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f84f 	bl	8001c5a <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10f      	bne.n	8000be2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d809      	bhi.n	8000bdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f001 f819 	bl	8001c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0x74>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e007      	b.n	8000bec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e004      	b.n	8000bec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e001      	b.n	8000bec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000064 	.word	0x20000064
 8000bfc:	2000005c 	.word	0x2000005c
 8000c00:	20000060 	.word	0x20000060

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000064 	.word	0x20000064
 8000c28:	2000013c 	.word	0x2000013c

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	2000013c 	.word	0x2000013c

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffde 	bl	8000c2c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000064 	.word	0x20000064

08000c8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	609a      	str	r2, [r3, #8]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3360      	adds	r3, #96	; 0x60
 8000d06:	461a      	mov	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <LL_ADC_SetOffset+0x44>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	4313      	orrs	r3, r2
 8000d24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d2c:	bf00      	nop
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	03fff000 	.word	0x03fff000

08000d3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3360      	adds	r3, #96	; 0x60
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3360      	adds	r3, #96	; 0x60
 8000d78:	461a      	mov	r2, r3
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	615a      	str	r2, [r3, #20]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3330      	adds	r3, #48	; 0x30
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	4413      	add	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	211f      	movs	r1, #31
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	0e9b      	lsrs	r3, r3, #26
 8000dfc:	f003 011f 	and.w	r1, r3, #31
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e10:	bf00      	nop
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3314      	adds	r3, #20
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	0e5b      	lsrs	r3, r3, #25
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	4413      	add	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	0d1b      	lsrs	r3, r3, #20
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	2107      	movs	r1, #7
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	0d1b      	lsrs	r3, r3, #20
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e66:	bf00      	nop
 8000e68:	371c      	adds	r7, #28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	401a      	ands	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0318 	and.w	r3, r3, #24
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e98:	40d9      	lsrs	r1, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	0007ffff 	.word	0x0007ffff

08000ebc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ecc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6093      	str	r3, [r2, #8]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ef4:	d101      	bne.n	8000efa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f44:	d101      	bne.n	8000f4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d101      	bne.n	8000f70 <LL_ADC_IsEnabled+0x18>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <LL_ADC_IsEnabled+0x1a>
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d101      	bne.n	8000f96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d101      	bne.n	8000fbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e129      	b.n	800123a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d109      	bne.n	8001008 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fcb3 	bl	8000960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff67 	bl	8000ee0 <LL_ADC_IsDeepPowerDownEnabled>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff4d 	bl	8000ebc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff82 	bl	8000f30 <LL_ADC_IsInternalRegulatorEnabled>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d115      	bne.n	800105e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff66 	bl	8000f08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800103c:	4b81      	ldr	r3, [pc, #516]	; (8001244 <HAL_ADC_Init+0x278>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	099b      	lsrs	r3, r3, #6
 8001042:	4a81      	ldr	r2, [pc, #516]	; (8001248 <HAL_ADC_Init+0x27c>)
 8001044:	fba2 2303 	umull	r2, r3, r2, r3
 8001048:	099b      	lsrs	r3, r3, #6
 800104a:	3301      	adds	r3, #1
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001050:	e002      	b.n	8001058 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3b01      	subs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f9      	bne.n	8001052 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff64 	bl	8000f30 <LL_ADC_IsInternalRegulatorEnabled>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10d      	bne.n	800108a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	f043 0210 	orr.w	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff75 	bl	8000f7e <LL_ADC_REG_IsConversionOngoing>
 8001094:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 80c2 	bne.w	8001228 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 80be 	bne.w	8001228 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010b4:	f043 0202 	orr.w	r2, r3, #2
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff49 	bl	8000f58 <LL_ADC_IsEnabled>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10b      	bne.n	80010e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010cc:	485f      	ldr	r0, [pc, #380]	; (800124c <HAL_ADC_Init+0x280>)
 80010ce:	f7ff ff43 	bl	8000f58 <LL_ADC_IsEnabled>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4619      	mov	r1, r3
 80010de:	485c      	ldr	r0, [pc, #368]	; (8001250 <HAL_ADC_Init+0x284>)
 80010e0:	f7ff fdd4 	bl	8000c8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e5b      	ldrb	r3, [r3, #25]
 80010e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80010f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80010fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001102:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d106      	bne.n	8001120 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	3b01      	subs	r3, #1
 8001118:	045b      	lsls	r3, r3, #17
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	4b44      	ldr	r3, [pc, #272]	; (8001254 <HAL_ADC_Init+0x288>)
 8001144:	4013      	ands	r3, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	430b      	orrs	r3, r1
 800114e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff25 	bl	8000fa4 <LL_ADC_INJ_IsConversionOngoing>
 800115a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d140      	bne.n	80011e4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d13d      	bne.n	80011e4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e1b      	ldrb	r3, [r3, #24]
 8001170:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001172:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800117a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800118a:	f023 0306 	bic.w	r3, r3, #6
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	430b      	orrs	r3, r1
 8001196:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d118      	bne.n	80011d4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011b8:	4311      	orrs	r1, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011be:	4311      	orrs	r1, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011c4:	430a      	orrs	r2, r1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0201 	orr.w	r2, r2, #1
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	e007      	b.n	80011e4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d10c      	bne.n	8001206 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f023 010f 	bic.w	r1, r3, #15
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	1e5a      	subs	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
 8001204:	e007      	b.n	8001216 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 020f 	bic.w	r2, r2, #15
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	f023 0303 	bic.w	r3, r3, #3
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	659a      	str	r2, [r3, #88]	; 0x58
 8001226:	e007      	b.n	8001238 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	f043 0210 	orr.w	r2, r3, #16
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001238:	7ffb      	ldrb	r3, [r7, #31]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000005c 	.word	0x2000005c
 8001248:	053e2d63 	.word	0x053e2d63
 800124c:	50040000 	.word	0x50040000
 8001250:	50040300 	.word	0x50040300
 8001254:	fff0c007 	.word	0xfff0c007

08001258 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0b6      	sub	sp, #216	; 0xd8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADC_ConfigChannel+0x22>
 8001276:	2302      	movs	r3, #2
 8001278:	e3d5      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x7ce>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fe79 	bl	8000f7e <LL_ADC_REG_IsConversionOngoing>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 83ba 	bne.w	8001a08 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d824      	bhi.n	80012ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	3b02      	subs	r3, #2
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d81b      	bhi.n	80012e6 <HAL_ADC_ConfigChannel+0x8e>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <HAL_ADC_ConfigChannel+0x5c>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012cd 	.word	0x080012cd
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012dd 	.word	0x080012dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80012c4:	230c      	movs	r3, #12
 80012c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012ca:	e010      	b.n	80012ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80012cc:	2312      	movs	r3, #18
 80012ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012d2:	e00c      	b.n	80012ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80012d4:	2318      	movs	r3, #24
 80012d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012da:	e008      	b.n	80012ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80012dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012e4:	e003      	b.n	80012ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80012e6:	2306      	movs	r3, #6
 80012e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80012fc:	f7ff fd62 	bl	8000dc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe3a 	bl	8000f7e <LL_ADC_REG_IsConversionOngoing>
 800130a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe46 	bl	8000fa4 <LL_ADC_INJ_IsConversionOngoing>
 8001318:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800131c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 81bf 	bne.w	80016a4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 81ba 	bne.w	80016a4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001338:	d10f      	bne.n	800135a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fd69 	bl	8000e1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd23 	bl	8000d9e <LL_ADC_SetSamplingTimeCommonConfig>
 8001358:	e00e      	b.n	8001378 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6819      	ldr	r1, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	461a      	mov	r2, r3
 8001368:	f7ff fd58 	bl	8000e1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fd13 	bl	8000d9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	08db      	lsrs	r3, r3, #3
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b04      	cmp	r3, #4
 8001398:	d00a      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6919      	ldr	r1, [r3, #16]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013aa:	f7ff fca3 	bl	8000cf4 <LL_ADC_SetOffset>
 80013ae:	e179      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fcc0 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10a      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x184>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fcb5 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	0e9b      	lsrs	r3, r3, #26
 80013d6:	f003 021f 	and.w	r2, r3, #31
 80013da:	e01e      	b.n	800141a <HAL_ADC_ConfigChannel+0x1c2>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fcaa 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001402:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800140a:	2320      	movs	r3, #32
 800140c:	e004      	b.n	8001418 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800140e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x1da>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0e9b      	lsrs	r3, r3, #26
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	e018      	b.n	8001464 <HAL_ADC_ConfigChannel+0x20c>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800144a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800144e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001456:	2320      	movs	r3, #32
 8001458:	e004      	b.n	8001464 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800145a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001464:	429a      	cmp	r2, r3
 8001466:	d106      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fc79 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fc5d 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10a      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x24a>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc52 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	0e9b      	lsrs	r3, r3, #26
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	e01e      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x288>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fc47 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80014c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80014c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80014d0:	2320      	movs	r3, #32
 80014d2:	e004      	b.n	80014de <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80014d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x2a0>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0e9b      	lsrs	r3, r3, #26
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	e018      	b.n	800152a <HAL_ADC_ConfigChannel+0x2d2>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800150c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800151c:	2320      	movs	r3, #32
 800151e:	e004      	b.n	800152a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800152a:	429a      	cmp	r2, r3
 800152c:	d106      	bne.n	800153c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	2101      	movs	r1, #1
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fc16 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fbfa 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x310>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2102      	movs	r1, #2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fbef 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	0e9b      	lsrs	r3, r3, #26
 8001562:	f003 021f 	and.w	r2, r3, #31
 8001566:	e01e      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x34e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2102      	movs	r1, #2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fbe4 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800158e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001596:	2320      	movs	r3, #32
 8001598:	e004      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800159a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800159e:	fab3 f383 	clz	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <HAL_ADC_ConfigChannel+0x366>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0e9b      	lsrs	r3, r3, #26
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	e014      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x390>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80015cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80015d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80015da:	2320      	movs	r3, #32
 80015dc:	e004      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80015de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d106      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	2102      	movs	r1, #2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fbb7 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2103      	movs	r1, #3
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fb9b 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10a      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x3ce>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2103      	movs	r1, #3
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb90 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	0e9b      	lsrs	r3, r3, #26
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	e017      	b.n	8001656 <HAL_ADC_ConfigChannel+0x3fe>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2103      	movs	r1, #3
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fb85 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800163e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001640:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001648:	2320      	movs	r3, #32
 800164a:	e003      	b.n	8001654 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800164c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <HAL_ADC_ConfigChannel+0x416>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	0e9b      	lsrs	r3, r3, #26
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	e011      	b.n	8001692 <HAL_ADC_ConfigChannel+0x43a>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800167c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800167e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001686:	2320      	movs	r3, #32
 8001688:	e003      	b.n	8001692 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800168a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001692:	429a      	cmp	r2, r3
 8001694:	d106      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	2103      	movs	r1, #3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb62 	bl	8000d68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fc55 	bl	8000f58 <LL_ADC_IsEnabled>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 813f 	bne.w	8001934 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	461a      	mov	r2, r3
 80016c4:	f7ff fbd6 	bl	8000e74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a8e      	ldr	r2, [pc, #568]	; (8001908 <HAL_ADC_ConfigChannel+0x6b0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	f040 8130 	bne.w	8001934 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10b      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x4a4>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0e9b      	lsrs	r3, r3, #26
 80016ea:	3301      	adds	r3, #1
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	bf94      	ite	ls
 80016f4:	2301      	movls	r3, #1
 80016f6:	2300      	movhi	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e019      	b.n	8001730 <HAL_ADC_ConfigChannel+0x4d8>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800170a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800170e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	e003      	b.n	8001720 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	3301      	adds	r3, #1
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2b09      	cmp	r3, #9
 8001728:	bf94      	ite	ls
 800172a:	2301      	movls	r3, #1
 800172c:	2300      	movhi	r3, #0
 800172e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001730:	2b00      	cmp	r3, #0
 8001732:	d079      	beq.n	8001828 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x4f8>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0e9b      	lsrs	r3, r3, #26
 8001746:	3301      	adds	r3, #1
 8001748:	069b      	lsls	r3, r3, #26
 800174a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800174e:	e015      	b.n	800177c <HAL_ADC_ConfigChannel+0x524>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800175e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001760:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001768:	2320      	movs	r3, #32
 800176a:	e003      	b.n	8001774 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800176c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3301      	adds	r3, #1
 8001776:	069b      	lsls	r3, r3, #26
 8001778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_ConfigChannel+0x544>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0e9b      	lsrs	r3, r3, #26
 800178e:	3301      	adds	r3, #1
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	e017      	b.n	80017cc <HAL_ADC_ConfigChannel+0x574>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80017aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80017ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80017b4:	2320      	movs	r3, #32
 80017b6:	e003      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80017b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	ea42 0103 	orr.w	r1, r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10a      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x59a>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0e9b      	lsrs	r3, r3, #26
 80017e2:	3301      	adds	r3, #1
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	051b      	lsls	r3, r3, #20
 80017f0:	e018      	b.n	8001824 <HAL_ADC_ConfigChannel+0x5cc>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fa:	fa93 f3a3 	rbit	r3, r3
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800180a:	2320      	movs	r3, #32
 800180c:	e003      	b.n	8001816 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3301      	adds	r3, #1
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001824:	430b      	orrs	r3, r1
 8001826:	e080      	b.n	800192a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x5ec>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0e9b      	lsrs	r3, r3, #26
 800183a:	3301      	adds	r3, #1
 800183c:	069b      	lsls	r3, r3, #26
 800183e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001842:	e015      	b.n	8001870 <HAL_ADC_ConfigChannel+0x618>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800185c:	2320      	movs	r3, #32
 800185e:	e003      	b.n	8001868 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	3301      	adds	r3, #1
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x638>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0e9b      	lsrs	r3, r3, #26
 8001882:	3301      	adds	r3, #1
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	e017      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x668>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	61bb      	str	r3, [r7, #24]
  return result;
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80018a8:	2320      	movs	r3, #32
 80018aa:	e003      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3301      	adds	r3, #1
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	2101      	movs	r1, #1
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	ea42 0103 	orr.w	r1, r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10d      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x694>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0e9b      	lsrs	r3, r3, #26
 80018d6:	3301      	adds	r3, #1
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	3b1e      	subs	r3, #30
 80018e4:	051b      	lsls	r3, r3, #20
 80018e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ea:	e01d      	b.n	8001928 <HAL_ADC_ConfigChannel+0x6d0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	60fb      	str	r3, [r7, #12]
  return result;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001904:	2320      	movs	r3, #32
 8001906:	e005      	b.n	8001914 <HAL_ADC_ConfigChannel+0x6bc>
 8001908:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	f003 021f 	and.w	r2, r3, #31
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	3b1e      	subs	r3, #30
 8001922:	051b      	lsls	r3, r3, #20
 8001924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001928:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff fa74 	bl	8000e1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_ADC_ConfigChannel+0x7d8>)
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d06c      	beq.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001940:	483c      	ldr	r0, [pc, #240]	; (8001a34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001942:	f7ff f9c9 	bl	8000cd8 <LL_ADC_GetCommonPathInternalCh>
 8001946:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <HAL_ADC_ConfigChannel+0x7e0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d127      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d121      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <HAL_ADC_ConfigChannel+0x7e4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d157      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800196a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800196e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001972:	4619      	mov	r1, r3
 8001974:	482f      	ldr	r0, [pc, #188]	; (8001a34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001976:	f7ff f99c 	bl	8000cb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_ADC_ConfigChannel+0x7e8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	4a30      	ldr	r2, [pc, #192]	; (8001a44 <HAL_ADC_ConfigChannel+0x7ec>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001994:	e002      	b.n	800199c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3b01      	subs	r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019a2:	e03a      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_ADC_ConfigChannel+0x7f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d113      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_ADC_ConfigChannel+0x7e4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d12a      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019cc:	4619      	mov	r1, r3
 80019ce:	4819      	ldr	r0, [pc, #100]	; (8001a34 <HAL_ADC_ConfigChannel+0x7dc>)
 80019d0:	f7ff f96f 	bl	8000cb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019d4:	e021      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <HAL_ADC_ConfigChannel+0x7f4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d11c      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d116      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <HAL_ADC_ConfigChannel+0x7e4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d111      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a02:	f7ff f956 	bl	8000cb2 <LL_ADC_SetCommonPathInternalCh>
 8001a06:	e008      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f043 0220 	orr.w	r2, r3, #32
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001a22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	37d8      	adds	r7, #216	; 0xd8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	80080000 	.word	0x80080000
 8001a34:	50040300 	.word	0x50040300
 8001a38:	c7520000 	.word	0xc7520000
 8001a3c:	50040000 	.word	0x50040000
 8001a40:	2000005c 	.word	0x2000005c
 8001a44:	053e2d63 	.word	0x053e2d63
 8001a48:	cb840000 	.word	0xcb840000
 8001a4c:	80000001 	.word	0x80000001

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e166      	b.n	8001f52 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8158 	beq.w	8001f4c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d005      	beq.n	8001cb4 <HAL_GPIO_Init+0x40>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d130      	bne.n	8001d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cea:	2201      	movs	r2, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	f003 0201 	and.w	r2, r3, #1
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d017      	beq.n	8001d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d123      	bne.n	8001da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	6939      	ldr	r1, [r7, #16]
 8001da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0203 	and.w	r2, r3, #3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80b2 	beq.w	8001f4c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_GPIO_Init+0x2fc>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	4a60      	ldr	r2, [pc, #384]	; (8001f70 <HAL_GPIO_Init+0x2fc>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6613      	str	r3, [r2, #96]	; 0x60
 8001df4:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <HAL_GPIO_Init+0x2fc>)
 8001df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e2a:	d02b      	beq.n	8001e84 <HAL_GPIO_Init+0x210>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_GPIO_Init+0x304>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d025      	beq.n	8001e80 <HAL_GPIO_Init+0x20c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <HAL_GPIO_Init+0x308>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d01f      	beq.n	8001e7c <HAL_GPIO_Init+0x208>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a50      	ldr	r2, [pc, #320]	; (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d019      	beq.n	8001e78 <HAL_GPIO_Init+0x204>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <HAL_GPIO_Init+0x310>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x200>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_GPIO_Init+0x314>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1fc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <HAL_GPIO_Init+0x318>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1f8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x31c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1f4>
 8001e64:	2307      	movs	r3, #7
 8001e66:	e00e      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e68:	2308      	movs	r3, #8
 8001e6a:	e00c      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	e00a      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e70:	2305      	movs	r3, #5
 8001e72:	e008      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e006      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e004      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e84:	2300      	movs	r3, #0
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	f002 0203 	and.w	r2, r2, #3
 8001e8c:	0092      	lsls	r2, r2, #2
 8001e8e:	4093      	lsls	r3, r2
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e96:	4937      	ldr	r1, [pc, #220]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec8:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ece:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef2:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f ae91 	bne.w	8001c84 <HAL_GPIO_Init+0x10>
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	48000800 	.word	0x48000800
 8001f80:	48000c00 	.word	0x48000c00
 8001f84:	48001000 	.word	0x48001000
 8001f88:	48001400 	.word	0x48001400
 8001f8c:	48001800 	.word	0x48001800
 8001f90:	48001c00 	.word	0x48001c00
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd8:	d102      	bne.n	8001fe0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fde:	e00b      	b.n	8001ff8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fee:	d102      	bne.n	8001ff6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	e000      	b.n	8001ff8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ff6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40007000 	.word	0x40007000

08002008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d141      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002016:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002022:	d131      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800202a:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002034:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800203c:	4a41      	ldr	r2, [pc, #260]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2232      	movs	r2, #50	; 0x32
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	3301      	adds	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205a:	e002      	b.n	8002062 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002062:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206e:	d102      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f2      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002076:	4b33      	ldr	r3, [pc, #204]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002082:	d158      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e057      	b.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002088:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800208e:	4a2d      	ldr	r2, [pc, #180]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002098:	e04d      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a0:	d141      	bne.n	8002126 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d131      	bne.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020c8:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2232      	movs	r2, #50	; 0x32
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	0c9b      	lsrs	r3, r3, #18
 80020e2:	3301      	adds	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e6:	e002      	b.n	80020ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fa:	d102      	bne.n	8002102 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f2      	bne.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210e:	d112      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e011      	b.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002124:	e007      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002134:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40007000 	.word	0x40007000
 8002148:	2000005c 	.word	0x2000005c
 800214c:	431bde83 	.word	0x431bde83

08002150 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f000 bc08 	b.w	8002974 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002164:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216e:	4b94      	ldr	r3, [pc, #592]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80e4 	beq.w	800234e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_RCC_OscConfig+0x4c>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	f040 808b 	bne.w	80022aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b01      	cmp	r3, #1
 8002198:	f040 8087 	bne.w	80022aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800219c:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_OscConfig+0x64>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e3df      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_RCC_OscConfig+0x7e>
 80021c4:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021cc:	e005      	b.n	80021da <HAL_RCC_OscConfig+0x8a>
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021da:	4293      	cmp	r3, r2
 80021dc:	d223      	bcs.n	8002226 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fd94 	bl	8002d10 <RCC_SetFlashLatencyFromMSIRange>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e3c0      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f2:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a72      	ldr	r2, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	496d      	ldr	r1, [pc, #436]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	4968      	ldr	r1, [pc, #416]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
 8002224:	e025      	b.n	8002272 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4960      	ldr	r1, [pc, #384]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002244:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	495b      	ldr	r1, [pc, #364]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fd54 	bl	8002d10 <RCC_SetFlashLatencyFromMSIRange>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e380      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002272:	f000 fcc1 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002276:	4602      	mov	r2, r0
 8002278:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4950      	ldr	r1, [pc, #320]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002284:	5ccb      	ldrb	r3, [r1, r3]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a4e      	ldr	r2, [pc, #312]	; (80023c8 <HAL_RCC_OscConfig+0x278>)
 8002290:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002292:	4b4e      	ldr	r3, [pc, #312]	; (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fc78 	bl	8000b8c <HAL_InitTick>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d052      	beq.n	800234c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	e364      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d032      	beq.n	8002318 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a42      	ldr	r2, [pc, #264]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022be:	f7fe fcb5 	bl	8000c2c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c6:	f7fe fcb1 	bl	8000c2c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e34d      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d8:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a35      	ldr	r2, [pc, #212]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b33      	ldr	r3, [pc, #204]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4930      	ldr	r1, [pc, #192]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	492b      	ldr	r1, [pc, #172]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
 8002316:	e01a      	b.n	800234e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002324:	f7fe fc82 	bl	8000c2c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232c:	f7fe fc7e 	bl	8000c2c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e31a      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1dc>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d073      	beq.n	8002442 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x21c>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d10b      	bne.n	8002384 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d063      	beq.n	8002440 <HAL_RCC_OscConfig+0x2f0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d15f      	bne.n	8002440 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e2f7      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x24c>
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e025      	b.n	80023e8 <HAL_RCC_OscConfig+0x298>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d114      	bne.n	80023d0 <HAL_RCC_OscConfig+0x280>
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e013      	b.n	80023e8 <HAL_RCC_OscConfig+0x298>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	08004248 	.word	0x08004248
 80023c8:	2000005c 	.word	0x2000005c
 80023cc:	20000060 	.word	0x20000060
 80023d0:	4ba0      	ldr	r3, [pc, #640]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a9f      	ldr	r2, [pc, #636]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b9d      	ldr	r3, [pc, #628]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a9c      	ldr	r2, [pc, #624]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fc1c 	bl	8000c2c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fc18 	bl	8000c2c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e2b4      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	4b92      	ldr	r3, [pc, #584]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2a8>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fc08 	bl	8000c2c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fc04 	bl	8000c2c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e2a0      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x2d0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d060      	beq.n	8002510 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x310>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d119      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d116      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002460:	4b7c      	ldr	r3, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x328>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e27d      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b76      	ldr	r3, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4973      	ldr	r1, [pc, #460]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248c:	e040      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d023      	beq.n	80024de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6e      	ldr	r2, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fbc3 	bl	8000c2c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe fbbf 	bl	8000c2c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e25b      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	495f      	ldr	r1, [pc, #380]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
 80024dc:	e018      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80024e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fb9f 	bl	8000c2c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe fb9b 	bl	8000c2c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e237      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03c      	beq.n	8002596 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002524:	4b4b      	ldr	r3, [pc, #300]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	4a4a      	ldr	r2, [pc, #296]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fb7a 	bl	8000c2c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7fe fb76 	bl	8000c2c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e212      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCC_OscConfig+0x3ec>
 800255c:	e01b      	b.n	8002596 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255e:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002564:	4a3b      	ldr	r2, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fb5d 	bl	8000c2c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002576:	f7fe fb59 	bl	8000c2c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1f5      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002588:	4b32      	ldr	r3, [pc, #200]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80a6 	beq.w	80026f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	4a26      	ldr	r2, [pc, #152]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	; 0x58
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCC_OscConfig+0x508>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d118      	bne.n	800260e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025dc:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_RCC_OscConfig+0x508>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_RCC_OscConfig+0x508>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7fe fb20 	bl	8000c2c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f0:	f7fe fb1c 	bl	8000c2c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1b8      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_RCC_OscConfig+0x508>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x4d8>
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002626:	e029      	b.n	800267c <HAL_RCC_OscConfig+0x52c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d115      	bne.n	800265c <HAL_RCC_OscConfig+0x50c>
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	4a03      	ldr	r2, [pc, #12]	; (8002654 <HAL_RCC_OscConfig+0x504>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002650:	e014      	b.n	800267c <HAL_RCC_OscConfig+0x52c>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	40007000 	.word	0x40007000
 800265c:	4b9d      	ldr	r3, [pc, #628]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	4a9c      	ldr	r2, [pc, #624]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800266c:	4b99      	ldr	r3, [pc, #612]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a98      	ldr	r2, [pc, #608]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d016      	beq.n	80026b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7fe fad2 	bl	8000c2c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7fe face 	bl	8000c2c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e168      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a2:	4b8c      	ldr	r3, [pc, #560]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ed      	beq.n	800268c <HAL_RCC_OscConfig+0x53c>
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7fe fabb 	bl	8000c2c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fab7 	bl	8000c2c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e151      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ed      	bne.n	80026ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a7a      	ldr	r2, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d03c      	beq.n	8002776 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01c      	beq.n	800273e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002704:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800270a:	4a72      	ldr	r2, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe fa8a 	bl	8000c2c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271c:	f7fe fa86 	bl	8000c2c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e122      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800272e:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ef      	beq.n	800271c <HAL_RCC_OscConfig+0x5cc>
 800273c:	e01b      	b.n	8002776 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800273e:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002744:	4a63      	ldr	r2, [pc, #396]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe fa6d 	bl	8000c2c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002756:	f7fe fa69 	bl	8000c2c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e105      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002768:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800276a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ef      	bne.n	8002756 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80f9 	beq.w	8002972 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	f040 80cf 	bne.w	8002928 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	429a      	cmp	r2, r3
 800279c:	d12c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	3b01      	subs	r3, #1
 80027aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d123      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d11b      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d113      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	3b01      	subs	r3, #1
 80027de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d109      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	3b01      	subs	r3, #1
 80027f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d071      	beq.n	80028dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d068      	beq.n	80028d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027fe:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800280a:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0ac      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002820:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002824:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002826:	f7fe fa01 	bl	8000c2c <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe f9fd 	bl	8000c2c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e099      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_RCC_OscConfig+0x788>)
 8002852:	4013      	ands	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800285c:	3a01      	subs	r2, #1
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	4311      	orrs	r1, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002866:	0212      	lsls	r2, r2, #8
 8002868:	4311      	orrs	r1, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800286e:	0852      	lsrs	r2, r2, #1
 8002870:	3a01      	subs	r2, #1
 8002872:	0552      	lsls	r2, r2, #21
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800287a:	0852      	lsrs	r2, r2, #1
 800287c:	3a01      	subs	r2, #1
 800287e:	0652      	lsls	r2, r2, #25
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002886:	06d2      	lsls	r2, r2, #27
 8002888:	430a      	orrs	r2, r1
 800288a:	4912      	ldr	r1, [pc, #72]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800288c:	4313      	orrs	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 8002896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a8:	f7fe f9c0 	bl	8000c2c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe f9bc 	bl	8000c2c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e058      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_RCC_OscConfig+0x784>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ce:	e050      	b.n	8002972 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e04f      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d144      	bne.n	8002972 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028e8:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a20      	ldr	r2, [pc, #128]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 80028fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002900:	f7fe f994 	bl	8000c2c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe f990 	bl	8000c2c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e02c      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x7b8>
 8002926:	e024      	b.n	8002972 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d01f      	beq.n	800296e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 8002934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe f977 	bl	8000c2c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe f973 	bl	8000c2c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e00f      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	4905      	ldr	r1, [pc, #20]	; (800297c <HAL_RCC_OscConfig+0x82c>)
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_OscConfig+0x830>)
 8002968:	4013      	ands	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
 800296c:	e001      	b.n	8002972 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	feeefffc 	.word	0xfeeefffc

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e11d      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b90      	ldr	r3, [pc, #576]	; (8002be0 <HAL_RCC_ClockConfig+0x25c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d910      	bls.n	80029cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b8d      	ldr	r3, [pc, #564]	; (8002be0 <HAL_RCC_ClockConfig+0x25c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 020f 	bic.w	r2, r3, #15
 80029b2:	498b      	ldr	r1, [pc, #556]	; (8002be0 <HAL_RCC_ClockConfig+0x25c>)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b89      	ldr	r3, [pc, #548]	; (8002be0 <HAL_RCC_ClockConfig+0x25c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e105      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d010      	beq.n	80029fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d908      	bls.n	80029fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	497b      	ldr	r1, [pc, #492]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d079      	beq.n	8002afa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d11e      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0e:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0dc      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a1e:	f000 f9d1 	bl	8002dc4 <RCC_GetSysClockFreqFromPLLSource>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a70      	ldr	r2, [pc, #448]	; (8002be8 <HAL_RCC_ClockConfig+0x264>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d946      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a2a:	4b6e      	ldr	r3, [pc, #440]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d140      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a36:	4b6b      	ldr	r3, [pc, #428]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a3e:	4a69      	ldr	r2, [pc, #420]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e035      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a54:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d115      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b9      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a6c:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ad      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0a5      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a8c:	f000 f8b4 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a55      	ldr	r2, [pc, #340]	; (8002be8 <HAL_RCC_ClockConfig+0x264>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d90f      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a98:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aac:	4a4d      	ldr	r2, [pc, #308]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 0203 	bic.w	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4947      	ldr	r1, [pc, #284]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aca:	f7fe f8af 	bl	8000c2c <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad2:	f7fe f8ab 	bl	8000c2c <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e077      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 020c 	and.w	r2, r3, #12
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d1eb      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d105      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d208      	bcs.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	492b      	ldr	r1, [pc, #172]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <HAL_RCC_ClockConfig+0x25c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d210      	bcs.n	8002b6a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_ClockConfig+0x25c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 020f 	bic.w	r2, r3, #15
 8002b50:	4923      	ldr	r1, [pc, #140]	; (8002be0 <HAL_RCC_ClockConfig+0x25c>)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_RCC_ClockConfig+0x25c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e036      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4918      	ldr	r1, [pc, #96]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4910      	ldr	r1, [pc, #64]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ba8:	f000 f826 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_RCC_ClockConfig+0x260>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <HAL_RCC_ClockConfig+0x268>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x26c>)
 8002bc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd ffdd 	bl	8000b8c <HAL_InitTick>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40022000 	.word	0x40022000
 8002be4:	40021000 	.word	0x40021000
 8002be8:	04c4b400 	.word	0x04c4b400
 8002bec:	08004248 	.word	0x08004248
 8002bf0:	2000005c 	.word	0x2000005c
 8002bf4:	20000060 	.word	0x20000060

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x34>
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d121      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d11e      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c2c:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c38:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c48:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c54:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10d      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	e004      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d134      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d003      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xac>
 8002c9c:	e005      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca0:	617b      	str	r3, [r7, #20]
      break;
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca6:	617b      	str	r3, [r7, #20]
      break;
 8002ca8:	e002      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	617b      	str	r3, [r7, #20]
      break;
 8002cae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3301      	adds	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	fb03 f202 	mul.w	r2, r3, r2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	0e5b      	lsrs	r3, r3, #25
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	08004258 	.word	0x08004258
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200

08002d10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d28:	f7ff f94e 	bl	8001fc8 <HAL_PWREx_GetVoltageRange>
 8002d2c:	6178      	str	r0, [r7, #20]
 8002d2e:	e014      	b.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d48:	f7ff f93e 	bl	8001fc8 <HAL_PWREx_GetVoltageRange>
 8002d4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d60:	d10b      	bne.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	d913      	bls.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d6c:	d902      	bls.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d6e:	2302      	movs	r3, #2
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	e00d      	b.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d74:	2301      	movs	r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	e00a      	b.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d7e:	d902      	bls.n	8002d86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d80:	2302      	movs	r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	e004      	b.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b70      	cmp	r3, #112	; 0x70
 8002d8a:	d101      	bne.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 020f 	bic.w	r2, r3, #15
 8002d98:	4909      	ldr	r1, [pc, #36]	; (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40022000 	.word	0x40022000

08002dc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dca:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d00b      	beq.n	8002df2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d825      	bhi.n	8002e2c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d008      	beq.n	8002df8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d11f      	bne.n	8002e2c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dee:	613b      	str	r3, [r7, #16]
    break;
 8002df0:	e01f      	b.n	8002e32 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002df2:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002df4:	613b      	str	r3, [r7, #16]
    break;
 8002df6:	e01c      	b.n	8002e32 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002df8:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e005      	b.n	8002e20 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e20:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	613b      	str	r3, [r7, #16]
    break;
 8002e2a:	e002      	b.n	8002e32 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
    break;
 8002e30:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	fb03 f202 	mul.w	r2, r3, r2
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0e5b      	lsrs	r3, r3, #25
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	3301      	adds	r3, #1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e72:	683b      	ldr	r3, [r7, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40021000 	.word	0x40021000
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200
 8002e8c:	08004258 	.word	0x08004258

08002e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d040      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d02a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002eb4:	2b80      	cmp	r3, #128	; 0x80
 8002eb6:	d825      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002eb8:	2b60      	cmp	r3, #96	; 0x60
 8002eba:	d026      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ebc:	2b60      	cmp	r3, #96	; 0x60
 8002ebe:	d821      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d006      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d81d      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d010      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002ed0:	e018      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ed2:	4b89      	ldr	r3, [pc, #548]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4a88      	ldr	r2, [pc, #544]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ede:	e015      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fb02 	bl	80034f0 <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3320      	adds	r3, #32
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fbed 	bl	80036d8 <RCCEx_PLLSAI2_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f02:	e003      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	74fb      	strb	r3, [r7, #19]
      break;
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10b      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f12:	4b79      	ldr	r3, [pc, #484]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f18:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f20:	4975      	ldr	r1, [pc, #468]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f28:	e001      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d047      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f42:	d030      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f48:	d82a      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f4e:	d02a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f54:	d824      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5a:	d008      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f60:	d81e      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6a:	d010      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f6c:	e018      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f6e:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f7a:	e015      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fab4 	bl	80034f0 <RCCEx_PLLSAI1_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8c:	e00c      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3320      	adds	r3, #32
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fb9f 	bl	80036d8 <RCCEx_PLLSAI2_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fae:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	494e      	ldr	r1, [pc, #312]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fc4:	e001      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc6:	7cfb      	ldrb	r3, [r7, #19]
 8002fc8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 809f 	beq.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fdc:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002fec:	2300      	movs	r3, #0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800301a:	f7fd fe07 	bl	8000c2c <HAL_GetTick>
 800301e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003020:	e009      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fd fe03 	bl	8000c2c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d902      	bls.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	74fb      	strb	r3, [r7, #19]
        break;
 8003034:	e005      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003036:	4b31      	ldr	r3, [pc, #196]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ef      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d15b      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003048:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01f      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	429a      	cmp	r2, r3
 8003064:	d019      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003070:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d016      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fd fdc2 	bl	8000c2c <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030aa:	e00b      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fd fdbe 	bl	8000c2c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d902      	bls.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	74fb      	strb	r3, [r7, #19]
            break;
 80030c2:	e006      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ec      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10c      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030f0:	e008      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	74bb      	strb	r3, [r7, #18]
 80030f6:	e005      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003104:	7c7b      	ldrb	r3, [r7, #17]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4ba0      	ldr	r3, [pc, #640]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4a9f      	ldr	r2, [pc, #636]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003114:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003122:	4b9a      	ldr	r3, [pc, #616]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 0203 	bic.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003130:	4996      	ldr	r1, [pc, #600]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003144:	4b91      	ldr	r3, [pc, #580]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f023 020c 	bic.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	498e      	ldr	r1, [pc, #568]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003166:	4b89      	ldr	r3, [pc, #548]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	4985      	ldr	r1, [pc, #532]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003188:	4b80      	ldr	r3, [pc, #512]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	497d      	ldr	r1, [pc, #500]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031aa:	4b78      	ldr	r3, [pc, #480]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	4974      	ldr	r1, [pc, #464]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031cc:	4b6f      	ldr	r3, [pc, #444]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	496c      	ldr	r1, [pc, #432]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ee:	4b67      	ldr	r3, [pc, #412]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fc:	4963      	ldr	r1, [pc, #396]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003210:	4b5e      	ldr	r3, [pc, #376]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800321e:	495b      	ldr	r1, [pc, #364]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	4952      	ldr	r1, [pc, #328]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003254:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	494a      	ldr	r1, [pc, #296]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003276:	4b45      	ldr	r3, [pc, #276]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	4941      	ldr	r1, [pc, #260]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003298:	4b3c      	ldr	r3, [pc, #240]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a6:	4939      	ldr	r1, [pc, #228]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d028      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ba:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c8:	4930      	ldr	r1, [pc, #192]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d8:	d106      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032da:	4b2c      	ldr	r3, [pc, #176]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4a2b      	ldr	r2, [pc, #172]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032e4:	60d3      	str	r3, [r2, #12]
 80032e6:	e011      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032f0:	d10c      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f8f9 	bl	80034f0 <RCCEx_PLLSAI1_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d04d      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003320:	d108      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003332:	e012      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003340:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003352:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003362:	d106      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a08      	ldr	r2, [pc, #32]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336e:	60d3      	str	r3, [r2, #12]
 8003370:	e020      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800337a:	d109      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a02      	ldr	r2, [pc, #8]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003386:	60d3      	str	r3, [r2, #12]
 8003388:	e014      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	2101      	movs	r1, #1
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 f8a5 	bl	80034f0 <RCCEx_PLLSAI1_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d028      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c0:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ce:	4947      	ldr	r1, [pc, #284]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d106      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b42      	ldr	r3, [pc, #264]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a41      	ldr	r2, [pc, #260]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	e011      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f6:	d10c      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f876 	bl	80034f0 <RCCEx_PLLSAI1_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01e      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800341e:	4b33      	ldr	r3, [pc, #204]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	492f      	ldr	r1, [pc, #188]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003440:	d10c      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	2102      	movs	r1, #2
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f851 	bl	80034f0 <RCCEx_PLLSAI1_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003468:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800346a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346e:	f023 0204 	bic.w	r2, r3, #4
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003478:	491c      	ldr	r1, [pc, #112]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00b      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800348c:	4b17      	ldr	r3, [pc, #92]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003492:	f023 0218 	bic.w	r2, r3, #24
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	4913      	ldr	r1, [pc, #76]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c0:	490a      	ldr	r1, [pc, #40]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d2:	d105      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000

080034f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034fe:	4b72      	ldr	r3, [pc, #456]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00e      	beq.n	8003528 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800350a:	4b6f      	ldr	r3, [pc, #444]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d103      	bne.n	8003522 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
       ||
 800351e:	2b00      	cmp	r3, #0
 8003520:	d142      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e03f      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d018      	beq.n	8003562 <RCCEx_PLLSAI1_Config+0x72>
 8003530:	2b03      	cmp	r3, #3
 8003532:	d825      	bhi.n	8003580 <RCCEx_PLLSAI1_Config+0x90>
 8003534:	2b01      	cmp	r3, #1
 8003536:	d002      	beq.n	800353e <RCCEx_PLLSAI1_Config+0x4e>
 8003538:	2b02      	cmp	r3, #2
 800353a:	d009      	beq.n	8003550 <RCCEx_PLLSAI1_Config+0x60>
 800353c:	e020      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800353e:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11d      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354e:	e01a      	b.n	8003586 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003550:	4b5d      	ldr	r3, [pc, #372]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e013      	b.n	800358a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003562:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800356e:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800357e:	e006      	b.n	800358e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e004      	b.n	8003590 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800358e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d108      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003596:	4b4c      	ldr	r3, [pc, #304]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4949      	ldr	r1, [pc, #292]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 8086 	bne.w	80036bc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035b0:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a44      	ldr	r2, [pc, #272]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035bc:	f7fd fb36 	bl	8000c2c <HAL_GetTick>
 80035c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035c2:	e009      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035c4:	f7fd fb32 	bl	8000c2c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d902      	bls.n	80035d8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	73fb      	strb	r3, [r7, #15]
        break;
 80035d6:	e005      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035d8:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ef      	bne.n	80035c4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d168      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d113      	bne.n	8003618 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f0:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	4b35      	ldr	r3, [pc, #212]	; (80036cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6892      	ldr	r2, [r2, #8]
 80035fc:	0211      	lsls	r1, r2, #8
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	06d2      	lsls	r2, r2, #27
 8003604:	4311      	orrs	r1, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6852      	ldr	r2, [r2, #4]
 800360a:	3a01      	subs	r2, #1
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	430a      	orrs	r2, r1
 8003610:	492d      	ldr	r1, [pc, #180]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003612:	4313      	orrs	r3, r2
 8003614:	610b      	str	r3, [r1, #16]
 8003616:	e02d      	b.n	8003674 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d115      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800361e:	4b2a      	ldr	r3, [pc, #168]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	0211      	lsls	r1, r2, #8
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6912      	ldr	r2, [r2, #16]
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	3a01      	subs	r2, #1
 8003634:	0552      	lsls	r2, r2, #21
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6852      	ldr	r2, [r2, #4]
 800363c:	3a01      	subs	r2, #1
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	430a      	orrs	r2, r1
 8003642:	4921      	ldr	r1, [pc, #132]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003644:	4313      	orrs	r3, r2
 8003646:	610b      	str	r3, [r1, #16]
 8003648:	e014      	b.n	8003674 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6892      	ldr	r2, [r2, #8]
 8003656:	0211      	lsls	r1, r2, #8
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6952      	ldr	r2, [r2, #20]
 800365c:	0852      	lsrs	r2, r2, #1
 800365e:	3a01      	subs	r2, #1
 8003660:	0652      	lsls	r2, r2, #25
 8003662:	4311      	orrs	r1, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6852      	ldr	r2, [r2, #4]
 8003668:	3a01      	subs	r2, #1
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	430a      	orrs	r2, r1
 800366e:	4916      	ldr	r1, [pc, #88]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800367e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fd fad4 	bl	8000c2c <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003686:	e009      	b.n	800369c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003688:	f7fd fad0 	bl	8000c2c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d902      	bls.n	800369c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	73fb      	strb	r3, [r7, #15]
          break;
 800369a:	e005      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ef      	beq.n	8003688 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	4904      	ldr	r1, [pc, #16]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	07ff800f 	.word	0x07ff800f
 80036d0:	ff9f800f 	.word	0xff9f800f
 80036d4:	f9ff800f 	.word	0xf9ff800f

080036d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036e6:	4b72      	ldr	r3, [pc, #456]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00e      	beq.n	8003710 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036f2:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0203 	and.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d103      	bne.n	800370a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
       ||
 8003706:	2b00      	cmp	r3, #0
 8003708:	d142      	bne.n	8003790 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	e03f      	b.n	8003790 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d018      	beq.n	800374a <RCCEx_PLLSAI2_Config+0x72>
 8003718:	2b03      	cmp	r3, #3
 800371a:	d825      	bhi.n	8003768 <RCCEx_PLLSAI2_Config+0x90>
 800371c:	2b01      	cmp	r3, #1
 800371e:	d002      	beq.n	8003726 <RCCEx_PLLSAI2_Config+0x4e>
 8003720:	2b02      	cmp	r3, #2
 8003722:	d009      	beq.n	8003738 <RCCEx_PLLSAI2_Config+0x60>
 8003724:	e020      	b.n	8003768 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003726:	4b62      	ldr	r3, [pc, #392]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d11d      	bne.n	800376e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003736:	e01a      	b.n	800376e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003738:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d116      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003748:	e013      	b.n	8003772 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800374a:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003756:	4b56      	ldr	r3, [pc, #344]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003766:	e006      	b.n	8003776 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      break;
 800376c:	e004      	b.n	8003778 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003776:	bf00      	nop
    }

    if(status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d108      	bne.n	8003790 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800377e:	4b4c      	ldr	r3, [pc, #304]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4949      	ldr	r1, [pc, #292]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 8086 	bne.w	80038a4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003798:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a44      	ldr	r2, [pc, #272]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fd fa42 	bl	8000c2c <HAL_GetTick>
 80037a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037aa:	e009      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ac:	f7fd fa3e 	bl	8000c2c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	73fb      	strb	r3, [r7, #15]
        break;
 80037be:	e005      	b.n	80037cc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037c0:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ef      	bne.n	80037ac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d168      	bne.n	80038a4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037d8:	4b35      	ldr	r3, [pc, #212]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80037de:	4013      	ands	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6892      	ldr	r2, [r2, #8]
 80037e4:	0211      	lsls	r1, r2, #8
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68d2      	ldr	r2, [r2, #12]
 80037ea:	06d2      	lsls	r2, r2, #27
 80037ec:	4311      	orrs	r1, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6852      	ldr	r2, [r2, #4]
 80037f2:	3a01      	subs	r2, #1
 80037f4:	0112      	lsls	r2, r2, #4
 80037f6:	430a      	orrs	r2, r1
 80037f8:	492d      	ldr	r1, [pc, #180]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	614b      	str	r3, [r1, #20]
 80037fe:	e02d      	b.n	800385c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d115      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003806:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	0211      	lsls	r1, r2, #8
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6912      	ldr	r2, [r2, #16]
 8003818:	0852      	lsrs	r2, r2, #1
 800381a:	3a01      	subs	r2, #1
 800381c:	0552      	lsls	r2, r2, #21
 800381e:	4311      	orrs	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6852      	ldr	r2, [r2, #4]
 8003824:	3a01      	subs	r2, #1
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	430a      	orrs	r2, r1
 800382a:	4921      	ldr	r1, [pc, #132]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	614b      	str	r3, [r1, #20]
 8003830:	e014      	b.n	800385c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	4b21      	ldr	r3, [pc, #132]	; (80038bc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6892      	ldr	r2, [r2, #8]
 800383e:	0211      	lsls	r1, r2, #8
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6952      	ldr	r2, [r2, #20]
 8003844:	0852      	lsrs	r2, r2, #1
 8003846:	3a01      	subs	r2, #1
 8003848:	0652      	lsls	r2, r2, #25
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6852      	ldr	r2, [r2, #4]
 8003850:	3a01      	subs	r2, #1
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	430a      	orrs	r2, r1
 8003856:	4916      	ldr	r1, [pc, #88]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003858:	4313      	orrs	r3, r2
 800385a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fd f9e0 	bl	8000c2c <HAL_GetTick>
 800386c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800386e:	e009      	b.n	8003884 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003870:	f7fd f9dc 	bl	8000c2c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d902      	bls.n	8003884 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	73fb      	strb	r3, [r7, #15]
          break;
 8003882:	e005      	b.n	8003890 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ef      	beq.n	8003870 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	4904      	ldr	r1, [pc, #16]	; (80038b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	07ff800f 	.word	0x07ff800f
 80038b8:	ff9f800f 	.word	0xff9f800f
 80038bc:	f9ff800f 	.word	0xf9ff800f

080038c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e049      	b.n	8003966 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd f8a2 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 fa12 	bl	8003d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d001      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e04f      	b.n	8003a28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <HAL_TIM_Base_Start_IT+0xc4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <HAL_TIM_Base_Start_IT+0x76>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d018      	beq.n	80039e6 <HAL_TIM_Base_Start_IT+0x76>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HAL_TIM_Base_Start_IT+0xc8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_TIM_Base_Start_IT+0x76>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <HAL_TIM_Base_Start_IT+0xcc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_TIM_Base_Start_IT+0x76>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_TIM_Base_Start_IT+0x76>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_TIM_Base_Start_IT+0x76>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d115      	bne.n	8003a12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d015      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xb4>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d011      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	e008      	b.n	8003a24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e000      	b.n	8003a26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40013400 	.word	0x40013400
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	00010007 	.word	0x00010007

08003a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d020      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01b      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0202 	mvn.w	r2, #2
 8003a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f926 	bl	8003cec <HAL_TIM_IC_CaptureCallback>
 8003aa0:	e005      	b.n	8003aae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f918 	bl	8003cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f929 	bl	8003d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d020      	beq.n	8003b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01b      	beq.n	8003b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0204 	mvn.w	r2, #4
 8003ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f900 	bl	8003cec <HAL_TIM_IC_CaptureCallback>
 8003aec:	e005      	b.n	8003afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f8f2 	bl	8003cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f903 	bl	8003d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d020      	beq.n	8003b4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01b      	beq.n	8003b4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0208 	mvn.w	r2, #8
 8003b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2204      	movs	r2, #4
 8003b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8da 	bl	8003cec <HAL_TIM_IC_CaptureCallback>
 8003b38:	e005      	b.n	8003b46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8cc 	bl	8003cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8dd 	bl	8003d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d020      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0210 	mvn.w	r2, #16
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8b4 	bl	8003cec <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8a6 	bl	8003cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8b7 	bl	8003d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0201 	mvn.w	r2, #1
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fc fe32 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00c      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fae2 	bl	80041a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fada 	bl	80041b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00c      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f876 	bl	8003d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00c      	beq.n	8003c4c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0220 	mvn.w	r2, #32
 8003c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 faa2 	bl	8004190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e031      	b.n	8003cd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c7c:	6839      	ldr	r1, [r7, #0]
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8ec 	bl	8003e5c <TIM_SlaveTimer_SetConfig>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e018      	b.n	8003cd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cbc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a40      	ldr	r2, [pc, #256]	; (8003e3c <TIM_Base_SetConfig+0x114>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d46:	d00f      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a3d      	ldr	r2, [pc, #244]	; (8003e40 <TIM_Base_SetConfig+0x118>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00b      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3c      	ldr	r2, [pc, #240]	; (8003e44 <TIM_Base_SetConfig+0x11c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3b      	ldr	r2, [pc, #236]	; (8003e48 <TIM_Base_SetConfig+0x120>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <TIM_Base_SetConfig+0x124>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d108      	bne.n	8003d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <TIM_Base_SetConfig+0x114>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01f      	beq.n	8003dc2 <TIM_Base_SetConfig+0x9a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d01b      	beq.n	8003dc2 <TIM_Base_SetConfig+0x9a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2c      	ldr	r2, [pc, #176]	; (8003e40 <TIM_Base_SetConfig+0x118>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d017      	beq.n	8003dc2 <TIM_Base_SetConfig+0x9a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <TIM_Base_SetConfig+0x11c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <TIM_Base_SetConfig+0x9a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <TIM_Base_SetConfig+0x120>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00f      	beq.n	8003dc2 <TIM_Base_SetConfig+0x9a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <TIM_Base_SetConfig+0x124>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_Base_SetConfig+0x9a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a28      	ldr	r2, [pc, #160]	; (8003e50 <TIM_Base_SetConfig+0x128>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_Base_SetConfig+0x9a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <TIM_Base_SetConfig+0x12c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_Base_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <TIM_Base_SetConfig+0x130>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d108      	bne.n	8003dd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <TIM_Base_SetConfig+0x114>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00f      	beq.n	8003e20 <TIM_Base_SetConfig+0xf8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <TIM_Base_SetConfig+0x124>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <TIM_Base_SetConfig+0xf8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <TIM_Base_SetConfig+0x128>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <TIM_Base_SetConfig+0xf8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <TIM_Base_SetConfig+0x12c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_Base_SetConfig+0xf8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a0f      	ldr	r2, [pc, #60]	; (8003e58 <TIM_Base_SetConfig+0x130>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d103      	bne.n	8003e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	615a      	str	r2, [r3, #20]
}
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40000c00 	.word	0x40000c00
 8003e4c:	40013400 	.word	0x40013400
 8003e50:	40014000 	.word	0x40014000
 8003e54:	40014400 	.word	0x40014400
 8003e58:	40014800 	.word	0x40014800

08003e5c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e78:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8a:	f023 0307 	bic.w	r3, r3, #7
 8003e8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b70      	cmp	r3, #112	; 0x70
 8003ea8:	d01a      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x84>
 8003eaa:	2b70      	cmp	r3, #112	; 0x70
 8003eac:	d860      	bhi.n	8003f70 <TIM_SlaveTimer_SetConfig+0x114>
 8003eae:	2b60      	cmp	r3, #96	; 0x60
 8003eb0:	d054      	beq.n	8003f5c <TIM_SlaveTimer_SetConfig+0x100>
 8003eb2:	2b60      	cmp	r3, #96	; 0x60
 8003eb4:	d85c      	bhi.n	8003f70 <TIM_SlaveTimer_SetConfig+0x114>
 8003eb6:	2b50      	cmp	r3, #80	; 0x50
 8003eb8:	d046      	beq.n	8003f48 <TIM_SlaveTimer_SetConfig+0xec>
 8003eba:	2b50      	cmp	r3, #80	; 0x50
 8003ebc:	d858      	bhi.n	8003f70 <TIM_SlaveTimer_SetConfig+0x114>
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d019      	beq.n	8003ef6 <TIM_SlaveTimer_SetConfig+0x9a>
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d854      	bhi.n	8003f70 <TIM_SlaveTimer_SetConfig+0x114>
 8003ec6:	2b30      	cmp	r3, #48	; 0x30
 8003ec8:	d055      	beq.n	8003f76 <TIM_SlaveTimer_SetConfig+0x11a>
 8003eca:	2b30      	cmp	r3, #48	; 0x30
 8003ecc:	d850      	bhi.n	8003f70 <TIM_SlaveTimer_SetConfig+0x114>
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d051      	beq.n	8003f76 <TIM_SlaveTimer_SetConfig+0x11a>
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d84c      	bhi.n	8003f70 <TIM_SlaveTimer_SetConfig+0x114>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04d      	beq.n	8003f76 <TIM_SlaveTimer_SetConfig+0x11a>
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d04b      	beq.n	8003f76 <TIM_SlaveTimer_SetConfig+0x11a>
 8003ede:	e047      	b.n	8003f70 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003ef0:	f000 f8a6 	bl	8004040 <TIM_ETR_SetConfig>
      break;
 8003ef4:	e040      	b.n	8003f78 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b05      	cmp	r3, #5
 8003efc:	d101      	bne.n	8003f02 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e03b      	b.n	8003f7a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f28:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
      break;
 8003f46:	e017      	b.n	8003f78 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f54:	461a      	mov	r2, r3
 8003f56:	f000 f814 	bl	8003f82 <TIM_TI1_ConfigInputStage>
      break;
 8003f5a:	e00d      	b.n	8003f78 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f000 f839 	bl	8003fe0 <TIM_TI2_ConfigInputStage>
      break;
 8003f6e:	e003      	b.n	8003f78 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
      break;
 8003f74:	e000      	b.n	8003f78 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003f76:	bf00      	nop
  }

  return status;
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b087      	sub	sp, #28
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f023 0201 	bic.w	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 030a 	bic.w	r3, r3, #10
 8003fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0210 	bic.w	r2, r3, #16
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800400a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	031b      	lsls	r3, r3, #12
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800401c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	021a      	lsls	r2, r3, #8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	431a      	orrs	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004094:	2302      	movs	r3, #2
 8004096:	e068      	b.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2e      	ldr	r2, [pc, #184]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2d      	ldr	r2, [pc, #180]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d108      	bne.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01d      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d018      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00e      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d004      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a14      	ldr	r2, [pc, #80]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d10c      	bne.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	4313      	orrs	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40013400 	.word	0x40013400
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40014000 	.word	0x40014000

08004190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4d0d      	ldr	r5, [pc, #52]	; (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	; (8004218 <__libc_init_array+0x3c>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2600      	movs	r6, #0
 80041e8:	42a6      	cmp	r6, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4d0b      	ldr	r5, [pc, #44]	; (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	; (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 f818 	bl	8004224 <_init>
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2600      	movs	r6, #0
 80041fa:	42a6      	cmp	r6, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f855 3b04 	ldr.w	r3, [r5], #4
 8004204:	4798      	blx	r3
 8004206:	3601      	adds	r6, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f855 3b04 	ldr.w	r3, [r5], #4
 800420e:	4798      	blx	r3
 8004210:	3601      	adds	r6, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	08004288 	.word	0x08004288
 8004218:	08004288 	.word	0x08004288
 800421c:	08004288 	.word	0x08004288
 8004220:	0800428c 	.word	0x0800428c

08004224 <_init>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr

08004230 <_fini>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr
