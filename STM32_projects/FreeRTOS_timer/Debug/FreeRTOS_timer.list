
FreeRTOS_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec4  08006ec4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08006ec4  08006ec4  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ec4  08006ec4  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08006ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017e0  200000bc  08006f88  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000189c  08006f88  0002189c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fe7  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003433  00000000  00000000  00037116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4e  00000000  00000000  0003b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb4e  00000000  00000000  0003c88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163a2  00000000  00000000  000683dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010cc0b  00000000  00000000  0007e77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055b0  00000000  00000000  0018b38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0019093c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006da0 	.word	0x08006da0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000c0 	.word	0x200000c0
 80001fc:	08006da0 	.word	0x08006da0

08000200 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	4a07      	ldr	r2, [pc, #28]	; (800022c <vApplicationGetIdleTaskMemory+0x2c>)
 8000210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <vApplicationGetIdleTaskMemory+0x30>)
 8000216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2280      	movs	r2, #128	; 0x80
 800021c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200000d8 	.word	0x200000d8
 8000230:	20000178 	.word	0x20000178

08000234 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <vApplicationGetTimerTaskMemory+0x2c>)
 8000244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	4a06      	ldr	r2, [pc, #24]	; (8000264 <vApplicationGetTimerTaskMemory+0x30>)
 800024a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000252:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	20000378 	.word	0x20000378
 8000264:	20000418 	.word	0x20000418

08000268 <HAL_CAN_RxFifo0MsgPendingCallback>:
//char Heart [8]={0b01100000,0b11110000,0b11111000,0b01111100,0b01111100,0b11111000,0b11110000,0b01100000};



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000272:	4a08      	ldr	r2, [pc, #32]	; (8000294 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000274:	2100      	movs	r1, #0
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f000 fff3 	bl	8001262 <HAL_CAN_GetRxMessage>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000282:	f000 fd1b 	bl	8000cbc <Error_Handler>

  /*if ((RxHeader.StdId == 0x103))
  {
	  datacheck = 1;
  }*/
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	200008bc 	.word	0x200008bc
 8000294:	200008a0 	.word	0x200008a0

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b5b0      	push	{r4, r5, r7, lr}
 800029a:	b0a0      	sub	sp, #128	; 0x80
 800029c:	af00      	add	r7, sp, #0
	  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)

	  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);*/


	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800029e:	2102      	movs	r1, #2
 80002a0:	483d      	ldr	r0, [pc, #244]	; (8000398 <main+0x100>)
 80002a2:	f001 f900 	bl	80014a6 <HAL_CAN_ActivateNotification>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <main+0x18>
	  {
		  Error_Handler();
 80002ac:	f000 fd06 	bl	8000cbc <Error_Handler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fea3 	bl	8000ffa <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f886 	bl	80003c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f984 	bl	80005c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002bc:	f000 f90a 	bl	80004d4 <MX_TIM2_Init>
  MX_CAN1_Init();
 80002c0:	f000 f8d4 	bl	800046c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80002c4:	2100      	movs	r1, #0
 80002c6:	4835      	ldr	r0, [pc, #212]	; (800039c <main+0x104>)
 80002c8:	f002 fed8 	bl	800307c <HAL_TIM_PWM_Start>
  const uint8_t  dataSize = 6 ;
 80002cc:	2306      	movs	r3, #6
 80002ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint16_t data1[6] = {TEST_DISPLAY_ENTER, TEST_DISPLAY_EXIT, DECODE_MODE, INTENSITY, SCAN_LIMIT, SHUTDOWN_1};
 80002d2:	4a33      	ldr	r2, [pc, #204]	; (80003a0 <main+0x108>)
 80002d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80002da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  SPI_writeData(data1, dataSize,1);
 80002de:	f897 107f 	ldrb.w	r1, [r7, #127]	; 0x7f
 80002e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002e6:	2201      	movs	r2, #1
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fb7d 	bl	80009e8 <SPI_writeData>
  SPI_writeData(data1, dataSize,2);
 80002ee:	f897 107f 	ldrb.w	r1, [r7, #127]	; 0x7f
 80002f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002f6:	2202      	movs	r2, #2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fb75 	bl	80009e8 <SPI_writeData>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002fe:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <main+0x10c>)
 8000300:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000304:	461d      	mov	r5, r3
 8000306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000312:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f003 ffb2 	bl	8004282 <osThreadCreate>
 800031e:	4603      	mov	r3, r0
 8000320:	4a21      	ldr	r2, [pc, #132]	; (80003a8 <main+0x110>)
 8000322:	6013      	str	r3, [r2, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, StartTask02, osPriorityNormal, 0, 128);
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <main+0x114>)
 8000326:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800032a:	461d      	mov	r5, r3
 800032c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800032e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8000338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f003 ff9f 	bl	8004282 <osThreadCreate>
 8000344:	4603      	mov	r3, r0
 8000346:	4a1a      	ldr	r2, [pc, #104]	; (80003b0 <main+0x118>)
 8000348:	6013      	str	r3, [r2, #0]

  /* definition and creation of ResetBtnTask */
  osThreadDef(ResetBtnTask, StartResetBtnTask, osPriorityNormal, 0, 128);
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <main+0x11c>)
 800034c:	f107 041c 	add.w	r4, r7, #28
 8000350:	461d      	mov	r5, r3
 8000352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800035a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ResetBtnTaskHandle = osThreadCreate(osThread(ResetBtnTask), NULL);
 800035e:	f107 031c 	add.w	r3, r7, #28
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f003 ff8c 	bl	8004282 <osThreadCreate>
 800036a:	4603      	mov	r3, r0
 800036c:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <main+0x120>)
 800036e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkTask */
  osThreadDef(BlinkTask, StartBlinkTask, osPriorityNormal, 0, 128);
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <main+0x124>)
 8000372:	463c      	mov	r4, r7
 8000374:	461d      	mov	r5, r3
 8000376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800037a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800037e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkTaskHandle = osThreadCreate(osThread(BlinkTask), NULL);
 8000382:	463b      	mov	r3, r7
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 ff7b 	bl	8004282 <osThreadCreate>
 800038c:	4603      	mov	r3, r0
 800038e:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <main+0x128>)
 8000390:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000392:	f003 ff6f 	bl	8004274 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000396:	e7fe      	b.n	8000396 <main+0xfe>
 8000398:	20000818 	.word	0x20000818
 800039c:	20000840 	.word	0x20000840
 80003a0:	08006db8 	.word	0x08006db8
 80003a4:	08006dd0 	.word	0x08006dd0
 80003a8:	2000088c 	.word	0x2000088c
 80003ac:	08006df4 	.word	0x08006df4
 80003b0:	20000890 	.word	0x20000890
 80003b4:	08006e20 	.word	0x08006e20
 80003b8:	20000894 	.word	0x20000894
 80003bc:	08006e48 	.word	0x08006e48
 80003c0:	20000898 	.word	0x20000898

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b096      	sub	sp, #88	; 0x58
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	2244      	movs	r2, #68	; 0x44
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f006 fbfa 	bl	8006bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ea:	f001 fd75 	bl	8001ed8 <HAL_PWREx_ControlVoltageScaling>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f4:	f000 fc62 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003f8:	2310      	movs	r3, #16
 80003fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003fc:	2301      	movs	r3, #1
 80003fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000404:	2360      	movs	r3, #96	; 0x60
 8000406:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000408:	2302      	movs	r3, #2
 800040a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800040c:	2301      	movs	r3, #1
 800040e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000410:	2301      	movs	r3, #1
 8000412:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 45;
 8000414:	232d      	movs	r3, #45	; 0x2d
 8000416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000418:	2302      	movs	r3, #2
 800041a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800041c:	2302      	movs	r3, #2
 800041e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000420:	2302      	movs	r3, #2
 8000422:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4618      	mov	r0, r3
 800042a:	f001 fe09 	bl	8002040 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000434:	f000 fc42 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043c:	2303      	movs	r3, #3
 800043e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044e:	463b      	mov	r3, r7
 8000450:	2102      	movs	r1, #2
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fa0e 	bl	8002874 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800045e:	f000 fc2d 	bl	8000cbc <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3758      	adds	r7, #88	; 0x58
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <MX_CAN1_Init+0x60>)
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <MX_CAN1_Init+0x64>)
 8000474:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_CAN1_Init+0x60>)
 8000478:	2210      	movs	r2, #16
 800047a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <MX_CAN1_Init+0x60>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_CAN1_Init+0x60>)
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_CAN1_Init+0x60>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_CAN1_Init+0x60>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <MX_CAN1_Init+0x60>)
 8000496:	2200      	movs	r2, #0
 8000498:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_CAN1_Init+0x60>)
 800049c:	2200      	movs	r2, #0
 800049e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <MX_CAN1_Init+0x60>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_CAN1_Init+0x60>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <MX_CAN1_Init+0x60>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_CAN1_Init+0x60>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <MX_CAN1_Init+0x60>)
 80004ba:	f000 fdd7 	bl	800106c <HAL_CAN_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80004c4:	f000 fbfa 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000818 	.word	0x20000818
 80004d0:	40006400 	.word	0x40006400

080004d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08e      	sub	sp, #56	; 0x38
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	f107 031c 	add.w	r3, r7, #28
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000506:	4b2e      	ldr	r3, [pc, #184]	; (80005c0 <MX_TIM2_Init+0xec>)
 8000508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 800050e:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <MX_TIM2_Init+0xec>)
 8000510:	f240 3283 	movw	r2, #899	; 0x383
 8000514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <MX_TIM2_Init+0xec>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <MX_TIM2_Init+0xec>)
 800051e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000524:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <MX_TIM2_Init+0xec>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <MX_TIM2_Init+0xec>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000530:	4823      	ldr	r0, [pc, #140]	; (80005c0 <MX_TIM2_Init+0xec>)
 8000532:	f002 fc79 	bl	8002e28 <HAL_TIM_Base_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800053c:	f000 fbbe 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	4619      	mov	r1, r3
 800054c:	481c      	ldr	r0, [pc, #112]	; (80005c0 <MX_TIM2_Init+0xec>)
 800054e:	f003 f8b1 	bl	80036b4 <HAL_TIM_ConfigClockSource>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000558:	f000 fbb0 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800055c:	4818      	ldr	r0, [pc, #96]	; (80005c0 <MX_TIM2_Init+0xec>)
 800055e:	f002 fd2b 	bl	8002fb8 <HAL_TIM_PWM_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000568:	f000 fba8 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	4619      	mov	r1, r3
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <MX_TIM2_Init+0xec>)
 800057c:	f003 fdbc 	bl	80040f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000586:	f000 fb99 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800058a:	2360      	movs	r3, #96	; 0x60
 800058c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <MX_TIM2_Init+0xec>)
 80005a2:	f002 ff73 	bl	800348c <HAL_TIM_PWM_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80005ac:	f000 fb86 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <MX_TIM2_Init+0xec>)
 80005b2:	f000 fc1b 	bl	8000dec <HAL_TIM_MspPostInit>

}
 80005b6:	bf00      	nop
 80005b8:	3738      	adds	r7, #56	; 0x38
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000840 	.word	0x20000840

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b97      	ldr	r3, [pc, #604]	; (8000838 <MX_GPIO_Init+0x274>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a96      	ldr	r2, [pc, #600]	; (8000838 <MX_GPIO_Init+0x274>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b94      	ldr	r3, [pc, #592]	; (8000838 <MX_GPIO_Init+0x274>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	623b      	str	r3, [r7, #32]
 80005f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	4b91      	ldr	r3, [pc, #580]	; (8000838 <MX_GPIO_Init+0x274>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a90      	ldr	r2, [pc, #576]	; (8000838 <MX_GPIO_Init+0x274>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b8e      	ldr	r3, [pc, #568]	; (8000838 <MX_GPIO_Init+0x274>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b8b      	ldr	r3, [pc, #556]	; (8000838 <MX_GPIO_Init+0x274>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a8a      	ldr	r2, [pc, #552]	; (8000838 <MX_GPIO_Init+0x274>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b88      	ldr	r3, [pc, #544]	; (8000838 <MX_GPIO_Init+0x274>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b85      	ldr	r3, [pc, #532]	; (8000838 <MX_GPIO_Init+0x274>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a84      	ldr	r2, [pc, #528]	; (8000838 <MX_GPIO_Init+0x274>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b82      	ldr	r3, [pc, #520]	; (8000838 <MX_GPIO_Init+0x274>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063a:	4b7f      	ldr	r3, [pc, #508]	; (8000838 <MX_GPIO_Init+0x274>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a7e      	ldr	r2, [pc, #504]	; (8000838 <MX_GPIO_Init+0x274>)
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b7c      	ldr	r3, [pc, #496]	; (8000838 <MX_GPIO_Init+0x274>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0310 	and.w	r3, r3, #16
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b79      	ldr	r3, [pc, #484]	; (8000838 <MX_GPIO_Init+0x274>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a78      	ldr	r2, [pc, #480]	; (8000838 <MX_GPIO_Init+0x274>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b76      	ldr	r3, [pc, #472]	; (8000838 <MX_GPIO_Init+0x274>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b73      	ldr	r3, [pc, #460]	; (8000838 <MX_GPIO_Init+0x274>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a72      	ldr	r2, [pc, #456]	; (8000838 <MX_GPIO_Init+0x274>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b70      	ldr	r3, [pc, #448]	; (8000838 <MX_GPIO_Init+0x274>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	4b6d      	ldr	r3, [pc, #436]	; (8000838 <MX_GPIO_Init+0x274>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a6c      	ldr	r2, [pc, #432]	; (8000838 <MX_GPIO_Init+0x274>)
 8000688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b6a      	ldr	r3, [pc, #424]	; (8000838 <MX_GPIO_Init+0x274>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800069a:	f001 fcc1 	bl	8002020 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006a4:	4865      	ldr	r0, [pc, #404]	; (800083c <MX_GPIO_Init+0x278>)
 80006a6:	f001 fbdf 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4863      	ldr	r0, [pc, #396]	; (8000840 <MX_GPIO_Init+0x27c>)
 80006b2:	f001 fbd9 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006bc:	4861      	ldr	r0, [pc, #388]	; (8000844 <MX_GPIO_Init+0x280>)
 80006be:	f001 fbd3 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	4860      	ldr	r0, [pc, #384]	; (8000848 <MX_GPIO_Init+0x284>)
 80006c8:	f001 fbce 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e0:	4619      	mov	r1, r3
 80006e2:	485a      	ldr	r0, [pc, #360]	; (800084c <MX_GPIO_Init+0x288>)
 80006e4:	f001 fa16 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e8:	2308      	movs	r3, #8
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f8:	4619      	mov	r1, r3
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fe:	f001 fa09 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000702:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000718:	4619      	mov	r1, r3
 800071a:	4848      	ldr	r0, [pc, #288]	; (800083c <MX_GPIO_Init+0x278>)
 800071c:	f001 f9fa 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000736:	4619      	mov	r1, r3
 8000738:	4841      	ldr	r0, [pc, #260]	; (8000840 <MX_GPIO_Init+0x27c>)
 800073a:	f001 f9eb 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800073e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	483b      	ldr	r0, [pc, #236]	; (8000840 <MX_GPIO_Init+0x27c>)
 8000754:	f001 f9de 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000758:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	4834      	ldr	r0, [pc, #208]	; (8000844 <MX_GPIO_Init+0x280>)
 8000772:	f001 f9cf 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000788:	2307      	movs	r3, #7
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	4619      	mov	r1, r3
 8000792:	482f      	ldr	r0, [pc, #188]	; (8000850 <MX_GPIO_Init+0x28c>)
 8000794:	f001 f9be 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000798:	2320      	movs	r3, #32
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <MX_GPIO_Init+0x284>)
 80007ac:	f001 f9b2 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	4820      	ldr	r0, [pc, #128]	; (8000848 <MX_GPIO_Init+0x284>)
 80007c8:	f001 f9a4 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80007cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80007de:	2308      	movs	r3, #8
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	4619      	mov	r1, r3
 80007e8:	4817      	ldr	r0, [pc, #92]	; (8000848 <MX_GPIO_Init+0x284>)
 80007ea:	f001 f993 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007ee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000800:	230a      	movs	r3, #10
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f001 f981 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000824:	4619      	mov	r1, r3
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f001 f973 	bl	8001b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	3738      	adds	r7, #56	; 0x38
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	48001400 	.word	0x48001400
 8000840:	48001000 	.word	0x48001000
 8000844:	48000400 	.word	0x48000400
 8000848:	48001800 	.word	0x48001800
 800084c:	48000800 	.word	0x48000800
 8000850:	48000c00 	.word	0x48000c00

08000854 <SPI_init_device1>:
 *
 * SPI_init(uint8_t deviceNr) -- selects the right device according to the parameter
 * SPI_stop(uint8_t deviceNr) -- disables the right device according to the parameter
*/
void SPI_init_device1()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <SPI_init_device1+0x20>)
 8000860:	f001 fb02 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086a:	4802      	ldr	r0, [pc, #8]	; (8000874 <SPI_init_device1+0x20>)
 800086c:	f001 fafc 	bl	8001e68 <HAL_GPIO_WritePin>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	48001400 	.word	0x48001400

08000878 <SPI_stop_device1>:


void SPI_stop_device1()
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000882:	4808      	ldr	r0, [pc, #32]	; (80008a4 <SPI_stop_device1+0x2c>)
 8000884:	f001 faf0 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <SPI_stop_device1+0x30>)
 8000890:	f001 faea 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	4802      	ldr	r0, [pc, #8]	; (80008a4 <SPI_stop_device1+0x2c>)
 800089c:	f001 fae4 	bl	8001e68 <HAL_GPIO_WritePin>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	48001000 	.word	0x48001000
 80008a8:	48001400 	.word	0x48001400

080008ac <SPI_init_device2>:


void SPI_init_device2()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <SPI_init_device2+0x20>)
 80008b8:	f001 fad6 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4802      	ldr	r0, [pc, #8]	; (80008cc <SPI_init_device2+0x20>)
 80008c4:	f001 fad0 	bl	8001e68 <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	48001400 	.word	0x48001400

080008d0 <SPI_stop_device2>:


void SPI_stop_device2()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <SPI_stop_device2+0x2c>)
 80008dc:	f001 fac4 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <SPI_stop_device2+0x30>)
 80008e8:	f001 fabe 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f2:	4802      	ldr	r0, [pc, #8]	; (80008fc <SPI_stop_device2+0x2c>)
 80008f4:	f001 fab8 	bl	8001e68 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	48001000 	.word	0x48001000
 8000900:	48001400 	.word	0x48001400

08000904 <SPI_init>:

void SPI_init(uint8_t deviceNr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	if(deviceNr == 1)
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d102      	bne.n	800091a <SPI_init+0x16>
	{
		SPI_init_device1();
 8000914:	f7ff ff9e 	bl	8000854 <SPI_init_device1>
	}
	else
	{
		SPI_init_device2();
	}
}
 8000918:	e001      	b.n	800091e <SPI_init+0x1a>
		SPI_init_device2();
 800091a:	f7ff ffc7 	bl	80008ac <SPI_init_device2>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <SPI_stop>:

void SPI_stop(uint8_t deviceNr)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
	if(deviceNr == 1)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d102      	bne.n	800093c <SPI_stop+0x16>
	{
		SPI_stop_device1();
 8000936:	f7ff ff9f 	bl	8000878 <SPI_stop_device1>
	}
	else
	{
		SPI_stop_device2();
	}
}
 800093a:	e001      	b.n	8000940 <SPI_stop+0x1a>
		SPI_stop_device2();
 800093c:	f7ff ffc8 	bl	80008d0 <SPI_stop_device2>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <SPI_writeBit>:
 *
 * void SPI_writeData(uint16_t *data, uint8_t dataSize, uint8_t deviceNr)
 * 		-- loops through every word in the data array
*/
void SPI_writeBit(uint16_t bit)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	480e      	ldr	r0, [pc, #56]	; (8000994 <SPI_writeBit+0x4c>)
 800095a:	f001 fa85 	bl	8001e68 <HAL_GPIO_WritePin>
	if(bit == 0)
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d106      	bne.n	8000972 <SPI_writeBit+0x2a>
	{
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096a:	480b      	ldr	r0, [pc, #44]	; (8000998 <SPI_writeBit+0x50>)
 800096c:	f001 fa7c 	bl	8001e68 <HAL_GPIO_WritePin>
 8000970:	e005      	b.n	800097e <SPI_writeBit+0x36>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <SPI_writeBit+0x50>)
 800097a:	f001 fa75 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <SPI_writeBit+0x4c>)
 8000986:	f001 fa6f 	bl	8001e68 <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	48001000 	.word	0x48001000
 8000998:	48001400 	.word	0x48001400

0800099c <SPI_writeWord>:

void SPI_writeWord(uint16_t word,uint8_t deviceNr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	460a      	mov	r2, r1
 80009a6:	80fb      	strh	r3, [r7, #6]
 80009a8:	4613      	mov	r3, r2
 80009aa:	717b      	strb	r3, [r7, #5]
	SPI_init(deviceNr);
 80009ac:	797b      	ldrb	r3, [r7, #5]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffa8 	bl	8000904 <SPI_init>
	for(uint8_t i=0; i<16 ; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e00b      	b.n	80009d2 <SPI_writeWord+0x36>
	{
		SPI_writeBit((word & (1<<15)) >> 15);
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	0bdb      	lsrs	r3, r3, #15
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ffc1 	bl	8000948 <SPI_writeBit>
		word <<= 1;
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i<16 ; i++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d9f0      	bls.n	80009ba <SPI_writeWord+0x1e>
	}
	SPI_stop(deviceNr);
 80009d8:	797b      	ldrb	r3, [r7, #5]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ffa3 	bl	8000926 <SPI_stop>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SPI_writeData>:

void SPI_writeData(uint16_t *data, uint8_t dataSize, uint8_t deviceNr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
 80009f4:	4613      	mov	r3, r2
 80009f6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i=0; i<dataSize ; i++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e00c      	b.n	8000a18 <SPI_writeData+0x30>
	{
		SPI_writeWord(data[i], deviceNr);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	78ba      	ldrb	r2, [r7, #2]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffc5 	bl	800099c <SPI_writeWord>
	for(uint8_t i=0; i<dataSize ; i++)
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	3301      	adds	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	7bfa      	ldrb	r2, [r7, #15]
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d3ee      	bcc.n	80009fe <SPI_writeData+0x16>
	}
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <SPI_draw>:
 *
 * char (*numberSelect(int nr))
 * 		-- returns the array corresponding to the given number
*/
void SPI_draw(char img[8], uint8_t deviceNr)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70fb      	strb	r3, [r7, #3]
	uint16_t displayWord = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	817b      	strh	r3, [r7, #10]

	for (int i=1;i<9;i++)
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e016      	b.n	8000a6e <SPI_draw+0x44>
	{
		displayWord = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	817b      	strh	r3, [r7, #10]
		displayWord = (i<<8) | img[i-1];
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	440b      	add	r3, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	817b      	strh	r3, [r7, #10]
		SPI_writeWord(displayWord,deviceNr);
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	897b      	ldrh	r3, [r7, #10]
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff9a 	bl	800099c <SPI_writeWord>
	for (int i=1;i<9;i++)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	dde5      	ble.n	8000a40 <SPI_draw+0x16>
	}
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <SPI_draw_numbers>:

void SPI_draw_numbers()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

	if(seconds>9)
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <SPI_draw_numbers+0x78>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b09      	cmp	r3, #9
 8000a8a:	dd25      	ble.n	8000ad8 <SPI_draw_numbers+0x58>
		{
			SPI_draw(numberSelect(seconds%10),1);
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <SPI_draw_numbers+0x78>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <SPI_draw_numbers+0x7c>)
 8000a92:	fb83 1302 	smull	r1, r3, r3, r2
 8000a96:	1099      	asrs	r1, r3, #2
 8000a98:	17d3      	asrs	r3, r2, #31
 8000a9a:	1ac9      	subs	r1, r1, r3
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	1ad1      	subs	r1, r2, r3
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	f000 f82c 	bl	8000b04 <numberSelect>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffba 	bl	8000a2a <SPI_draw>
			SPI_draw(numberSelect(seconds/10),2);
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <SPI_draw_numbers+0x78>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <SPI_draw_numbers+0x7c>)
 8000abc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac0:	1092      	asrs	r2, r2, #2
 8000ac2:	17db      	asrs	r3, r3, #31
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f81c 	bl	8000b04 <numberSelect>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ffaa 	bl	8000a2a <SPI_draw>
		{
			SPI_draw(numberSelect(seconds),1);
			SPI_draw(zero,2);
		}

}
 8000ad6:	e00d      	b.n	8000af4 <SPI_draw_numbers+0x74>
			SPI_draw(numberSelect(seconds),1);
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <SPI_draw_numbers+0x78>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f811 	bl	8000b04 <numberSelect>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff9f 	bl	8000a2a <SPI_draw>
			SPI_draw(zero,2);
 8000aec:	2102      	movs	r1, #2
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <SPI_draw_numbers+0x80>)
 8000af0:	f7ff ff9b 	bl	8000a2a <SPI_draw>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	66666667 	.word	0x66666667
 8000b00:	20000004 	.word	0x20000004

08000b04 <numberSelect>:

char (*numberSelect(int nr))
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	switch (nr)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b09      	cmp	r3, #9
 8000b10:	d82a      	bhi.n	8000b68 <numberSelect+0x64>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <numberSelect+0x14>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b41 	.word	0x08000b41
 8000b1c:	08000b45 	.word	0x08000b45
 8000b20:	08000b49 	.word	0x08000b49
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000b51 	.word	0x08000b51
 8000b2c:	08000b55 	.word	0x08000b55
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	08000b5d 	.word	0x08000b5d
 8000b38:	08000b61 	.word	0x08000b61
 8000b3c:	08000b65 	.word	0x08000b65
	  {
	  case 0:
	  return zero;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <numberSelect+0x74>)
 8000b42:	e012      	b.n	8000b6a <numberSelect+0x66>
	  case 1:
	  return one;
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <numberSelect+0x78>)
 8000b46:	e010      	b.n	8000b6a <numberSelect+0x66>
	  case 2:
	  return two;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <numberSelect+0x7c>)
 8000b4a:	e00e      	b.n	8000b6a <numberSelect+0x66>
	  case 3:
	  return three;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <numberSelect+0x80>)
 8000b4e:	e00c      	b.n	8000b6a <numberSelect+0x66>
	  case 4:
	  return four;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <numberSelect+0x84>)
 8000b52:	e00a      	b.n	8000b6a <numberSelect+0x66>
	  case 5:
	  return five;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <numberSelect+0x88>)
 8000b56:	e008      	b.n	8000b6a <numberSelect+0x66>
	  case 6:
	  return six;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <numberSelect+0x8c>)
 8000b5a:	e006      	b.n	8000b6a <numberSelect+0x66>
	  case 7:
	  return seven;
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <numberSelect+0x90>)
 8000b5e:	e004      	b.n	8000b6a <numberSelect+0x66>
	  case 8:
	  return eight;
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <numberSelect+0x94>)
 8000b62:	e002      	b.n	8000b6a <numberSelect+0x66>
	  case 9:
	  return nine;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <numberSelect+0x98>)
 8000b66:	e000      	b.n	8000b6a <numberSelect+0x66>

	  default:
	  return Skull;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <numberSelect+0x9c>)
	  }
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	2000000c 	.word	0x2000000c
 8000b80:	20000014 	.word	0x20000014
 8000b84:	2000001c 	.word	0x2000001c
 8000b88:	20000024 	.word	0x20000024
 8000b8c:	2000002c 	.word	0x2000002c
 8000b90:	20000034 	.word	0x20000034
 8000b94:	2000003c 	.word	0x2000003c
 8000b98:	20000044 	.word	0x20000044
 8000b9c:	2000004c 	.word	0x2000004c
 8000ba0:	20000054 	.word	0x20000054

08000ba4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Counter and display function*/
  for(;;)
  {
    osDelay(1000);
 8000bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb0:	f003 fbb3 	bl	800431a <osDelay>
    SPI_draw_numbers();
 8000bb4:	f7ff ff64 	bl	8000a80 <SPI_draw_numbers>
    seconds--;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <StartDefaultTask+0x30>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <StartDefaultTask+0x30>)
 8000bc0:	6013      	str	r3, [r2, #0]

    if(seconds < 0)
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <StartDefaultTask+0x30>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	daf0      	bge.n	8000bac <StartDefaultTask+0x8>
    {
    	seconds = 20;
 8000bca:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <StartDefaultTask+0x30>)
 8000bcc:	2214      	movs	r2, #20
 8000bce:	601a      	str	r2, [r3, #0]
    osDelay(1000);
 8000bd0:	e7ec      	b.n	8000bac <StartDefaultTask+0x8>
 8000bd2:	bf00      	nop
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  for(;;)
  {
	//Change the width of the PWM to reposition the servo
	  if(seconds ==0 || seconds < 0)
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <StartTask02+0x34>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <StartTask02+0x18>
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <StartTask02+0x34>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	daf7      	bge.n	8000be0 <StartTask02+0x8>
	  {
		  htim2.Instance->CCR1 = 100;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <StartTask02+0x38>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2264      	movs	r2, #100	; 0x64
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
		  osDelay(1000);
 8000bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfc:	f003 fb8d 	bl	800431a <osDelay>
		  htim2.Instance->CCR1 = 50;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <StartTask02+0x38>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2232      	movs	r2, #50	; 0x32
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
	  if(seconds ==0 || seconds < 0)
 8000c08:	e7ea      	b.n	8000be0 <StartTask02+0x8>
 8000c0a:	bf00      	nop
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000840 	.word	0x20000840

08000c14 <StartResetBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResetBtnTask */
void StartResetBtnTask(void const * argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResetBtnTask */
  /* Infinite loop */
  for(;;)
  {
	  btnValue = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3);
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f001 f909 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <StartResetBtnTask+0x44>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	 	  if(btnValue != lastBtnValue && btnValue == 1)
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <StartResetBtnTask+0x44>)
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <StartResetBtnTask+0x48>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d009      	beq.n	8000c4e <StartResetBtnTask+0x3a>
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <StartResetBtnTask+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <StartResetBtnTask+0x3a>
	 	  {
	 		  seconds = 20;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <StartResetBtnTask+0x4c>)
 8000c44:	2214      	movs	r2, #20
 8000c46:	601a      	str	r2, [r3, #0]
	 	  	  osDelay(200);
 8000c48:	20c8      	movs	r0, #200	; 0xc8
 8000c4a:	f003 fb66 	bl	800431a <osDelay>
	 	  }
	 	  lastBtnValue = btnValue;
 8000c4e:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <StartResetBtnTask+0x44>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b02      	ldr	r3, [pc, #8]	; (8000c5c <StartResetBtnTask+0x48>)
 8000c54:	701a      	strb	r2, [r3, #0]
	  btnValue = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3);
 8000c56:	e7e1      	b.n	8000c1c <StartResetBtnTask+0x8>
 8000c58:	2000089c 	.word	0x2000089c
 8000c5c:	2000089d 	.word	0x2000089d
 8000c60:	20000000 	.word	0x20000000

08000c64 <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void const * argument)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <StartBlinkTask+0x30>)
 8000c74:	f001 f8f8 	bl	8001e68 <HAL_GPIO_WritePin>
	  osDelay(10);
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f003 fb4e 	bl	800431a <osDelay>
	  HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <StartBlinkTask+0x30>)
 8000c86:	f001 f8ef 	bl	8001e68 <HAL_GPIO_WritePin>
	  osDelay(1990);
 8000c8a:	f240 70c6 	movw	r0, #1990	; 0x7c6
 8000c8e:	f003 fb44 	bl	800431a <osDelay>
	  HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000c92:	e7eb      	b.n	8000c6c <StartBlinkTask+0x8>
 8000c94:	48001400 	.word	0x48001400

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 f9bf 	bl	800102c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40012c00 	.word	0x40012c00

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_MspInit+0x4c>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	210f      	movs	r1, #15
 8000d02:	f06f 0001 	mvn.w	r0, #1
 8000d06:	f000 fedb 	bl	8001ac0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <HAL_CAN_MspInit+0x8c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12f      	bne.n	8000d9a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_CAN_MspInit+0x90>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a1a      	ldr	r2, [pc, #104]	; (8000da8 <HAL_CAN_MspInit+0x90>)
 8000d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_CAN_MspInit+0x90>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_CAN_MspInit+0x90>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_CAN_MspInit+0x90>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_CAN_MspInit+0x90>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <HAL_CAN_MspInit+0x94>)
 8000d86:	f000 fec5 	bl	8001b14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	2014      	movs	r0, #20
 8000d90:	f000 fe96 	bl	8001ac0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d94:	2014      	movs	r0, #20
 8000d96:	f000 feaf 	bl	8001af8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40006400 	.word	0x40006400
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000c00 	.word	0x48000c00

08000db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc0:	d10b      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_TIM_Base_MspInit+0x38>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_TIM_Base_MspInit+0x38>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_TIM_Base_MspInit+0x38>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e0c:	d11c      	bne.n	8000e48 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_TIM_MspPostInit+0x64>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_TIM_MspPostInit+0x64>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_TIM_MspPostInit+0x64>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f000 fe66 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <HAL_InitTick+0xc8>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <HAL_InitTick+0xc8>)
 8000e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_InitTick+0xc8>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7a:	f107 020c 	add.w	r2, r7, #12
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fedd 	bl	8002c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e8a:	f001 fec5 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8000e8e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e92:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_InitTick+0xcc>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	0c9b      	lsrs	r3, r3, #18
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_InitTick+0xd0>)
 8000ea0:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <HAL_InitTick+0xd4>)
 8000ea2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_InitTick+0xd0>)
 8000ea6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eaa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_InitTick+0xd0>)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_InitTick+0xd0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_InitTick+0xd0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_InitTick+0xd0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ec4:	4817      	ldr	r0, [pc, #92]	; (8000f24 <HAL_InitTick+0xd0>)
 8000ec6:	f001 ffaf 	bl	8002e28 <HAL_TIM_Base_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d11b      	bne.n	8000f10 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <HAL_InitTick+0xd0>)
 8000eda:	f001 fffd 	bl	8002ed8 <HAL_TIM_Base_Start_IT>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d111      	bne.n	8000f10 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000eec:	2019      	movs	r0, #25
 8000eee:	f000 fe03 	bl	8001af8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d808      	bhi.n	8000f0a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	2019      	movs	r0, #25
 8000efe:	f000 fddf 	bl	8001ac0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_InitTick+0xd8>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e002      	b.n	8000f10 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3730      	adds	r7, #48	; 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	431bde83 	.word	0x431bde83
 8000f24:	200008c4 	.word	0x200008c4
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	20000060 	.word	0x20000060

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <CAN1_RX0_IRQHandler+0x10>)
 8000f62:	f000 fac6 	bl	80014f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000818 	.word	0x20000818

08000f70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f76:	f002 f987 	bl	8003288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200008c4 	.word	0x200008c4

08000f84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fac:	f7ff ffea 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f005 fe57 	bl	8006c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fda:	f7ff f95d 	bl	8000298 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8000fec:	08006ecc 	.word	0x08006ecc
  ldr r2, =_sbss
 8000ff0:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8000ff4:	2000189c 	.word	0x2000189c

08000ff8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_IRQHandler>

08000ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 fd50 	bl	8001aaa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	200f      	movs	r0, #15
 800100c:	f7ff ff22 	bl	8000e54 <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101c:	f7ff fe54 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001020:	79fb      	ldrb	r3, [r7, #7]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000064 	.word	0x20000064
 8001050:	20000910 	.word	0x20000910

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000910 	.word	0x20000910

0800106c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0ed      	b.n	800125a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff fe44 	bl	8000d18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a0:	f7ff ffd8 	bl	8001054 <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a6:	e012      	b.n	80010ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a8:	f7ff ffd4 	bl	8001054 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b0a      	cmp	r3, #10
 80010b4:	d90b      	bls.n	80010ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2205      	movs	r2, #5
 80010c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e0c5      	b.n	800125a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0e5      	beq.n	80010a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0202 	bic.w	r2, r2, #2
 80010ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ec:	f7ff ffb2 	bl	8001054 <HAL_GetTick>
 80010f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f2:	e012      	b.n	800111a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f4:	f7ff ffae 	bl	8001054 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b0a      	cmp	r3, #10
 8001100:	d90b      	bls.n	800111a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2205      	movs	r2, #5
 8001112:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e09f      	b.n	800125a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1e5      	bne.n	80010f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7e1b      	ldrb	r3, [r3, #24]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e007      	b.n	8001152 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7e5b      	ldrb	r3, [r3, #25]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d108      	bne.n	800116c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	e007      	b.n	800117c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7e9b      	ldrb	r3, [r3, #26]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0220 	orr.w	r2, r2, #32
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e007      	b.n	80011a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0220 	bic.w	r2, r2, #32
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7edb      	ldrb	r3, [r3, #27]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d108      	bne.n	80011c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0210 	bic.w	r2, r2, #16
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e007      	b.n	80011d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0210 	orr.w	r2, r2, #16
 80011ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7f1b      	ldrb	r3, [r3, #28]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d108      	bne.n	80011ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0208 	orr.w	r2, r2, #8
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e007      	b.n	80011fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0208 	bic.w	r2, r2, #8
 80011f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7f5b      	ldrb	r3, [r3, #29]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d108      	bne.n	8001214 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0204 	orr.w	r2, r2, #4
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e007      	b.n	8001224 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0204 	bic.w	r2, r2, #4
 8001222:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	ea42 0103 	orr.w	r1, r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001262:	b480      	push	{r7}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001276:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d003      	beq.n	8001286 <HAL_CAN_GetRxMessage+0x24>
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	2b02      	cmp	r3, #2
 8001282:	f040 8103 	bne.w	800148c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10e      	bne.n	80012aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0f7      	b.n	800149a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0e8      	b.n	800149a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	331b      	adds	r3, #27
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0204 	and.w	r2, r3, #4
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	331b      	adds	r3, #27
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0d5b      	lsrs	r3, r3, #21
 80012f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	331b      	adds	r3, #27
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	331b      	adds	r3, #27
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0202 	and.w	r2, r3, #2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	331b      	adds	r3, #27
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2208      	movs	r2, #8
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	e00b      	b.n	8001366 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	331b      	adds	r3, #27
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	3304      	adds	r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 020f 	and.w	r2, r3, #15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	331b      	adds	r3, #27
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	331b      	adds	r3, #27
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	3304      	adds	r3, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	b29a      	uxth	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0a1a      	lsrs	r2, r3, #8
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	0c1a      	lsrs	r2, r3, #16
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3302      	adds	r3, #2
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0e1a      	lsrs	r2, r3, #24
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3303      	adds	r3, #3
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0a1a      	lsrs	r2, r3, #8
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3305      	adds	r3, #5
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0c1a      	lsrs	r2, r3, #16
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3306      	adds	r3, #6
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	0e1a      	lsrs	r2, r3, #24
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3307      	adds	r3, #7
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0220 	orr.w	r2, r2, #32
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	e007      	b.n	8001488 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0220 	orr.w	r2, r2, #32
 8001486:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e006      	b.n	800149a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b085      	sub	sp, #20
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d002      	beq.n	80014c4 <HAL_CAN_ActivateNotification+0x1e>
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d109      	bne.n	80014d8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6959      	ldr	r1, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e006      	b.n	80014e6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b08a      	sub	sp, #40	; 0x28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d07c      	beq.n	8001632 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d023      	beq.n	800158a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f983 	bl	8001860 <HAL_CAN_TxMailbox0CompleteCallback>
 800155a:	e016      	b.n	800158a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e00c      	b.n	800158a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	e002      	b.n	800158a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f989 	bl	800189c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d024      	beq.n	80015de <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f963 	bl	8001874 <HAL_CAN_TxMailbox1CompleteCallback>
 80015ae:	e016      	b.n	80015de <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e00c      	b.n	80015de <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	e002      	b.n	80015de <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f969 	bl	80018b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d024      	beq.n	8001632 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f943 	bl	8001888 <HAL_CAN_TxMailbox2CompleteCallback>
 8001602:	e016      	b.n	8001632 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e00c      	b.n	8001632 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
 800162a:	e002      	b.n	8001632 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f949 	bl	80018c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00c      	beq.n	8001656 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2210      	movs	r2, #16
 8001654:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00b      	beq.n	8001678 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2208      	movs	r2, #8
 8001670:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f930 	bl	80018d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7fe fde9 	bl	8000268 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00c      	beq.n	80016ba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2210      	movs	r2, #16
 80016b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2208      	movs	r2, #8
 80016d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f912 	bl	8001900 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f8f9 	bl	80018ec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2210      	movs	r2, #16
 8001714:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f8fc 	bl	8001914 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2208      	movs	r2, #8
 8001736:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8f5 	bl	8001928 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d07b      	beq.n	8001840 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d072      	beq.n	8001838 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d043      	beq.n	8001838 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d03e      	beq.n	8001838 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017c0:	2b60      	cmp	r3, #96	; 0x60
 80017c2:	d02b      	beq.n	800181c <HAL_CAN_IRQHandler+0x32a>
 80017c4:	2b60      	cmp	r3, #96	; 0x60
 80017c6:	d82e      	bhi.n	8001826 <HAL_CAN_IRQHandler+0x334>
 80017c8:	2b50      	cmp	r3, #80	; 0x50
 80017ca:	d022      	beq.n	8001812 <HAL_CAN_IRQHandler+0x320>
 80017cc:	2b50      	cmp	r3, #80	; 0x50
 80017ce:	d82a      	bhi.n	8001826 <HAL_CAN_IRQHandler+0x334>
 80017d0:	2b40      	cmp	r3, #64	; 0x40
 80017d2:	d019      	beq.n	8001808 <HAL_CAN_IRQHandler+0x316>
 80017d4:	2b40      	cmp	r3, #64	; 0x40
 80017d6:	d826      	bhi.n	8001826 <HAL_CAN_IRQHandler+0x334>
 80017d8:	2b30      	cmp	r3, #48	; 0x30
 80017da:	d010      	beq.n	80017fe <HAL_CAN_IRQHandler+0x30c>
 80017dc:	2b30      	cmp	r3, #48	; 0x30
 80017de:	d822      	bhi.n	8001826 <HAL_CAN_IRQHandler+0x334>
 80017e0:	2b10      	cmp	r3, #16
 80017e2:	d002      	beq.n	80017ea <HAL_CAN_IRQHandler+0x2f8>
 80017e4:	2b20      	cmp	r3, #32
 80017e6:	d005      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017e8:	e01d      	b.n	8001826 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f2:	e019      	b.n	8001828 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017fc:	e014      	b.n	8001828 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	f043 0320 	orr.w	r3, r3, #32
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001806:	e00f      	b.n	8001828 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001810:	e00a      	b.n	8001828 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800181a:	e005      	b.n	8001828 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001824:	e000      	b.n	8001828 <HAL_CAN_IRQHandler+0x336>
            break;
 8001826:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001836:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2204      	movs	r2, #4
 800183e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f872 	bl	800193c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff4c 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad2:	f7ff ff61 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001ad6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	6978      	ldr	r0, [r7, #20]
 8001ade:	f7ff ffb1 	bl	8001a44 <NVIC_EncodePriority>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff80 	bl	80019f0 <__NVIC_SetPriority>
}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff54 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	e166      	b.n	8001df2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8158 	beq.w	8001dec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d005      	beq.n	8001b54 <HAL_GPIO_Init+0x40>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d130      	bne.n	8001bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 0201 	and.w	r2, r3, #1
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d017      	beq.n	8001bf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d123      	bne.n	8001c46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	6939      	ldr	r1, [r7, #16]
 8001c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0203 	and.w	r2, r3, #3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80b2 	beq.w	8001dec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c88:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	4a60      	ldr	r2, [pc, #384]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6613      	str	r3, [r2, #96]	; 0x60
 8001c94:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ca0:	4a5c      	ldr	r2, [pc, #368]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cca:	d02b      	beq.n	8001d24 <HAL_GPIO_Init+0x210>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d025      	beq.n	8001d20 <HAL_GPIO_Init+0x20c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a51      	ldr	r2, [pc, #324]	; (8001e1c <HAL_GPIO_Init+0x308>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d01f      	beq.n	8001d1c <HAL_GPIO_Init+0x208>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a50      	ldr	r2, [pc, #320]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d019      	beq.n	8001d18 <HAL_GPIO_Init+0x204>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_GPIO_Init+0x310>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d013      	beq.n	8001d14 <HAL_GPIO_Init+0x200>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a4e      	ldr	r2, [pc, #312]	; (8001e28 <HAL_GPIO_Init+0x314>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00d      	beq.n	8001d10 <HAL_GPIO_Init+0x1fc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a4d      	ldr	r2, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x318>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d007      	beq.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x31c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_GPIO_Init+0x1f4>
 8001d04:	2307      	movs	r3, #7
 8001d06:	e00e      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d08:	2308      	movs	r3, #8
 8001d0a:	e00c      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	e00a      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d10:	2305      	movs	r3, #5
 8001d12:	e008      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d14:	2304      	movs	r3, #4
 8001d16:	e006      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e004      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d24:	2300      	movs	r3, #0
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d36:	4937      	ldr	r1, [pc, #220]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d44:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d68:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f ae91 	bne.w	8001b24 <HAL_GPIO_Init+0x10>
  }
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	48000800 	.word	0x48000800
 8001e20:	48000c00 	.word	0x48000c00
 8001e24:	48001000 	.word	0x48001000
 8001e28:	48001400 	.word	0x48001400
 8001e2c:	48001800 	.word	0x48001800
 8001e30:	48001c00 	.word	0x48001c00
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea8:	d102      	bne.n	8001eb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eae:	e00b      	b.n	8001ec8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebe:	d102      	bne.n	8001ec6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	e000      	b.n	8001ec8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ec6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d141      	bne.n	8001f6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d131      	bne.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ef4:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001efa:	4a46      	ldr	r2, [pc, #280]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f0c:	4a41      	ldr	r2, [pc, #260]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f14:	4b40      	ldr	r3, [pc, #256]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2232      	movs	r2, #50	; 0x32
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a3f      	ldr	r2, [pc, #252]	; (800201c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f2a:	e002      	b.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d102      	bne.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f2      	bne.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f46:	4b33      	ldr	r3, [pc, #204]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d158      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e057      	b.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f68:	e04d      	b.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f70:	d141      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d131      	bne.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f86:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f98:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2232      	movs	r2, #50	; 0x32
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	0c9b      	lsrs	r3, r3, #18
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb6:	e002      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d102      	bne.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f2      	bne.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fde:	d112      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e011      	b.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ff4:	e007      	b.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002004:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40007000 	.word	0x40007000
 8002018:	2000005c 	.word	0x2000005c
 800201c:	431bde83 	.word	0x431bde83

08002020 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_PWREx_EnableVddIO2+0x1c>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202e:	6053      	str	r3, [r2, #4]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000

08002040 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f000 bc08 	b.w	8002864 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002054:	4b96      	ldr	r3, [pc, #600]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205e:	4b94      	ldr	r3, [pc, #592]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80e4 	beq.w	800223e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_RCC_OscConfig+0x4c>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	f040 808b 	bne.w	800219a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	f040 8087 	bne.w	800219a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x64>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e3df      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_RCC_OscConfig+0x7e>
 80020b4:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	e005      	b.n	80020ca <HAL_RCC_OscConfig+0x8a>
 80020be:	4b7c      	ldr	r3, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d223      	bcs.n	8002116 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fde8 	bl	8002ca8 <RCC_SetFlashLatencyFromMSIRange>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e3c0      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e2:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a72      	ldr	r2, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b70      	ldr	r3, [pc, #448]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	496d      	ldr	r1, [pc, #436]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002100:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	4968      	ldr	r1, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e025      	b.n	8002162 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002116:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4960      	ldr	r1, [pc, #384]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002134:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	495b      	ldr	r1, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fda8 	bl	8002ca8 <RCC_SetFlashLatencyFromMSIRange>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e380      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002162:	f000 fcc1 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	4950      	ldr	r1, [pc, #320]	; (80022b4 <HAL_RCC_OscConfig+0x274>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a4e      	ldr	r2, [pc, #312]	; (80022b8 <HAL_RCC_OscConfig+0x278>)
 8002180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002182:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fe64 	bl	8000e54 <HAL_InitTick>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d052      	beq.n	800223c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	e364      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d032      	beq.n	8002208 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a42      	ldr	r2, [pc, #264]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ae:	f7fe ff51 	bl	8001054 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b6:	f7fe ff4d 	bl	8001054 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e34d      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4930      	ldr	r1, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	492b      	ldr	r1, [pc, #172]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
 8002206:	e01a      	b.n	800223e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002214:	f7fe ff1e 	bl	8001054 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221c:	f7fe ff1a 	bl	8001054 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e31a      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x1dc>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d073      	beq.n	8002332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x21c>
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d10e      	bne.n	8002274 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d10b      	bne.n	8002274 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d063      	beq.n	8002330 <HAL_RCC_OscConfig+0x2f0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d15f      	bne.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e2f7      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d106      	bne.n	800228c <HAL_RCC_OscConfig+0x24c>
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e025      	b.n	80022d8 <HAL_RCC_OscConfig+0x298>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002294:	d114      	bne.n	80022c0 <HAL_RCC_OscConfig+0x280>
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a02      	ldr	r2, [pc, #8]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e013      	b.n	80022d8 <HAL_RCC_OscConfig+0x298>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08006e7c 	.word	0x08006e7c
 80022b8:	2000005c 	.word	0x2000005c
 80022bc:	20000060 	.word	0x20000060
 80022c0:	4ba0      	ldr	r3, [pc, #640]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a9f      	ldr	r2, [pc, #636]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b9d      	ldr	r3, [pc, #628]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a9c      	ldr	r2, [pc, #624]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe feb8 	bl	8001054 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe feb4 	bl	8001054 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e2b4      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fa:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2a8>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fea4 	bl	8001054 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fea0 	bl	8001054 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e2a0      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002322:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d0>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d060      	beq.n	8002400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x310>
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d119      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d116      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	4b7c      	ldr	r3, [pc, #496]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x328>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e27d      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4973      	ldr	r1, [pc, #460]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	e040      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d023      	beq.n	80023ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fe5f 	bl	8001054 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fe5b 	bl	8001054 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e25b      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b62      	ldr	r3, [pc, #392]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	495f      	ldr	r1, [pc, #380]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	e018      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a5c      	ldr	r2, [pc, #368]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe fe3b 	bl	8001054 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fe37 	bl	8001054 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e237      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03c      	beq.n	8002486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01c      	beq.n	800244e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002414:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241a:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe fe16 	bl	8001054 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe fe12 	bl	8001054 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e212      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x3ec>
 800244c:	e01b      	b.n	8002486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	4a3b      	ldr	r2, [pc, #236]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe fdf9 	bl	8001054 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7fe fdf5 	bl	8001054 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1f5      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ef      	bne.n	8002466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80a6 	beq.w	80025e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d118      	bne.n	80024fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d8:	f7fe fdbc 	bl	8001054 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fdb8 	bl	8001054 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1b8      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0x4d8>
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002516:	e029      	b.n	800256c <HAL_RCC_OscConfig+0x52c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d115      	bne.n	800254c <HAL_RCC_OscConfig+0x50c>
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002540:	e014      	b.n	800256c <HAL_RCC_OscConfig+0x52c>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	4b9d      	ldr	r3, [pc, #628]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	4a9c      	ldr	r2, [pc, #624]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255c:	4b99      	ldr	r3, [pc, #612]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a98      	ldr	r2, [pc, #608]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fd6e 	bl	8001054 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fd6a 	bl	8001054 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e168      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ed      	beq.n	800257c <HAL_RCC_OscConfig+0x53c>
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe fd57 	bl	8001054 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fd53 	bl	8001054 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e151      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c0:	4b80      	ldr	r3, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ed      	bne.n	80025aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d03c      	beq.n	8002666 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01c      	beq.n	800262e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f4:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025fa:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe fd26 	bl	8001054 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260c:	f7fe fd22 	bl	8001054 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e122      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ef      	beq.n	800260c <HAL_RCC_OscConfig+0x5cc>
 800262c:	e01b      	b.n	8002666 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800262e:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002634:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe fd09 	bl	8001054 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002646:	f7fe fd05 	bl	8001054 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e105      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002658:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800265a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ef      	bne.n	8002646 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80f9 	beq.w	8002862 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	2b02      	cmp	r3, #2
 8002676:	f040 80cf 	bne.w	8002818 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800267a:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	429a      	cmp	r2, r3
 800268c:	d12c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	3b01      	subs	r3, #1
 800269a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d123      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d11b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d113      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d109      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d071      	beq.n	80027cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d068      	beq.n	80027c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0ac      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2d      	ldr	r2, [pc, #180]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002714:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002716:	f7fe fc9d 	bl	8001054 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe fc99 	bl	8001054 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e099      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCC_OscConfig+0x788>)
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800274c:	3a01      	subs	r2, #1
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002756:	0212      	lsls	r2, r2, #8
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800275e:	0852      	lsrs	r2, r2, #1
 8002760:	3a01      	subs	r2, #1
 8002762:	0552      	lsls	r2, r2, #21
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800276a:	0852      	lsrs	r2, r2, #1
 800276c:	3a01      	subs	r2, #1
 800276e:	0652      	lsls	r2, r2, #25
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002776:	06d2      	lsls	r2, r2, #27
 8002778:	430a      	orrs	r2, r1
 800277a:	4912      	ldr	r1, [pc, #72]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800277c:	4313      	orrs	r3, r2
 800277e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002798:	f7fe fc5c 	bl	8001054 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fc58 	bl	8001054 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e058      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027be:	e050      	b.n	8002862 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e04f      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d144      	bne.n	8002862 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a23      	ldr	r2, [pc, #140]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027f0:	f7fe fc30 	bl	8001054 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fc2c 	bl	8001054 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e02c      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x7b8>
 8002816:	e024      	b.n	8002862 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d01f      	beq.n	800285e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fc13 	bl	8001054 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fc0f 	bl	8001054 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e00f      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	4905      	ldr	r1, [pc, #20]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_OscConfig+0x830>)
 8002858:	4013      	ands	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e001      	b.n	8002862 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	feeefffc 	.word	0xfeeefffc

08002874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e11d      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b90      	ldr	r3, [pc, #576]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d910      	bls.n	80028bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b8d      	ldr	r3, [pc, #564]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 020f 	bic.w	r2, r3, #15
 80028a2:	498b      	ldr	r1, [pc, #556]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b89      	ldr	r3, [pc, #548]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e105      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d010      	beq.n	80028ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d908      	bls.n	80028ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b7e      	ldr	r3, [pc, #504]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	497b      	ldr	r1, [pc, #492]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d079      	beq.n	80029ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d11e      	bne.n	800293c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0dc      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800290e:	f000 fa25 	bl	8002d5c <RCC_GetSysClockFreqFromPLLSource>
 8002912:	4603      	mov	r3, r0
 8002914:	4a70      	ldr	r2, [pc, #448]	; (8002ad8 <HAL_RCC_ClockConfig+0x264>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d946      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800291a:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d140      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002926:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e035      	b.n	80029a8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d107      	bne.n	8002954 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002944:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d115      	bne.n	800297c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b9      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d107      	bne.n	800296c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800295c:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0ad      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0a5      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800297c:	f000 f8b4 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002980:	4603      	mov	r3, r0
 8002982:	4a55      	ldr	r2, [pc, #340]	; (8002ad8 <HAL_RCC_ClockConfig+0x264>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d90f      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002988:	4b52      	ldr	r3, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002994:	4b4f      	ldr	r3, [pc, #316]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800299c:	4a4d      	ldr	r2, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800299e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 0203 	bic.w	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4947      	ldr	r1, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ba:	f7fe fb4b 	bl	8001054 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7fe fb47 	bl	8001054 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e077      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d8:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 020c 	and.w	r2, r3, #12
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d1eb      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029f0:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029fa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d208      	bcs.n	8002a2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	492b      	ldr	r1, [pc, #172]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d210      	bcs.n	8002a5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 020f 	bic.w	r2, r3, #15
 8002a40:	4923      	ldr	r1, [pc, #140]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e036      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4910      	ldr	r1, [pc, #64]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a98:	f000 f826 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <HAL_RCC_ClockConfig+0x268>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x26c>)
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x270>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe f9c9 	bl	8000e54 <HAL_InitTick>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	04c4b400 	.word	0x04c4b400
 8002adc:	08006e7c 	.word	0x08006e7c
 8002ae0:	2000005c 	.word	0x2000005c
 8002ae4:	20000060 	.word	0x20000060

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x34>
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d121      	bne.n	8002b5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d11e      	bne.n	8002b5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b1c:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	e005      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b44:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e004      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d134      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d003      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0xac>
 8002b8c:	e005      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b90:	617b      	str	r3, [r7, #20]
      break;
 8002b92:	e005      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b96:	617b      	str	r3, [r7, #20]
      break;
 8002b98:	e002      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	617b      	str	r3, [r7, #20]
      break;
 8002b9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3301      	adds	r3, #1
 8002bac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	fb03 f202 	mul.w	r2, r3, r2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	0e5b      	lsrs	r3, r3, #25
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002be0:	69bb      	ldr	r3, [r7, #24]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08006e94 	.word	0x08006e94
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	007a1200 	.word	0x007a1200

08002c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000005c 	.word	0x2000005c

08002c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c1c:	f7ff fff0 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	0adb      	lsrs	r3, r3, #11
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4904      	ldr	r1, [pc, #16]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08006e8c 	.word	0x08006e8c

08002c44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	220f      	movs	r2, #15
 8002c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	08db      	lsrs	r3, r3, #3
 8002c7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_RCC_GetClockConfig+0x60>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 020f 	and.w	r2, r3, #15
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	601a      	str	r2, [r3, #0]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40022000 	.word	0x40022000

08002ca8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cc0:	f7ff f8ea 	bl	8001e98 <HAL_PWREx_GetVoltageRange>
 8002cc4:	6178      	str	r0, [r7, #20]
 8002cc6:	e014      	b.n	8002cf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cc8:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd4:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ce0:	f7ff f8da 	bl	8001e98 <HAL_PWREx_GetVoltageRange>
 8002ce4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf8:	d10b      	bne.n	8002d12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d913      	bls.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2ba0      	cmp	r3, #160	; 0xa0
 8002d04:	d902      	bls.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d06:	2302      	movs	r3, #2
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e00d      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	e00a      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b7f      	cmp	r3, #127	; 0x7f
 8002d16:	d902      	bls.n	8002d1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d18:	2302      	movs	r3, #2
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	e004      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b70      	cmp	r3, #112	; 0x70
 8002d22:	d101      	bne.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d24:	2301      	movs	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 020f 	bic.w	r2, r3, #15
 8002d30:	4909      	ldr	r1, [pc, #36]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40022000 	.word	0x40022000

08002d5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d62:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d00b      	beq.n	8002d8a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d825      	bhi.n	8002dc4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d008      	beq.n	8002d90 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d11f      	bne.n	8002dc4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002d84:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d86:	613b      	str	r3, [r7, #16]
    break;
 8002d88:	e01f      	b.n	8002dca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002d8c:	613b      	str	r3, [r7, #16]
    break;
 8002d8e:	e01c      	b.n	8002dca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d90:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e005      	b.n	8002db8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002db8:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc0:	613b      	str	r3, [r7, #16]
    break;
 8002dc2:	e002      	b.n	8002dca <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
    break;
 8002dc8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	fb03 f202 	mul.w	r2, r3, r2
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0e5b      	lsrs	r3, r3, #25
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e0a:	683b      	ldr	r3, [r7, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	007a1200 	.word	0x007a1200
 8002e24:	08006e94 	.word	0x08006e94

08002e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e049      	b.n	8002ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd ffae 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 fd16 	bl	8003898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d001      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e04f      	b.n	8002f90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01d      	beq.n	8002f4e <HAL_TIM_Base_Start_IT+0x76>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1a:	d018      	beq.n	8002f4e <HAL_TIM_Base_Start_IT+0x76>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_TIM_Base_Start_IT+0x76>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00e      	beq.n	8002f4e <HAL_TIM_Base_Start_IT+0x76>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d009      	beq.n	8002f4e <HAL_TIM_Base_Start_IT+0x76>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_TIM_Base_Start_IT+0xd4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d004      	beq.n	8002f4e <HAL_TIM_Base_Start_IT+0x76>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d115      	bne.n	8002f7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d015      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0xb4>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f66:	d011      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f78:	e008      	b.n	8002f8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e000      	b.n	8002f8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40000c00 	.word	0x40000c00
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	00010007 	.word	0x00010007

08002fb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e049      	b.n	800305e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f841 	bl	8003066 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f000 fc4e 	bl	8003898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_TIM_PWM_Start+0x24>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e03c      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d109      	bne.n	80030ba <HAL_TIM_PWM_Start+0x3e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	e02f      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d109      	bne.n	80030d4 <HAL_TIM_PWM_Start+0x58>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e022      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d109      	bne.n	80030ee <HAL_TIM_PWM_Start+0x72>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e015      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d109      	bne.n	8003108 <HAL_TIM_PWM_Start+0x8c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e008      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e09c      	b.n	800325c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Start+0xb6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003130:	e023      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d104      	bne.n	8003142 <HAL_TIM_PWM_Start+0xc6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003140:	e01b      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start+0xd6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003150:	e013      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b0c      	cmp	r3, #12
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0xe6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003160:	e00b      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b10      	cmp	r3, #16
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xf6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003170:	e003      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2201      	movs	r2, #1
 8003180:	6839      	ldr	r1, [r7, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 ff92 	bl	80040ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a35      	ldr	r2, [pc, #212]	; (8003264 <HAL_TIM_PWM_Start+0x1e8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_TIM_PWM_Start+0x13e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a34      	ldr	r2, [pc, #208]	; (8003268 <HAL_TIM_PWM_Start+0x1ec>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_TIM_PWM_Start+0x13e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a32      	ldr	r2, [pc, #200]	; (800326c <HAL_TIM_PWM_Start+0x1f0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_TIM_PWM_Start+0x13e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a31      	ldr	r2, [pc, #196]	; (8003270 <HAL_TIM_PWM_Start+0x1f4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_TIM_PWM_Start+0x13e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <HAL_TIM_PWM_Start+0x1f8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_TIM_PWM_Start+0x142>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_TIM_PWM_Start+0x144>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_TIM_PWM_Start+0x1e8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d018      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a22      	ldr	r2, [pc, #136]	; (8003278 <HAL_TIM_PWM_Start+0x1fc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <HAL_TIM_PWM_Start+0x200>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_TIM_PWM_Start+0x204>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_TIM_PWM_Start+0x1ec>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <HAL_TIM_PWM_Start+0x1f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d115      	bne.n	8003246 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_TIM_PWM_Start+0x208>)
 8003222:	4013      	ands	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b06      	cmp	r3, #6
 800322a:	d015      	beq.n	8003258 <HAL_TIM_PWM_Start+0x1dc>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d011      	beq.n	8003258 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	e008      	b.n	8003258 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e000      	b.n	800325a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40013400 	.word	0x40013400
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40000c00 	.word	0x40000c00
 8003284:	00010007 	.word	0x00010007

08003288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d020      	beq.n	80032ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0202 	mvn.w	r2, #2
 80032bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fac1 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fab3 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fac4 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d020      	beq.n	8003338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01b      	beq.n	8003338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0204 	mvn.w	r2, #4
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa9b 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa8d 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fa9e 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0208 	mvn.w	r2, #8
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2204      	movs	r2, #4
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa75 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa67 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa78 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0210 	mvn.w	r2, #16
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2208      	movs	r2, #8
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa4f 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa41 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fa52 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00c      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0201 	mvn.w	r2, #1
 80033ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fc52 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00c      	beq.n	8003418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 ff02 	bl	800421c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fefa 	bl	8004230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fa11 	bl	8003882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00c      	beq.n	8003484 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0220 	mvn.w	r2, #32
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fec2 	bl	8004208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0ff      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b14      	cmp	r3, #20
 80034b6:	f200 80f0 	bhi.w	800369a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	08003515 	.word	0x08003515
 80034c4:	0800369b 	.word	0x0800369b
 80034c8:	0800369b 	.word	0x0800369b
 80034cc:	0800369b 	.word	0x0800369b
 80034d0:	08003555 	.word	0x08003555
 80034d4:	0800369b 	.word	0x0800369b
 80034d8:	0800369b 	.word	0x0800369b
 80034dc:	0800369b 	.word	0x0800369b
 80034e0:	08003597 	.word	0x08003597
 80034e4:	0800369b 	.word	0x0800369b
 80034e8:	0800369b 	.word	0x0800369b
 80034ec:	0800369b 	.word	0x0800369b
 80034f0:	080035d7 	.word	0x080035d7
 80034f4:	0800369b 	.word	0x0800369b
 80034f8:	0800369b 	.word	0x0800369b
 80034fc:	0800369b 	.word	0x0800369b
 8003500:	08003619 	.word	0x08003619
 8003504:	0800369b 	.word	0x0800369b
 8003508:	0800369b 	.word	0x0800369b
 800350c:	0800369b 	.word	0x0800369b
 8003510:	08003659 	.word	0x08003659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa56 	bl	80039cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0208 	orr.w	r2, r2, #8
 800352e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0204 	bic.w	r2, r2, #4
 800353e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6999      	ldr	r1, [r3, #24]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	619a      	str	r2, [r3, #24]
      break;
 8003552:	e0a5      	b.n	80036a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fac6 	bl	8003aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800356e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6999      	ldr	r1, [r3, #24]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	021a      	lsls	r2, r3, #8
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	619a      	str	r2, [r3, #24]
      break;
 8003594:	e084      	b.n	80036a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fb2f 	bl	8003c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0208 	orr.w	r2, r2, #8
 80035b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0204 	bic.w	r2, r2, #4
 80035c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69d9      	ldr	r1, [r3, #28]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	61da      	str	r2, [r3, #28]
      break;
 80035d4:	e064      	b.n	80036a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fb97 	bl	8003d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69d9      	ldr	r1, [r3, #28]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	021a      	lsls	r2, r3, #8
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	61da      	str	r2, [r3, #28]
      break;
 8003616:	e043      	b.n	80036a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fbe0 	bl	8003de4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0204 	bic.w	r2, r2, #4
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003656:	e023      	b.n	80036a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fc24 	bl	8003eac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003672:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	021a      	lsls	r2, r3, #8
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003698:	e002      	b.n	80036a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
      break;
 800369e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop

080036b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_ConfigClockSource+0x1c>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0b6      	b.n	800383e <HAL_TIM_ConfigClockSource+0x18a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370c:	d03e      	beq.n	800378c <HAL_TIM_ConfigClockSource+0xd8>
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	f200 8087 	bhi.w	8003824 <HAL_TIM_ConfigClockSource+0x170>
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371a:	f000 8086 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x176>
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003722:	d87f      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x170>
 8003724:	2b70      	cmp	r3, #112	; 0x70
 8003726:	d01a      	beq.n	800375e <HAL_TIM_ConfigClockSource+0xaa>
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d87b      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x170>
 800372c:	2b60      	cmp	r3, #96	; 0x60
 800372e:	d050      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x11e>
 8003730:	2b60      	cmp	r3, #96	; 0x60
 8003732:	d877      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x170>
 8003734:	2b50      	cmp	r3, #80	; 0x50
 8003736:	d03c      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0xfe>
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d873      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x170>
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	d058      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x13e>
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d86f      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x170>
 8003744:	2b30      	cmp	r3, #48	; 0x30
 8003746:	d064      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x15e>
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d86b      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x170>
 800374c:	2b20      	cmp	r3, #32
 800374e:	d060      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x15e>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d867      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x170>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d05c      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x15e>
 8003758:	2b10      	cmp	r3, #16
 800375a:	d05a      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x15e>
 800375c:	e062      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800376e:	f000 fc7d 	bl	800406c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	609a      	str	r2, [r3, #8]
      break;
 800378a:	e04f      	b.n	800382c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800379c:	f000 fc66 	bl	800406c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ae:	609a      	str	r2, [r3, #8]
      break;
 80037b0:	e03c      	b.n	800382c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	461a      	mov	r2, r3
 80037c0:	f000 fbda 	bl	8003f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2150      	movs	r1, #80	; 0x50
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fc33 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 80037d0:	e02c      	b.n	800382c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037de:	461a      	mov	r2, r3
 80037e0:	f000 fbf9 	bl	8003fd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2160      	movs	r1, #96	; 0x60
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fc23 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 80037f0:	e01c      	b.n	800382c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	461a      	mov	r2, r3
 8003800:	f000 fbba 	bl	8003f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fc13 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003810:	e00c      	b.n	800382c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f000 fc0a 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003822:	e003      	b.n	800382c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      break;
 8003828:	e000      	b.n	800382c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800382a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a40      	ldr	r2, [pc, #256]	; (80039ac <TIM_Base_SetConfig+0x114>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d013      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b6:	d00f      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <TIM_Base_SetConfig+0x118>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00b      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3c      	ldr	r2, [pc, #240]	; (80039b4 <TIM_Base_SetConfig+0x11c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3b      	ldr	r2, [pc, #236]	; (80039b8 <TIM_Base_SetConfig+0x120>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3a      	ldr	r2, [pc, #232]	; (80039bc <TIM_Base_SetConfig+0x124>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d108      	bne.n	80038ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <TIM_Base_SetConfig+0x114>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d01b      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2c      	ldr	r2, [pc, #176]	; (80039b0 <TIM_Base_SetConfig+0x118>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d017      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <TIM_Base_SetConfig+0x11c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2a      	ldr	r2, [pc, #168]	; (80039b8 <TIM_Base_SetConfig+0x120>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00f      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a29      	ldr	r2, [pc, #164]	; (80039bc <TIM_Base_SetConfig+0x124>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00b      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a28      	ldr	r2, [pc, #160]	; (80039c0 <TIM_Base_SetConfig+0x128>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d007      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <TIM_Base_SetConfig+0x12c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <TIM_Base_SetConfig+0x130>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <TIM_Base_SetConfig+0x114>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00f      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <TIM_Base_SetConfig+0x124>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <TIM_Base_SetConfig+0x128>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a10      	ldr	r2, [pc, #64]	; (80039c4 <TIM_Base_SetConfig+0x12c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <TIM_Base_SetConfig+0x130>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40014000 	.word	0x40014000
 80039c4:	40014400 	.word	0x40014400
 80039c8:	40014800 	.word	0x40014800

080039cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f023 0201 	bic.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f023 0302 	bic.w	r3, r3, #2
 8003a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <TIM_OC1_SetConfig+0x10c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00f      	beq.n	8003a4c <TIM_OC1_SetConfig+0x80>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a2b      	ldr	r2, [pc, #172]	; (8003adc <TIM_OC1_SetConfig+0x110>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_OC1_SetConfig+0x80>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a2a      	ldr	r2, [pc, #168]	; (8003ae0 <TIM_OC1_SetConfig+0x114>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC1_SetConfig+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <TIM_OC1_SetConfig+0x118>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC1_SetConfig+0x80>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a28      	ldr	r2, [pc, #160]	; (8003ae8 <TIM_OC1_SetConfig+0x11c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <TIM_OC1_SetConfig+0x10c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00f      	beq.n	8003a8e <TIM_OC1_SetConfig+0xc2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <TIM_OC1_SetConfig+0x110>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_OC1_SetConfig+0xc2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a19      	ldr	r2, [pc, #100]	; (8003ae0 <TIM_OC1_SetConfig+0x114>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_OC1_SetConfig+0xc2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <TIM_OC1_SetConfig+0x118>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_OC1_SetConfig+0xc2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <TIM_OC1_SetConfig+0x11c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d111      	bne.n	8003ab2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40013400 	.word	0x40013400
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400
 8003ae8:	40014800 	.word	0x40014800

08003aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0210 	bic.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0320 	bic.w	r3, r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a28      	ldr	r2, [pc, #160]	; (8003bec <TIM_OC2_SetConfig+0x100>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_OC2_SetConfig+0x6c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <TIM_OC2_SetConfig+0x104>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10d      	bne.n	8003b74 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <TIM_OC2_SetConfig+0x100>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00f      	beq.n	8003b9c <TIM_OC2_SetConfig+0xb0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <TIM_OC2_SetConfig+0x104>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_OC2_SetConfig+0xb0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <TIM_OC2_SetConfig+0x108>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_OC2_SetConfig+0xb0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <TIM_OC2_SetConfig+0x10c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC2_SetConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <TIM_OC2_SetConfig+0x110>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d113      	bne.n	8003bc4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40013400 	.word	0x40013400
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800

08003c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <TIM_OC3_SetConfig+0xfc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_OC3_SetConfig+0x6a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <TIM_OC3_SetConfig+0x100>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <TIM_OC3_SetConfig+0xfc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00f      	beq.n	8003cae <TIM_OC3_SetConfig+0xae>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <TIM_OC3_SetConfig+0x100>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <TIM_OC3_SetConfig+0xae>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <TIM_OC3_SetConfig+0x104>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_OC3_SetConfig+0xae>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <TIM_OC3_SetConfig+0x108>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC3_SetConfig+0xae>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <TIM_OC3_SetConfig+0x10c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d113      	bne.n	8003cd6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	031b      	lsls	r3, r3, #12
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a18      	ldr	r2, [pc, #96]	; (8003dd0 <TIM_OC4_SetConfig+0xc0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00f      	beq.n	8003d94 <TIM_OC4_SetConfig+0x84>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <TIM_OC4_SetConfig+0xc4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_OC4_SetConfig+0x84>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <TIM_OC4_SetConfig+0xc8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <TIM_OC4_SetConfig+0x84>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <TIM_OC4_SetConfig+0xcc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_OC4_SetConfig+0x84>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <TIM_OC4_SetConfig+0xd0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d109      	bne.n	8003da8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40013400 	.word	0x40013400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800

08003de4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <TIM_OC5_SetConfig+0xb4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_OC5_SetConfig+0x7a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <TIM_OC5_SetConfig+0xb8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_OC5_SetConfig+0x7a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <TIM_OC5_SetConfig+0xbc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_OC5_SetConfig+0x7a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <TIM_OC5_SetConfig+0xc0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_OC5_SetConfig+0x7a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <TIM_OC5_SetConfig+0xc4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d109      	bne.n	8003e72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	621a      	str	r2, [r3, #32]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800

08003eac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	051b      	lsls	r3, r3, #20
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <TIM_OC6_SetConfig+0xb8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00f      	beq.n	8003f28 <TIM_OC6_SetConfig+0x7c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <TIM_OC6_SetConfig+0xbc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <TIM_OC6_SetConfig+0x7c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <TIM_OC6_SetConfig+0xc0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_OC6_SetConfig+0x7c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <TIM_OC6_SetConfig+0xc4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC6_SetConfig+0x7c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <TIM_OC6_SetConfig+0xc8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	029b      	lsls	r3, r3, #10
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 030a 	bic.w	r3, r3, #10
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b087      	sub	sp, #28
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f023 0210 	bic.w	r2, r3, #16
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	031b      	lsls	r3, r3, #12
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004012:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	f043 0307 	orr.w	r3, r3, #7
 8004058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	021a      	lsls	r2, r3, #8
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	431a      	orrs	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	609a      	str	r2, [r3, #8]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2201      	movs	r2, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	401a      	ands	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1a      	ldr	r2, [r3, #32]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800410c:	2302      	movs	r3, #2
 800410e:	e068      	b.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2e      	ldr	r2, [pc, #184]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2d      	ldr	r2, [pc, #180]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d108      	bne.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800414a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01d      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d018      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a14      	ldr	r2, [pc, #80]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10c      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40013400 	.word	0x40013400
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40014000 	.word	0x40014000

08004208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004256:	2b84      	cmp	r3, #132	; 0x84
 8004258:	d005      	beq.n	8004266 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800425a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	3303      	adds	r3, #3
 8004264:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004266:	68fb      	ldr	r3, [r7, #12]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004278:	f000 ffde 	bl	8005238 <vTaskStartScheduler>
  
  return osOK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	bd80      	pop	{r7, pc}

08004282 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004284:	b089      	sub	sp, #36	; 0x24
 8004286:	af04      	add	r7, sp, #16
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <osThreadCreate+0x54>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01c      	beq.n	80042d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685c      	ldr	r4, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691e      	ldr	r6, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ffc8 	bl	8004244 <makeFreeRtosPriority>
 80042b4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042be:	9202      	str	r2, [sp, #8]
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	9100      	str	r1, [sp, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4632      	mov	r2, r6
 80042c8:	4629      	mov	r1, r5
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 fdd6 	bl	8004e7c <xTaskCreateStatic>
 80042d0:	4603      	mov	r3, r0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e01c      	b.n	8004310 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685c      	ldr	r4, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042e2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ffaa 	bl	8004244 <makeFreeRtosPriority>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f107 030c 	add.w	r3, r7, #12
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	9200      	str	r2, [sp, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	4632      	mov	r2, r6
 80042fe:	4629      	mov	r1, r5
 8004300:	4620      	mov	r0, r4
 8004302:	f000 fe18 	bl	8004f36 <xTaskCreate>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d001      	beq.n	8004310 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004310:	68fb      	ldr	r3, [r7, #12]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800431a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <osDelay+0x16>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	e000      	b.n	8004332 <osDelay+0x18>
 8004330:	2301      	movs	r3, #1
 8004332:	4618      	mov	r0, r3
 8004334:	f000 ff4c 	bl	80051d0 <vTaskDelay>
  
  return osOK;
 8004338:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 0208 	add.w	r2, r3, #8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f04f 32ff 	mov.w	r2, #4294967295
 800435a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f103 0208 	add.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f103 0208 	add.w	r2, r3, #8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d103      	bne.n	8004404 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e00c      	b.n	800441e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3308      	adds	r3, #8
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e002      	b.n	8004412 <vListInsert+0x2e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d2f6      	bcs.n	800440c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	601a      	str	r2, [r3, #0]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6892      	ldr	r2, [r2, #8]
 800446c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6852      	ldr	r2, [r2, #4]
 8004476:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d103      	bne.n	800448a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044d6:	f002 f86d 	bl	80065b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	3b01      	subs	r3, #1
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	22ff      	movs	r2, #255	; 0xff
 8004522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d114      	bne.n	8004556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3310      	adds	r3, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f911 	bl	8005760 <xTaskRemoveFromEventList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d012      	beq.n	800456a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <xQueueGenericReset+0xcc>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	e009      	b.n	800456a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3310      	adds	r3, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fef1 	bl	8004342 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff feec 	bl	8004342 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800456a:	f002 f853 	bl	8006614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	; 0x38
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <xQueueGenericCreateStatic+0x52>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <xQueueGenericCreateStatic+0x56>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericCreateStatic+0x58>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <xQueueGenericCreateStatic+0x7e>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <xQueueGenericCreateStatic+0x82>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericCreateStatic+0x84>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	61fb      	str	r3, [r7, #28]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800461a:	2348      	movs	r3, #72	; 0x48
 800461c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b48      	cmp	r3, #72	; 0x48
 8004622:	d00a      	beq.n	800463a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61bb      	str	r3, [r7, #24]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800463a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00d      	beq.n	8004662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800464e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f805 	bl	800466c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004664:	4618      	mov	r0, r3
 8004666:	3730      	adds	r7, #48	; 0x30
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d103      	bne.n	8004688 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e002      	b.n	800468e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800469a:	2101      	movs	r1, #1
 800469c:	69b8      	ldr	r0, [r7, #24]
 800469e:	f7ff ff05 	bl	80044ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08e      	sub	sp, #56	; 0x38
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046ba:	2300      	movs	r3, #0
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <xQueueGenericSend+0x32>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <xQueueGenericSend+0x40>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <xQueueGenericSend+0x44>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <xQueueGenericSend+0x46>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <xQueueGenericSend+0x60>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d103      	bne.n	800471a <xQueueGenericSend+0x6e>
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <xQueueGenericSend+0x72>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <xQueueGenericSend+0x74>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xQueueGenericSend+0x8e>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	623b      	str	r3, [r7, #32]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800473a:	f001 f9d1 	bl	8005ae0 <xTaskGetSchedulerState>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <xQueueGenericSend+0x9e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <xQueueGenericSend+0xa2>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueGenericSend+0xa4>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xQueueGenericSend+0xbe>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	61fb      	str	r3, [r7, #28]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800476a:	f001 ff23 	bl	80065b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <xQueueGenericSend+0xd4>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d129      	bne.n	80047d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004786:	f000 fa0b 	bl	8004ba0 <prvCopyDataToQueue>
 800478a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	3324      	adds	r3, #36	; 0x24
 8004798:	4618      	mov	r0, r3
 800479a:	f000 ffe1 	bl	8005760 <xTaskRemoveFromEventList>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d013      	beq.n	80047cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047a4:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <xQueueGenericSend+0x1f8>)
 80047a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	e00a      	b.n	80047cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047bc:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <xQueueGenericSend+0x1f8>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047cc:	f001 ff22 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e063      	b.n	800489c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047da:	f001 ff1b 	bl	8006614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	e05c      	b.n	800489c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e8:	f107 0314 	add.w	r3, r7, #20
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 f819 	bl	8005824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047f6:	f001 ff0d 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047fa:	f000 fd8d 	bl	8005318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047fe:	f001 fed9 	bl	80065b4 <vPortEnterCritical>
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004808:	b25b      	sxtb	r3, r3
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d103      	bne.n	8004818 <xQueueGenericSend+0x16c>
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800481e:	b25b      	sxtb	r3, r3
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d103      	bne.n	800482e <xQueueGenericSend+0x182>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482e:	f001 fef1 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004832:	1d3a      	adds	r2, r7, #4
 8004834:	f107 0314 	add.w	r3, r7, #20
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f001 f808 	bl	8005850 <xTaskCheckForTimeOut>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d124      	bne.n	8004890 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004848:	f000 faa2 	bl	8004d90 <prvIsQueueFull>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d018      	beq.n	8004884 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	3310      	adds	r3, #16
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4611      	mov	r1, r2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 ff30 	bl	80056c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004862:	f000 fa2d 	bl	8004cc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004866:	f000 fd65 	bl	8005334 <xTaskResumeAll>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	f47f af7c 	bne.w	800476a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <xQueueGenericSend+0x1f8>)
 8004874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	e772      	b.n	800476a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004886:	f000 fa1b 	bl	8004cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800488a:	f000 fd53 	bl	8005334 <xTaskResumeAll>
 800488e:	e76c      	b.n	800476a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004892:	f000 fa15 	bl	8004cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004896:	f000 fd4d 	bl	8005334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800489a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800489c:	4618      	mov	r0, r3
 800489e:	3738      	adds	r7, #56	; 0x38
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b090      	sub	sp, #64	; 0x40
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d103      	bne.n	80048e4 <xQueueGenericSendFromISR+0x3c>
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <xQueueGenericSendFromISR+0x40>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <xQueueGenericSendFromISR+0x42>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d103      	bne.n	8004912 <xQueueGenericSendFromISR+0x6a>
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <xQueueGenericSendFromISR+0x6e>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueGenericSendFromISR+0x70>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	623b      	str	r3, [r7, #32]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004932:	f001 ff21 	bl	8006778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004936:	f3ef 8211 	mrs	r2, BASEPRI
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61fa      	str	r2, [r7, #28]
 800494c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800494e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <xQueueGenericSendFromISR+0xbc>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d12f      	bne.n	80049c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800496a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800497a:	f000 f911 	bl	8004ba0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800497e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d112      	bne.n	80049ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d016      	beq.n	80049be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	3324      	adds	r3, #36	; 0x24
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fee3 	bl	8005760 <xTaskRemoveFromEventList>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e007      	b.n	80049be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049b2:	3301      	adds	r3, #1
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	b25a      	sxtb	r2, r3
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049be:	2301      	movs	r3, #1
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049c2:	e001      	b.n	80049c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3740      	adds	r7, #64	; 0x40
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	; 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <xQueueReceive+0x30>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	623b      	str	r3, [r7, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <xQueueReceive+0x3e>
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <xQueueReceive+0x42>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <xQueueReceive+0x44>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <xQueueReceive+0x5e>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	61fb      	str	r3, [r7, #28]
}
 8004a3a:	bf00      	nop
 8004a3c:	e7fe      	b.n	8004a3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a3e:	f001 f84f 	bl	8005ae0 <xTaskGetSchedulerState>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <xQueueReceive+0x6e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <xQueueReceive+0x72>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <xQueueReceive+0x74>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xQueueReceive+0x8e>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	61bb      	str	r3, [r7, #24]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a6e:	f001 fda1 	bl	80065b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01f      	beq.n	8004abe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a82:	f000 f8f7 	bl	8004c74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	1e5a      	subs	r2, r3, #1
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00f      	beq.n	8004ab6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	3310      	adds	r3, #16
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fe60 	bl	8005760 <xTaskRemoveFromEventList>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004aa6:	4b3d      	ldr	r3, [pc, #244]	; (8004b9c <xQueueReceive+0x1bc>)
 8004aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ab6:	f001 fdad 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e069      	b.n	8004b92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d103      	bne.n	8004acc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ac4:	f001 fda6 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e062      	b.n	8004b92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ad2:	f107 0310 	add.w	r3, r7, #16
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fea4 	bl	8005824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ae0:	f001 fd98 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ae4:	f000 fc18 	bl	8005318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ae8:	f001 fd64 	bl	80065b4 <vPortEnterCritical>
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af2:	b25b      	sxtb	r3, r3
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d103      	bne.n	8004b02 <xQueueReceive+0x122>
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b08:	b25b      	sxtb	r3, r3
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d103      	bne.n	8004b18 <xQueueReceive+0x138>
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b18:	f001 fd7c 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b1c:	1d3a      	adds	r2, r7, #4
 8004b1e:	f107 0310 	add.w	r3, r7, #16
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fe93 	bl	8005850 <xTaskCheckForTimeOut>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d123      	bne.n	8004b78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b32:	f000 f917 	bl	8004d64 <prvIsQueueEmpty>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d017      	beq.n	8004b6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fdbb 	bl	80056c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4c:	f000 f8b8 	bl	8004cc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b50:	f000 fbf0 	bl	8005334 <xTaskResumeAll>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d189      	bne.n	8004a6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <xQueueReceive+0x1bc>)
 8004b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	e780      	b.n	8004a6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b6e:	f000 f8a7 	bl	8004cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b72:	f000 fbdf 	bl	8005334 <xTaskResumeAll>
 8004b76:	e77a      	b.n	8004a6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b7a:	f000 f8a1 	bl	8004cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b7e:	f000 fbd9 	bl	8005334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b84:	f000 f8ee 	bl	8004d64 <prvIsQueueEmpty>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f43f af6f 	beq.w	8004a6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3730      	adds	r7, #48	; 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	e000ed04 	.word	0xe000ed04

08004ba0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d14d      	bne.n	8004c62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 ffa6 	bl	8005b1c <xTaskPriorityDisinherit>
 8004bd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	e043      	b.n	8004c62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d119      	bne.n	8004c14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6858      	ldr	r0, [r3, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	461a      	mov	r2, r3
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	f002 f872 	bl	8006cd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d32b      	bcc.n	8004c62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	e026      	b.n	8004c62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68d8      	ldr	r0, [r3, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	f002 f858 	bl	8006cd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	441a      	add	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d207      	bcs.n	8004c50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	425b      	negs	r3, r3
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d105      	bne.n	8004c62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c6a:	697b      	ldr	r3, [r7, #20]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d018      	beq.n	8004cb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	441a      	add	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d303      	bcc.n	8004ca8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68d9      	ldr	r1, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6838      	ldr	r0, [r7, #0]
 8004cb4:	f002 f80e 	bl	8006cd4 <memcpy>
	}
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cc8:	f001 fc74 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cd4:	e011      	b.n	8004cfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3324      	adds	r3, #36	; 0x24
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fd3c 	bl	8005760 <xTaskRemoveFromEventList>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cee:	f000 fe11 	bl	8005914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	dce9      	bgt.n	8004cd6 <prvUnlockQueue+0x16>
 8004d02:	e000      	b.n	8004d06 <prvUnlockQueue+0x46>
					break;
 8004d04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	22ff      	movs	r2, #255	; 0xff
 8004d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d0e:	f001 fc81 	bl	8006614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d12:	f001 fc4f 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d1e:	e011      	b.n	8004d44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d012      	beq.n	8004d4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fd17 	bl	8005760 <xTaskRemoveFromEventList>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d38:	f000 fdec 	bl	8005914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d3c:	7bbb      	ldrb	r3, [r7, #14]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	dce9      	bgt.n	8004d20 <prvUnlockQueue+0x60>
 8004d4c:	e000      	b.n	8004d50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	22ff      	movs	r2, #255	; 0xff
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d58:	f001 fc5c 	bl	8006614 <vPortExitCritical>
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d6c:	f001 fc22 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e001      	b.n	8004d82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d82:	f001 fc47 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004d86:	68fb      	ldr	r3, [r7, #12]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d98:	f001 fc0c 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d102      	bne.n	8004dae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e001      	b.n	8004db2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004db2:	f001 fc2f 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004db6:	68fb      	ldr	r3, [r7, #12]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e014      	b.n	8004dfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004dd0:	4a0f      	ldr	r2, [pc, #60]	; (8004e10 <vQueueAddToRegistry+0x50>)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ddc:	490c      	ldr	r1, [pc, #48]	; (8004e10 <vQueueAddToRegistry+0x50>)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <vQueueAddToRegistry+0x50>)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004df2:	e006      	b.n	8004e02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b07      	cmp	r3, #7
 8004dfe:	d9e7      	bls.n	8004dd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000914 	.word	0x20000914

08004e14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e24:	f001 fbc6 	bl	80065b4 <vPortEnterCritical>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e2e:	b25b      	sxtb	r3, r3
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d103      	bne.n	8004e3e <vQueueWaitForMessageRestricted+0x2a>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d103      	bne.n	8004e54 <vQueueWaitForMessageRestricted+0x40>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e54:	f001 fbde 	bl	8006614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	3324      	adds	r3, #36	; 0x24
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fc4d 	bl	8005708 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e6e:	6978      	ldr	r0, [r7, #20]
 8004e70:	f7ff ff26 	bl	8004cc0 <prvUnlockQueue>
	}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08e      	sub	sp, #56	; 0x38
 8004e80:	af04      	add	r7, sp, #16
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	61fb      	str	r3, [r7, #28]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ec2:	23a0      	movs	r3, #160	; 0xa0
 8004ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2ba0      	cmp	r3, #160	; 0xa0
 8004eca:	d00a      	beq.n	8004ee2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	61bb      	str	r3, [r7, #24]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ee2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01e      	beq.n	8004f28 <xTaskCreateStatic+0xac>
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01b      	beq.n	8004f28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f02:	2300      	movs	r3, #0
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f850 	bl	8004fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f22:	f000 f8eb 	bl	80050fc <prvAddNewTaskToReadyList>
 8004f26:	e001      	b.n	8004f2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f2c:	697b      	ldr	r3, [r7, #20]
	}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3728      	adds	r7, #40	; 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b08c      	sub	sp, #48	; 0x30
 8004f3a:	af04      	add	r7, sp, #16
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 fc54 	bl	80067f8 <pvPortMalloc>
 8004f50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00e      	beq.n	8004f76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f58:	20a0      	movs	r0, #160	; 0xa0
 8004f5a:	f001 fc4d 	bl	80067f8 <pvPortMalloc>
 8004f5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f6c:	e005      	b.n	8004f7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f6e:	6978      	ldr	r0, [r7, #20]
 8004f70:	f001 fd0e 	bl	8006990 <vPortFree>
 8004f74:	e001      	b.n	8004f7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d017      	beq.n	8004fb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9303      	str	r3, [sp, #12]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f80e 	bl	8004fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fa4:	69f8      	ldr	r0, [r7, #28]
 8004fa6:	f000 f8a9 	bl	80050fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004faa:	2301      	movs	r3, #1
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e002      	b.n	8004fb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
	}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f023 0307 	bic.w	r3, r3, #7
 8004fe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	617b      	str	r3, [r7, #20]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01f      	beq.n	800504e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e012      	b.n	800503a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	7819      	ldrb	r1, [r3, #0]
 800501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	3334      	adds	r3, #52	; 0x34
 8005024:	460a      	mov	r2, r1
 8005026:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b0f      	cmp	r3, #15
 800503e:	d9e9      	bls.n	8005014 <prvInitialiseNewTask+0x54>
 8005040:	e000      	b.n	8005044 <prvInitialiseNewTask+0x84>
			{
				break;
 8005042:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800504c:	e003      	b.n	8005056 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	2b06      	cmp	r3, #6
 800505a:	d901      	bls.n	8005060 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800505c:	2306      	movs	r3, #6
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2200      	movs	r2, #0
 8005070:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	3304      	adds	r3, #4
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff f983 	bl	8004382 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	3318      	adds	r3, #24
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f97e 	bl	8004382 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	f1c3 0207 	rsb	r2, r3, #7
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	334c      	adds	r3, #76	; 0x4c
 80050b0:	224c      	movs	r2, #76	; 0x4c
 80050b2:	2100      	movs	r1, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 fd89 	bl	8006bcc <memset>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	4a0c      	ldr	r2, [pc, #48]	; (80050f0 <prvInitialiseNewTask+0x130>)
 80050be:	651a      	str	r2, [r3, #80]	; 0x50
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <prvInitialiseNewTask+0x134>)
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <prvInitialiseNewTask+0x138>)
 80050ca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	69b8      	ldr	r0, [r7, #24]
 80050d2:	f001 f941 	bl	8006358 <pxPortInitialiseStack>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050e8:	bf00      	nop
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2000175c 	.word	0x2000175c
 80050f4:	200017c4 	.word	0x200017c4
 80050f8:	2000182c 	.word	0x2000182c

080050fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005104:	f001 fa56 	bl	80065b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005108:	4b2a      	ldr	r3, [pc, #168]	; (80051b4 <prvAddNewTaskToReadyList+0xb8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	4a29      	ldr	r2, [pc, #164]	; (80051b4 <prvAddNewTaskToReadyList+0xb8>)
 8005110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005112:	4b29      	ldr	r3, [pc, #164]	; (80051b8 <prvAddNewTaskToReadyList+0xbc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800511a:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <prvAddNewTaskToReadyList+0xbc>)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005120:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <prvAddNewTaskToReadyList+0xb8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d110      	bne.n	800514a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005128:	f000 fc18 	bl	800595c <prvInitialiseTaskLists>
 800512c:	e00d      	b.n	800514a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <prvAddNewTaskToReadyList+0xc0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005136:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <prvAddNewTaskToReadyList+0xbc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	429a      	cmp	r2, r3
 8005142:	d802      	bhi.n	800514a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005144:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <prvAddNewTaskToReadyList+0xbc>)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <prvAddNewTaskToReadyList+0xc4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3301      	adds	r3, #1
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <prvAddNewTaskToReadyList+0xc4>)
 8005152:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	2201      	movs	r2, #1
 800515a:	409a      	lsls	r2, r3
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <prvAddNewTaskToReadyList+0xc8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4313      	orrs	r3, r2
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <prvAddNewTaskToReadyList+0xc8>)
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <prvAddNewTaskToReadyList+0xcc>)
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f7ff f90d 	bl	800439c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005182:	f001 fa47 	bl	8006614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005186:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <prvAddNewTaskToReadyList+0xc0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00e      	beq.n	80051ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <prvAddNewTaskToReadyList+0xbc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	429a      	cmp	r2, r3
 800519a:	d207      	bcs.n	80051ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <prvAddNewTaskToReadyList+0xd0>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000a54 	.word	0x20000a54
 80051b8:	20000954 	.word	0x20000954
 80051bc:	20000a60 	.word	0x20000a60
 80051c0:	20000a70 	.word	0x20000a70
 80051c4:	20000a5c 	.word	0x20000a5c
 80051c8:	20000958 	.word	0x20000958
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d017      	beq.n	8005212 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <vTaskDelay+0x60>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <vTaskDelay+0x30>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	60bb      	str	r3, [r7, #8]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005200:	f000 f88a 	bl	8005318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005204:	2100      	movs	r1, #0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fd0e 	bl	8005c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800520c:	f000 f892 	bl	8005334 <xTaskResumeAll>
 8005210:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <vTaskDelay+0x64>)
 800521a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000a7c 	.word	0x20000a7c
 8005234:	e000ed04 	.word	0xe000ed04

08005238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005246:	463a      	mov	r2, r7
 8005248:	1d39      	adds	r1, r7, #4
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	4618      	mov	r0, r3
 8005250:	f7fa ffd6 	bl	8000200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	9202      	str	r2, [sp, #8]
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	2300      	movs	r3, #0
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	460a      	mov	r2, r1
 8005266:	4924      	ldr	r1, [pc, #144]	; (80052f8 <vTaskStartScheduler+0xc0>)
 8005268:	4824      	ldr	r0, [pc, #144]	; (80052fc <vTaskStartScheduler+0xc4>)
 800526a:	f7ff fe07 	bl	8004e7c <xTaskCreateStatic>
 800526e:	4603      	mov	r3, r0
 8005270:	4a23      	ldr	r2, [pc, #140]	; (8005300 <vTaskStartScheduler+0xc8>)
 8005272:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005274:	4b22      	ldr	r3, [pc, #136]	; (8005300 <vTaskStartScheduler+0xc8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800527c:	2301      	movs	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e001      	b.n	8005286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d102      	bne.n	8005292 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800528c:	f000 fd32 	bl	8005cf4 <xTimerCreateTimerTask>
 8005290:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d11b      	bne.n	80052d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	613b      	str	r3, [r7, #16]
}
 80052aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <vTaskStartScheduler+0xcc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	334c      	adds	r3, #76	; 0x4c
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <vTaskStartScheduler+0xd0>)
 80052b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <vTaskStartScheduler+0xd4>)
 80052b8:	f04f 32ff 	mov.w	r2, #4294967295
 80052bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <vTaskStartScheduler+0xd8>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <vTaskStartScheduler+0xdc>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052ca:	f001 f8d1 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052ce:	e00e      	b.n	80052ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d10a      	bne.n	80052ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	60fb      	str	r3, [r7, #12]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <vTaskStartScheduler+0xb4>
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	08006e64 	.word	0x08006e64
 80052fc:	0800592d 	.word	0x0800592d
 8005300:	20000a78 	.word	0x20000a78
 8005304:	20000954 	.word	0x20000954
 8005308:	200000b8 	.word	0x200000b8
 800530c:	20000a74 	.word	0x20000a74
 8005310:	20000a60 	.word	0x20000a60
 8005314:	20000a58 	.word	0x20000a58

08005318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <vTaskSuspendAll+0x18>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	4a03      	ldr	r2, [pc, #12]	; (8005330 <vTaskSuspendAll+0x18>)
 8005324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000a7c 	.word	0x20000a7c

08005334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005342:	4b41      	ldr	r3, [pc, #260]	; (8005448 <xTaskResumeAll+0x114>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <xTaskResumeAll+0x2c>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	603b      	str	r3, [r7, #0]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005360:	f001 f928 	bl	80065b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005364:	4b38      	ldr	r3, [pc, #224]	; (8005448 <xTaskResumeAll+0x114>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3b01      	subs	r3, #1
 800536a:	4a37      	ldr	r2, [pc, #220]	; (8005448 <xTaskResumeAll+0x114>)
 800536c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800536e:	4b36      	ldr	r3, [pc, #216]	; (8005448 <xTaskResumeAll+0x114>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d161      	bne.n	800543a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005376:	4b35      	ldr	r3, [pc, #212]	; (800544c <xTaskResumeAll+0x118>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d05d      	beq.n	800543a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800537e:	e02e      	b.n	80053de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005380:	4b33      	ldr	r3, [pc, #204]	; (8005450 <xTaskResumeAll+0x11c>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3318      	adds	r3, #24
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff f862 	bl	8004456 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3304      	adds	r3, #4
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff f85d 	bl	8004456 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	2201      	movs	r2, #1
 80053a2:	409a      	lsls	r2, r3
 80053a4:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <xTaskResumeAll+0x120>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <xTaskResumeAll+0x120>)
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4a27      	ldr	r2, [pc, #156]	; (8005458 <xTaskResumeAll+0x124>)
 80053bc:	441a      	add	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3304      	adds	r3, #4
 80053c2:	4619      	mov	r1, r3
 80053c4:	4610      	mov	r0, r2
 80053c6:	f7fe ffe9 	bl	800439c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ce:	4b23      	ldr	r3, [pc, #140]	; (800545c <xTaskResumeAll+0x128>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <xTaskResumeAll+0x12c>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053de:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <xTaskResumeAll+0x11c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1cc      	bne.n	8005380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053ec:	f000 fb58 	bl	8005aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053f0:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <xTaskResumeAll+0x130>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d010      	beq.n	800541e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053fc:	f000 f846 	bl	800548c <xTaskIncrementTick>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005406:	4b16      	ldr	r3, [pc, #88]	; (8005460 <xTaskResumeAll+0x12c>)
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3b01      	subs	r3, #1
 8005410:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f1      	bne.n	80053fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005418:	4b12      	ldr	r3, [pc, #72]	; (8005464 <xTaskResumeAll+0x130>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800541e:	4b10      	ldr	r3, [pc, #64]	; (8005460 <xTaskResumeAll+0x12c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005426:	2301      	movs	r3, #1
 8005428:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800542a:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <xTaskResumeAll+0x134>)
 800542c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800543a:	f001 f8eb 	bl	8006614 <vPortExitCritical>

	return xAlreadyYielded;
 800543e:	68bb      	ldr	r3, [r7, #8]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000a7c 	.word	0x20000a7c
 800544c:	20000a54 	.word	0x20000a54
 8005450:	20000a14 	.word	0x20000a14
 8005454:	20000a5c 	.word	0x20000a5c
 8005458:	20000958 	.word	0x20000958
 800545c:	20000954 	.word	0x20000954
 8005460:	20000a68 	.word	0x20000a68
 8005464:	20000a64 	.word	0x20000a64
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <xTaskGetTickCount+0x1c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005478:	687b      	ldr	r3, [r7, #4]
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000a58 	.word	0x20000a58

0800548c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005496:	4b4e      	ldr	r3, [pc, #312]	; (80055d0 <xTaskIncrementTick+0x144>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f040 808e 	bne.w	80055bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054a0:	4b4c      	ldr	r3, [pc, #304]	; (80055d4 <xTaskIncrementTick+0x148>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054a8:	4a4a      	ldr	r2, [pc, #296]	; (80055d4 <xTaskIncrementTick+0x148>)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d120      	bne.n	80054f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054b4:	4b48      	ldr	r3, [pc, #288]	; (80055d8 <xTaskIncrementTick+0x14c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	603b      	str	r3, [r7, #0]
}
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <xTaskIncrementTick+0x46>
 80054d4:	4b40      	ldr	r3, [pc, #256]	; (80055d8 <xTaskIncrementTick+0x14c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	4b40      	ldr	r3, [pc, #256]	; (80055dc <xTaskIncrementTick+0x150>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a3e      	ldr	r2, [pc, #248]	; (80055d8 <xTaskIncrementTick+0x14c>)
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	4a3e      	ldr	r2, [pc, #248]	; (80055dc <xTaskIncrementTick+0x150>)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <xTaskIncrementTick+0x154>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	4a3c      	ldr	r2, [pc, #240]	; (80055e0 <xTaskIncrementTick+0x154>)
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	f000 fad5 	bl	8005aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054f6:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <xTaskIncrementTick+0x158>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d348      	bcc.n	8005592 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005500:	4b35      	ldr	r3, [pc, #212]	; (80055d8 <xTaskIncrementTick+0x14c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800550a:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <xTaskIncrementTick+0x158>)
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	601a      	str	r2, [r3, #0]
					break;
 8005512:	e03e      	b.n	8005592 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005514:	4b30      	ldr	r3, [pc, #192]	; (80055d8 <xTaskIncrementTick+0x14c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d203      	bcs.n	8005534 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800552c:	4a2d      	ldr	r2, [pc, #180]	; (80055e4 <xTaskIncrementTick+0x158>)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005532:	e02e      	b.n	8005592 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	3304      	adds	r3, #4
 8005538:	4618      	mov	r0, r3
 800553a:	f7fe ff8c 	bl	8004456 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d004      	beq.n	8005550 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3318      	adds	r3, #24
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe ff83 	bl	8004456 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	2201      	movs	r2, #1
 8005556:	409a      	lsls	r2, r3
 8005558:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <xTaskIncrementTick+0x15c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <xTaskIncrementTick+0x15c>)
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <xTaskIncrementTick+0x160>)
 8005570:	441a      	add	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	3304      	adds	r3, #4
 8005576:	4619      	mov	r1, r3
 8005578:	4610      	mov	r0, r2
 800557a:	f7fe ff0f 	bl	800439c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <xTaskIncrementTick+0x164>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d3b9      	bcc.n	8005500 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005590:	e7b6      	b.n	8005500 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005592:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <xTaskIncrementTick+0x164>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	4914      	ldr	r1, [pc, #80]	; (80055ec <xTaskIncrementTick+0x160>)
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d901      	bls.n	80055ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80055aa:	2301      	movs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <xTaskIncrementTick+0x168>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80055b6:	2301      	movs	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e004      	b.n	80055c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055bc:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <xTaskIncrementTick+0x16c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	4a0d      	ldr	r2, [pc, #52]	; (80055f8 <xTaskIncrementTick+0x16c>)
 80055c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055c6:	697b      	ldr	r3, [r7, #20]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000a7c 	.word	0x20000a7c
 80055d4:	20000a58 	.word	0x20000a58
 80055d8:	20000a0c 	.word	0x20000a0c
 80055dc:	20000a10 	.word	0x20000a10
 80055e0:	20000a6c 	.word	0x20000a6c
 80055e4:	20000a74 	.word	0x20000a74
 80055e8:	20000a5c 	.word	0x20000a5c
 80055ec:	20000958 	.word	0x20000958
 80055f0:	20000954 	.word	0x20000954
 80055f4:	20000a68 	.word	0x20000a68
 80055f8:	20000a64 	.word	0x20000a64

080055fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005602:	4b29      	ldr	r3, [pc, #164]	; (80056a8 <vTaskSwitchContext+0xac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800560a:	4b28      	ldr	r3, [pc, #160]	; (80056ac <vTaskSwitchContext+0xb0>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005610:	e044      	b.n	800569c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005612:	4b26      	ldr	r3, [pc, #152]	; (80056ac <vTaskSwitchContext+0xb0>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005618:	4b25      	ldr	r3, [pc, #148]	; (80056b0 <vTaskSwitchContext+0xb4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	fab3 f383 	clz	r3, r3
 8005624:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005626:	7afb      	ldrb	r3, [r7, #11]
 8005628:	f1c3 031f 	rsb	r3, r3, #31
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	4921      	ldr	r1, [pc, #132]	; (80056b4 <vTaskSwitchContext+0xb8>)
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	607b      	str	r3, [r7, #4]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <vTaskSwitchContext+0x5a>
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <vTaskSwitchContext+0xb8>)
 8005664:	4413      	add	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3308      	adds	r3, #8
 800567a:	429a      	cmp	r2, r3
 800567c:	d104      	bne.n	8005688 <vTaskSwitchContext+0x8c>
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <vTaskSwitchContext+0xbc>)
 8005690:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <vTaskSwitchContext+0xbc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	334c      	adds	r3, #76	; 0x4c
 8005698:	4a08      	ldr	r2, [pc, #32]	; (80056bc <vTaskSwitchContext+0xc0>)
 800569a:	6013      	str	r3, [r2, #0]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20000a7c 	.word	0x20000a7c
 80056ac:	20000a68 	.word	0x20000a68
 80056b0:	20000a5c 	.word	0x20000a5c
 80056b4:	20000958 	.word	0x20000958
 80056b8:	20000954 	.word	0x20000954
 80056bc:	200000b8 	.word	0x200000b8

080056c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60fb      	str	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <vTaskPlaceOnEventList+0x44>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3318      	adds	r3, #24
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fe fe78 	bl	80043e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056f4:	2101      	movs	r1, #1
 80056f6:	6838      	ldr	r0, [r7, #0]
 80056f8:	f000 fa96 	bl	8005c28 <prvAddCurrentTaskToDelayedList>
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20000954 	.word	0x20000954

08005708 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	617b      	str	r3, [r7, #20]
}
 800572c:	bf00      	nop
 800572e:	e7fe      	b.n	800572e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <vTaskPlaceOnEventListRestricted+0x54>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3318      	adds	r3, #24
 8005736:	4619      	mov	r1, r3
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7fe fe2f 	bl	800439c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005744:	f04f 33ff 	mov.w	r3, #4294967295
 8005748:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	68b8      	ldr	r0, [r7, #8]
 800574e:	f000 fa6b 	bl	8005c28 <prvAddCurrentTaskToDelayedList>
	}
 8005752:	bf00      	nop
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000954 	.word	0x20000954

08005760 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	60fb      	str	r3, [r7, #12]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	3318      	adds	r3, #24
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe fe60 	bl	8004456 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005796:	4b1d      	ldr	r3, [pc, #116]	; (800580c <xTaskRemoveFromEventList+0xac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d11c      	bne.n	80057d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	3304      	adds	r3, #4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fe57 	bl	8004456 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	4b17      	ldr	r3, [pc, #92]	; (8005810 <xTaskRemoveFromEventList+0xb0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <xTaskRemoveFromEventList+0xb0>)
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4a13      	ldr	r2, [pc, #76]	; (8005814 <xTaskRemoveFromEventList+0xb4>)
 80057c8:	441a      	add	r2, r3
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7fe fde3 	bl	800439c <vListInsertEnd>
 80057d6:	e005      	b.n	80057e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	3318      	adds	r3, #24
 80057dc:	4619      	mov	r1, r3
 80057de:	480e      	ldr	r0, [pc, #56]	; (8005818 <xTaskRemoveFromEventList+0xb8>)
 80057e0:	f7fe fddc 	bl	800439c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <xTaskRemoveFromEventList+0xbc>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d905      	bls.n	80057fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057f2:	2301      	movs	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <xTaskRemoveFromEventList+0xc0>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e001      	b.n	8005802 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005802:	697b      	ldr	r3, [r7, #20]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000a7c 	.word	0x20000a7c
 8005810:	20000a5c 	.word	0x20000a5c
 8005814:	20000958 	.word	0x20000958
 8005818:	20000a14 	.word	0x20000a14
 800581c:	20000954 	.word	0x20000954
 8005820:	20000a68 	.word	0x20000a68

08005824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <vTaskInternalSetTimeOutState+0x24>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <vTaskInternalSetTimeOutState+0x28>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	605a      	str	r2, [r3, #4]
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	20000a6c 	.word	0x20000a6c
 800584c:	20000a58 	.word	0x20000a58

08005850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	613b      	str	r3, [r7, #16]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60fb      	str	r3, [r7, #12]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005892:	f000 fe8f 	bl	80065b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005896:	4b1d      	ldr	r3, [pc, #116]	; (800590c <xTaskCheckForTimeOut+0xbc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d102      	bne.n	80058b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	e023      	b.n	80058fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <xTaskCheckForTimeOut+0xc0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d007      	beq.n	80058d2 <xTaskCheckForTimeOut+0x82>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d302      	bcc.n	80058d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	e015      	b.n	80058fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d20b      	bcs.n	80058f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	1ad2      	subs	r2, r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff9b 	bl	8005824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	e004      	b.n	80058fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058fe:	f000 fe89 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8005902:	69fb      	ldr	r3, [r7, #28]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000a58 	.word	0x20000a58
 8005910:	20000a6c 	.word	0x20000a6c

08005914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005918:	4b03      	ldr	r3, [pc, #12]	; (8005928 <vTaskMissedYield+0x14>)
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
}
 800591e:	bf00      	nop
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20000a68 	.word	0x20000a68

0800592c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005934:	f000 f852 	bl	80059dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <prvIdleTask+0x28>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d9f9      	bls.n	8005934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <prvIdleTask+0x2c>)
 8005942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005950:	e7f0      	b.n	8005934 <prvIdleTask+0x8>
 8005952:	bf00      	nop
 8005954:	20000958 	.word	0x20000958
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	e00c      	b.n	8005982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4a12      	ldr	r2, [pc, #72]	; (80059bc <prvInitialiseTaskLists+0x60>)
 8005974:	4413      	add	r3, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fce3 	bl	8004342 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3301      	adds	r3, #1
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b06      	cmp	r3, #6
 8005986:	d9ef      	bls.n	8005968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005988:	480d      	ldr	r0, [pc, #52]	; (80059c0 <prvInitialiseTaskLists+0x64>)
 800598a:	f7fe fcda 	bl	8004342 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800598e:	480d      	ldr	r0, [pc, #52]	; (80059c4 <prvInitialiseTaskLists+0x68>)
 8005990:	f7fe fcd7 	bl	8004342 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005994:	480c      	ldr	r0, [pc, #48]	; (80059c8 <prvInitialiseTaskLists+0x6c>)
 8005996:	f7fe fcd4 	bl	8004342 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800599a:	480c      	ldr	r0, [pc, #48]	; (80059cc <prvInitialiseTaskLists+0x70>)
 800599c:	f7fe fcd1 	bl	8004342 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059a0:	480b      	ldr	r0, [pc, #44]	; (80059d0 <prvInitialiseTaskLists+0x74>)
 80059a2:	f7fe fcce 	bl	8004342 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <prvInitialiseTaskLists+0x78>)
 80059a8:	4a05      	ldr	r2, [pc, #20]	; (80059c0 <prvInitialiseTaskLists+0x64>)
 80059aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <prvInitialiseTaskLists+0x7c>)
 80059ae:	4a05      	ldr	r2, [pc, #20]	; (80059c4 <prvInitialiseTaskLists+0x68>)
 80059b0:	601a      	str	r2, [r3, #0]
}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000958 	.word	0x20000958
 80059c0:	200009e4 	.word	0x200009e4
 80059c4:	200009f8 	.word	0x200009f8
 80059c8:	20000a14 	.word	0x20000a14
 80059cc:	20000a28 	.word	0x20000a28
 80059d0:	20000a40 	.word	0x20000a40
 80059d4:	20000a0c 	.word	0x20000a0c
 80059d8:	20000a10 	.word	0x20000a10

080059dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059e2:	e019      	b.n	8005a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059e4:	f000 fde6 	bl	80065b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <prvCheckTasksWaitingTermination+0x50>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe fd2e 	bl	8004456 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059fa:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <prvCheckTasksWaitingTermination+0x54>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	4a0b      	ldr	r2, [pc, #44]	; (8005a30 <prvCheckTasksWaitingTermination+0x54>)
 8005a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a04:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <prvCheckTasksWaitingTermination+0x58>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <prvCheckTasksWaitingTermination+0x58>)
 8005a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a0e:	f000 fe01 	bl	8006614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f810 	bl	8005a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <prvCheckTasksWaitingTermination+0x58>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e1      	bne.n	80059e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000a28 	.word	0x20000a28
 8005a30:	20000a54 	.word	0x20000a54
 8005a34:	20000a3c 	.word	0x20000a3c

08005a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	334c      	adds	r3, #76	; 0x4c
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 f8c9 	bl	8006bdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 ff99 	bl	8006990 <vPortFree>
				vPortFree( pxTCB );
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 ff96 	bl	8006990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a64:	e018      	b.n	8005a98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d103      	bne.n	8005a78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 ff8d 	bl	8006990 <vPortFree>
	}
 8005a76:	e00f      	b.n	8005a98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d00a      	beq.n	8005a98 <prvDeleteTCB+0x60>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60fb      	str	r3, [r7, #12]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <prvDeleteTCB+0x5e>
	}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <prvResetNextTaskUnblockTime+0x38>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvResetNextTaskUnblockTime+0x3c>)
 8005ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ab8:	e008      	b.n	8005acc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <prvResetNextTaskUnblockTime+0x38>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <prvResetNextTaskUnblockTime+0x3c>)
 8005aca:	6013      	str	r3, [r2, #0]
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	20000a0c 	.word	0x20000a0c
 8005adc:	20000a74 	.word	0x20000a74

08005ae0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <xTaskGetSchedulerState+0x34>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d102      	bne.n	8005af4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005aee:	2301      	movs	r3, #1
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	e008      	b.n	8005b06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005af4:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <xTaskGetSchedulerState+0x38>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005afc:	2302      	movs	r3, #2
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	e001      	b.n	8005b06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b06:	687b      	ldr	r3, [r7, #4]
	}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	20000a60 	.word	0x20000a60
 8005b18:	20000a7c 	.word	0x20000a7c

08005b1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d06e      	beq.n	8005c10 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b32:	4b3a      	ldr	r3, [pc, #232]	; (8005c1c <xTaskPriorityDisinherit+0x100>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d00a      	beq.n	8005b52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60fb      	str	r3, [r7, #12]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	60bb      	str	r3, [r7, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d044      	beq.n	8005c10 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d140      	bne.n	8005c10 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe fc5f 	bl	8004456 <uxListRemove>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d115      	bne.n	8005bca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba2:	491f      	ldr	r1, [pc, #124]	; (8005c20 <xTaskPriorityDisinherit+0x104>)
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xTaskPriorityDisinherit+0xae>
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	2201      	movs	r2, #1
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <xTaskPriorityDisinherit+0x108>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <xTaskPriorityDisinherit+0x108>)
 8005bc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	f1c3 0207 	rsb	r2, r3, #7
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	2201      	movs	r2, #1
 8005be4:	409a      	lsls	r2, r3
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <xTaskPriorityDisinherit+0x108>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	4a0d      	ldr	r2, [pc, #52]	; (8005c24 <xTaskPriorityDisinherit+0x108>)
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <xTaskPriorityDisinherit+0x104>)
 8005bfe:	441a      	add	r2, r3
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f7fe fbc8 	bl	800439c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c10:	697b      	ldr	r3, [r7, #20]
	}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000954 	.word	0x20000954
 8005c20:	20000958 	.word	0x20000958
 8005c24:	20000a5c 	.word	0x20000a5c

08005c28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c32:	4b29      	ldr	r3, [pc, #164]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c38:	4b28      	ldr	r3, [pc, #160]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe fc09 	bl	8004456 <uxListRemove>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	2201      	movs	r2, #1
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43da      	mvns	r2, r3
 8005c58:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	4a20      	ldr	r2, [pc, #128]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d10a      	bne.n	8005c80 <prvAddCurrentTaskToDelayedList+0x58>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d007      	beq.n	8005c80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c70:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	481a      	ldr	r0, [pc, #104]	; (8005ce4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c7a:	f7fe fb8f 	bl	800439c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c7e:	e026      	b.n	8005cce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c88:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d209      	bcs.n	8005cac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c98:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f7fe fb9d 	bl	80043e4 <vListInsert>
}
 8005caa:	e010      	b.n	8005cce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f7fe fb93 	bl	80043e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d202      	bcs.n	8005cce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005cc8:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6013      	str	r3, [r2, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000a58 	.word	0x20000a58
 8005cdc:	20000954 	.word	0x20000954
 8005ce0:	20000a5c 	.word	0x20000a5c
 8005ce4:	20000a40 	.word	0x20000a40
 8005ce8:	20000a10 	.word	0x20000a10
 8005cec:	20000a0c 	.word	0x20000a0c
 8005cf0:	20000a74 	.word	0x20000a74

08005cf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cfe:	f000 faeb 	bl	80062d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <xTimerCreateTimerTask+0x80>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d021      	beq.n	8005d4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d12:	1d3a      	adds	r2, r7, #4
 8005d14:	f107 0108 	add.w	r1, r7, #8
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fa89 	bl	8000234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	9202      	str	r2, [sp, #8]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	2300      	movs	r3, #0
 8005d32:	460a      	mov	r2, r1
 8005d34:	4910      	ldr	r1, [pc, #64]	; (8005d78 <xTimerCreateTimerTask+0x84>)
 8005d36:	4811      	ldr	r0, [pc, #68]	; (8005d7c <xTimerCreateTimerTask+0x88>)
 8005d38:	f7ff f8a0 	bl	8004e7c <xTaskCreateStatic>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <xTimerCreateTimerTask+0x8c>)
 8005d40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <xTimerCreateTimerTask+0x8c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	613b      	str	r3, [r7, #16]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000ab0 	.word	0x20000ab0
 8005d78:	08006e6c 	.word	0x08006e6c
 8005d7c:	08005eb9 	.word	0x08005eb9
 8005d80:	20000ab4 	.word	0x20000ab4

08005d84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	623b      	str	r3, [r7, #32]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005db2:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02a      	beq.n	8005e10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	dc18      	bgt.n	8005dfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dcc:	f7ff fe88 	bl	8005ae0 <xTaskGetSchedulerState>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d109      	bne.n	8005dea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f107 0114 	add.w	r1, r7, #20
 8005dde:	2300      	movs	r3, #0
 8005de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de2:	f7fe fc63 	bl	80046ac <xQueueGenericSend>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24
 8005de8:	e012      	b.n	8005e10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dea:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f107 0114 	add.w	r1, r7, #20
 8005df2:	2300      	movs	r3, #0
 8005df4:	2200      	movs	r2, #0
 8005df6:	f7fe fc59 	bl	80046ac <xQueueGenericSend>
 8005dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8005dfc:	e008      	b.n	8005e10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	f107 0114 	add.w	r1, r7, #20
 8005e06:	2300      	movs	r3, #0
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	f7fe fd4d 	bl	80048a8 <xQueueGenericSendFromISR>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3728      	adds	r7, #40	; 0x28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000ab0 	.word	0x20000ab0

08005e20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2a:	4b22      	ldr	r3, [pc, #136]	; (8005eb4 <prvProcessExpiredTimer+0x94>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fb0c 	bl	8004456 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d022      	beq.n	8005e92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	18d1      	adds	r1, r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f000 f8d1 	bl	8006000 <prvInsertTimerInActiveList>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01f      	beq.n	8005ea4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	6978      	ldr	r0, [r7, #20]
 8005e70:	f7ff ff88 	bl	8005d84 <xTimerGenericCommand>
 8005e74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d113      	bne.n	8005ea4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	60fb      	str	r3, [r7, #12]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	6978      	ldr	r0, [r7, #20]
 8005eaa:	4798      	blx	r3
}
 8005eac:	bf00      	nop
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000aa8 	.word	0x20000aa8

08005eb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ec0:	f107 0308 	add.w	r3, r7, #8
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 f857 	bl	8005f78 <prvGetNextExpireTime>
 8005eca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f803 	bl	8005edc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ed6:	f000 f8d5 	bl	8006084 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eda:	e7f1      	b.n	8005ec0 <prvTimerTask+0x8>

08005edc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ee6:	f7ff fa17 	bl	8005318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f866 	bl	8005fc0 <prvSampleTimeNow>
 8005ef4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d130      	bne.n	8005f5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <prvProcessTimerOrBlockTask+0x3c>
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d806      	bhi.n	8005f18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f0a:	f7ff fa13 	bl	8005334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff85 	bl	8005e20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f16:	e024      	b.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <prvProcessTimerOrBlockTask+0x90>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <prvProcessTimerOrBlockTask+0x50>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <prvProcessTimerOrBlockTask+0x52>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <prvProcessTimerOrBlockTask+0x94>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fe ff69 	bl	8004e14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f42:	f7ff f9f7 	bl	8005334 <xTaskResumeAll>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <prvProcessTimerOrBlockTask+0x98>)
 8005f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	f3bf 8f6f 	isb	sy
}
 8005f5c:	e001      	b.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f5e:	f7ff f9e9 	bl	8005334 <xTaskResumeAll>
}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000aac 	.word	0x20000aac
 8005f70:	20000ab0 	.word	0x20000ab0
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <prvGetNextExpireTime+0x44>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <prvGetNextExpireTime+0x16>
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	e000      	b.n	8005f90 <prvGetNextExpireTime+0x18>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <prvGetNextExpireTime+0x44>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	e001      	b.n	8005fac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fac:	68fb      	ldr	r3, [r7, #12]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000aa8 	.word	0x20000aa8

08005fc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fc8:	f7ff fa50 	bl	800546c <xTaskGetTickCount>
 8005fcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <prvSampleTimeNow+0x3c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d205      	bcs.n	8005fe4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fd8:	f000 f91a 	bl	8006210 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fea:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <prvSampleTimeNow+0x3c>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000ab8 	.word	0x20000ab8

08006000 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d812      	bhi.n	800604c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	429a      	cmp	r2, r3
 8006032:	d302      	bcc.n	800603a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e01b      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800603a:	4b10      	ldr	r3, [pc, #64]	; (800607c <prvInsertTimerInActiveList+0x7c>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3304      	adds	r3, #4
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f7fe f9cd 	bl	80043e4 <vListInsert>
 800604a:	e012      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d206      	bcs.n	8006062 <prvInsertTimerInActiveList+0x62>
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e007      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <prvInsertTimerInActiveList+0x80>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7fe f9b9 	bl	80043e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006072:	697b      	ldr	r3, [r7, #20]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000aac 	.word	0x20000aac
 8006080:	20000aa8 	.word	0x20000aa8

08006084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800608a:	e0ae      	b.n	80061ea <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f2c0 80ab 	blt.w	80061ea <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	3304      	adds	r3, #4
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe f9d6 	bl	8004456 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff ff87 	bl	8005fc0 <prvSampleTimeNow>
 80060b2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b09      	cmp	r3, #9
 80060b8:	f200 8096 	bhi.w	80061e8 <prvProcessReceivedCommands+0x164>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <prvProcessReceivedCommands+0x40>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060ed 	.word	0x080060ed
 80060d0:	08006161 	.word	0x08006161
 80060d4:	08006175 	.word	0x08006175
 80060d8:	080061bf 	.word	0x080061bf
 80060dc:	080060ed 	.word	0x080060ed
 80060e0:	080060ed 	.word	0x080060ed
 80060e4:	08006161 	.word	0x08006161
 80060e8:	08006175 	.word	0x08006175
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	18d1      	adds	r1, r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800610c:	f7ff ff78 	bl	8006000 <prvInsertTimerInActiveList>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d069      	beq.n	80061ea <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800611c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d05e      	beq.n	80061ea <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	441a      	add	r2, r3
 8006134:	2300      	movs	r3, #0
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	2300      	movs	r3, #0
 800613a:	2100      	movs	r1, #0
 800613c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800613e:	f7ff fe21 	bl	8005d84 <xTimerGenericCommand>
 8006142:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d14f      	bne.n	80061ea <prvProcessReceivedCommands+0x166>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	61bb      	str	r3, [r7, #24]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8006172:	e03a      	b.n	80061ea <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <prvProcessReceivedCommands+0x126>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	617b      	str	r3, [r7, #20]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	18d1      	adds	r1, r2, r3
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061b8:	f7ff ff22 	bl	8006000 <prvInsertTimerInActiveList>
					break;
 80061bc:	e015      	b.n	80061ea <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80061cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061ce:	f000 fbdf 	bl	8006990 <vPortFree>
 80061d2:	e00a      	b.n	80061ea <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061e6:	e000      	b.n	80061ea <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 80061e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ea:	4b08      	ldr	r3, [pc, #32]	; (800620c <prvProcessReceivedCommands+0x188>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f107 0108 	add.w	r1, r7, #8
 80061f2:	2200      	movs	r2, #0
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe fbf3 	bl	80049e0 <xQueueReceive>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f47f af45 	bne.w	800608c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	3728      	adds	r7, #40	; 0x28
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000ab0 	.word	0x20000ab0

08006210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006216:	e048      	b.n	80062aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006218:	4b2d      	ldr	r3, [pc, #180]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006222:	4b2b      	ldr	r3, [pc, #172]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe f910 	bl	8004456 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d02e      	beq.n	80062aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	429a      	cmp	r2, r3
 800625c:	d90e      	bls.n	800627c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800626a:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3304      	adds	r3, #4
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f7fe f8b5 	bl	80043e4 <vListInsert>
 800627a:	e016      	b.n	80062aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	2100      	movs	r1, #0
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fd7c 	bl	8005d84 <xTimerGenericCommand>
 800628c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	603b      	str	r3, [r7, #0]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1b1      	bne.n	8006218 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062b4:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <prvSwitchTimerLists+0xc4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <prvSwitchTimerLists+0xc0>)
 80062c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062c2:	4a04      	ldr	r2, [pc, #16]	; (80062d4 <prvSwitchTimerLists+0xc4>)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6013      	str	r3, [r2, #0]
}
 80062c8:	bf00      	nop
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000aa8 	.word	0x20000aa8
 80062d4:	20000aac 	.word	0x20000aac

080062d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062de:	f000 f969 	bl	80065b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d120      	bne.n	800632c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062ea:	4814      	ldr	r0, [pc, #80]	; (800633c <prvCheckForValidListAndQueue+0x64>)
 80062ec:	f7fe f829 	bl	8004342 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062f0:	4813      	ldr	r0, [pc, #76]	; (8006340 <prvCheckForValidListAndQueue+0x68>)
 80062f2:	f7fe f826 	bl	8004342 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062f6:	4b13      	ldr	r3, [pc, #76]	; (8006344 <prvCheckForValidListAndQueue+0x6c>)
 80062f8:	4a10      	ldr	r2, [pc, #64]	; (800633c <prvCheckForValidListAndQueue+0x64>)
 80062fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062fc:	4b12      	ldr	r3, [pc, #72]	; (8006348 <prvCheckForValidListAndQueue+0x70>)
 80062fe:	4a10      	ldr	r2, [pc, #64]	; (8006340 <prvCheckForValidListAndQueue+0x68>)
 8006300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006302:	2300      	movs	r3, #0
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <prvCheckForValidListAndQueue+0x74>)
 8006308:	4a11      	ldr	r2, [pc, #68]	; (8006350 <prvCheckForValidListAndQueue+0x78>)
 800630a:	210c      	movs	r1, #12
 800630c:	200a      	movs	r0, #10
 800630e:	f7fe f935 	bl	800457c <xQueueGenericCreateStatic>
 8006312:	4603      	mov	r3, r0
 8006314:	4a08      	ldr	r2, [pc, #32]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 8006316:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <prvCheckForValidListAndQueue+0x60>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	490b      	ldr	r1, [pc, #44]	; (8006354 <prvCheckForValidListAndQueue+0x7c>)
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fd4a 	bl	8004dc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800632c:	f000 f972 	bl	8006614 <vPortExitCritical>
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000ab0 	.word	0x20000ab0
 800633c:	20000a80 	.word	0x20000a80
 8006340:	20000a94 	.word	0x20000a94
 8006344:	20000aa8 	.word	0x20000aa8
 8006348:	20000aac 	.word	0x20000aac
 800634c:	20000b34 	.word	0x20000b34
 8006350:	20000abc 	.word	0x20000abc
 8006354:	08006e74 	.word	0x08006e74

08006358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b04      	subs	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006388:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <pxPortInitialiseStack+0x64>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b14      	subs	r3, #20
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b04      	subs	r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f06f 0202 	mvn.w	r2, #2
 80063a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b20      	subs	r3, #32
 80063ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ae:	68fb      	ldr	r3, [r7, #12]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	080063c1 	.word	0x080063c1

080063c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ca:	4b12      	ldr	r3, [pc, #72]	; (8006414 <prvTaskExitError+0x54>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d00a      	beq.n	80063ea <prvTaskExitError+0x2a>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	60fb      	str	r3, [r7, #12]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <prvTaskExitError+0x28>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	60bb      	str	r3, [r7, #8]
}
 80063fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fe:	bf00      	nop
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0fc      	beq.n	8006400 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000068 	.word	0x20000068
	...

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000954 	.word	0x20000954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b46      	ldr	r3, [pc, #280]	; (8006590 <xPortStartScheduler+0x120>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <xPortStartScheduler+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <xPortStartScheduler+0x26>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3f      	ldr	r2, [pc, #252]	; (8006598 <xPortStartScheduler+0x128>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x46>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <xPortStartScheduler+0x12c>)
 80064b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <xPortStartScheduler+0x130>)
 80064dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e4:	e009      	b.n	80064fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064e6:	4b2f      	ldr	r3, [pc, #188]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <xPortStartScheduler+0x134>)
 80064ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d0ef      	beq.n	80064e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1c3 0307 	rsb	r3, r3, #7
 800650e:	2b04      	cmp	r3, #4
 8006510:	d00a      	beq.n	8006528 <xPortStartScheduler+0xb8>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <xPortStartScheduler+0x134>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <xPortStartScheduler+0x134>)
 8006530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xPortStartScheduler+0x134>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <xPortStartScheduler+0x134>)
 800653c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <xPortStartScheduler+0x138>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <xPortStartScheduler+0x138>)
 800654c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <xPortStartScheduler+0x138>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <xPortStartScheduler+0x138>)
 8006558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800655c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800655e:	f000 f8dd 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <xPortStartScheduler+0x13c>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006568:	f000 f8fc 	bl	8006764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xPortStartScheduler+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <xPortStartScheduler+0x140>)
 8006572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006578:	f7ff ff66 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800657c:	f7ff f83e 	bl	80055fc <vTaskSwitchContext>
	prvTaskExitError();
 8006580:	f7ff ff1e 	bl	80063c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000ed00 	.word	0xe000ed00
 8006594:	410fc271 	.word	0x410fc271
 8006598:	410fc270 	.word	0x410fc270
 800659c:	e000e400 	.word	0xe000e400
 80065a0:	20000b7c 	.word	0x20000b7c
 80065a4:	20000b80 	.word	0x20000b80
 80065a8:	e000ed20 	.word	0xe000ed20
 80065ac:	20000068 	.word	0x20000068
 80065b0:	e000ef34 	.word	0xe000ef34

080065b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <vPortEnterCritical+0x58>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <vPortEnterCritical+0x58>)
 80065d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vPortEnterCritical+0x58>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortEnterCritical+0x5c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortEnterCritical+0x4a>
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	20000068 	.word	0x20000068
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <vPortExitCritical+0x50>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vPortExitCritical+0x24>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x50>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <vPortExitCritical+0x50>)
 8006640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <vPortExitCritical+0x42>
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f383 8811 	msr	BASEPRI, r3
}
 8006654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000068 	.word	0x20000068
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7fe ffac 	bl	80055fc <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	20000954 	.word	0x20000954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7fe fecb 	bl	800548c <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <SysTick_Handler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	2000005c 	.word	0x2000005c
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006772:	bf00      	nop
 8006774:	e000ed88 	.word	0xe000ed88

08006778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677e:	f3ef 8305 	mrs	r3, IPSR
 8006782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d914      	bls.n	80067b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <vPortValidateInterruptPriority+0x70>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <vPortValidateInterruptPriority+0x74>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20a      	bcs.n	80067b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <vPortValidateInterruptPriority+0x78>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067bc:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <vPortValidateInterruptPriority+0x7c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d90a      	bls.n	80067da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	603b      	str	r3, [r7, #0]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <vPortValidateInterruptPriority+0x60>
	}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000e3f0 	.word	0xe000e3f0
 80067ec:	20000b7c 	.word	0x20000b7c
 80067f0:	e000ed0c 	.word	0xe000ed0c
 80067f4:	20000b80 	.word	0x20000b80

080067f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006804:	f7fe fd88 	bl	8005318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006808:	4b5b      	ldr	r3, [pc, #364]	; (8006978 <pvPortMalloc+0x180>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006810:	f000 f920 	bl	8006a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006814:	4b59      	ldr	r3, [pc, #356]	; (800697c <pvPortMalloc+0x184>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	f040 8093 	bne.w	8006948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01d      	beq.n	8006864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006828:	2208      	movs	r2, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	3308      	adds	r3, #8
 8006842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <pvPortMalloc+0x6c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	617b      	str	r3, [r7, #20]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d06e      	beq.n	8006948 <pvPortMalloc+0x150>
 800686a:	4b45      	ldr	r3, [pc, #276]	; (8006980 <pvPortMalloc+0x188>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d869      	bhi.n	8006948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <pvPortMalloc+0x18c>)
 8006876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006878:	4b42      	ldr	r3, [pc, #264]	; (8006984 <pvPortMalloc+0x18c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800687e:	e004      	b.n	800688a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <pvPortMalloc+0xa4>
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f1      	bne.n	8006880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <pvPortMalloc+0x180>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d050      	beq.n	8006948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2208      	movs	r2, #8
 80068ac:	4413      	add	r3, r2
 80068ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	2308      	movs	r3, #8
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d91f      	bls.n	8006908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <pvPortMalloc+0xf8>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	613b      	str	r3, [r7, #16]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f000 f908 	bl	8006b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <pvPortMalloc+0x188>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <pvPortMalloc+0x188>)
 8006914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <pvPortMalloc+0x188>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <pvPortMalloc+0x190>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006922:	4b17      	ldr	r3, [pc, #92]	; (8006980 <pvPortMalloc+0x188>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <pvPortMalloc+0x190>)
 8006928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <pvPortMalloc+0x184>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	431a      	orrs	r2, r3
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <pvPortMalloc+0x194>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <pvPortMalloc+0x194>)
 8006946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006948:	f7fe fcf4 	bl	8005334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <pvPortMalloc+0x174>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60fb      	str	r3, [r7, #12]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <pvPortMalloc+0x172>
	return pvReturn;
 800696c:	69fb      	ldr	r3, [r7, #28]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3728      	adds	r7, #40	; 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20001744 	.word	0x20001744
 800697c:	20001758 	.word	0x20001758
 8006980:	20001748 	.word	0x20001748
 8006984:	2000173c 	.word	0x2000173c
 8006988:	2000174c 	.word	0x2000174c
 800698c:	20001750 	.word	0x20001750

08006990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04d      	beq.n	8006a3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069a2:	2308      	movs	r3, #8
 80069a4:	425b      	negs	r3, r3
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <vPortFree+0xb8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <vPortFree+0x44>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <vPortFree+0x62>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60bb      	str	r3, [r7, #8]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <vPortFree+0xb8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11a      	bne.n	8006a3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <vPortFree+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	401a      	ands	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a18:	f7fe fc7e 	bl	8005318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <vPortFree+0xbc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <vPortFree+0xbc>)
 8006a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f000 f874 	bl	8006b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <vPortFree+0xc0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a06      	ldr	r2, [pc, #24]	; (8006a50 <vPortFree+0xc0>)
 8006a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a3a:	f7fe fc7b 	bl	8005334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20001758 	.word	0x20001758
 8006a4c:	20001748 	.word	0x20001748
 8006a50:	20001754 	.word	0x20001754

08006a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <prvHeapInit+0xac>)
 8006a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3307      	adds	r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0307 	bic.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <prvHeapInit+0xac>)
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <prvHeapInit+0xb0>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <prvHeapInit+0xb0>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <prvHeapInit+0xb4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <prvHeapInit+0xb4>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <prvHeapInit+0xb8>)
 8006ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <prvHeapInit+0xbc>)
 8006aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <prvHeapInit+0xc0>)
 8006aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000b84 	.word	0x20000b84
 8006b04:	2000173c 	.word	0x2000173c
 8006b08:	20001744 	.word	0x20001744
 8006b0c:	2000174c 	.word	0x2000174c
 8006b10:	20001748 	.word	0x20001748
 8006b14:	20001758 	.word	0x20001758

08006b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <prvInsertBlockIntoFreeList+0xac>)
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e002      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x14>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d8f7      	bhi.n	8006b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d108      	bne.n	8006b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d118      	bne.n	8006ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d00d      	beq.n	8006b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e008      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e003      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d002      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	2000173c 	.word	0x2000173c
 8006bc8:	20001744 	.word	0x20001744

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <_reclaim_reent>:
 8006bdc:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <_reclaim_reent+0xa8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4283      	cmp	r3, r0
 8006be2:	b570      	push	{r4, r5, r6, lr}
 8006be4:	4604      	mov	r4, r0
 8006be6:	d04b      	beq.n	8006c80 <_reclaim_reent+0xa4>
 8006be8:	69c3      	ldr	r3, [r0, #28]
 8006bea:	b143      	cbz	r3, 8006bfe <_reclaim_reent+0x22>
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d144      	bne.n	8006c7c <_reclaim_reent+0xa0>
 8006bf2:	69e3      	ldr	r3, [r4, #28]
 8006bf4:	6819      	ldr	r1, [r3, #0]
 8006bf6:	b111      	cbz	r1, 8006bfe <_reclaim_reent+0x22>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 f879 	bl	8006cf0 <_free_r>
 8006bfe:	6961      	ldr	r1, [r4, #20]
 8006c00:	b111      	cbz	r1, 8006c08 <_reclaim_reent+0x2c>
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 f874 	bl	8006cf0 <_free_r>
 8006c08:	69e1      	ldr	r1, [r4, #28]
 8006c0a:	b111      	cbz	r1, 8006c12 <_reclaim_reent+0x36>
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 f86f 	bl	8006cf0 <_free_r>
 8006c12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c14:	b111      	cbz	r1, 8006c1c <_reclaim_reent+0x40>
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f86a 	bl	8006cf0 <_free_r>
 8006c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1e:	b111      	cbz	r1, 8006c26 <_reclaim_reent+0x4a>
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 f865 	bl	8006cf0 <_free_r>
 8006c26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c28:	b111      	cbz	r1, 8006c30 <_reclaim_reent+0x54>
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 f860 	bl	8006cf0 <_free_r>
 8006c30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c32:	b111      	cbz	r1, 8006c3a <_reclaim_reent+0x5e>
 8006c34:	4620      	mov	r0, r4
 8006c36:	f000 f85b 	bl	8006cf0 <_free_r>
 8006c3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006c3c:	b111      	cbz	r1, 8006c44 <_reclaim_reent+0x68>
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 f856 	bl	8006cf0 <_free_r>
 8006c44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c46:	b111      	cbz	r1, 8006c4e <_reclaim_reent+0x72>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 f851 	bl	8006cf0 <_free_r>
 8006c4e:	6a23      	ldr	r3, [r4, #32]
 8006c50:	b1b3      	cbz	r3, 8006c80 <_reclaim_reent+0xa4>
 8006c52:	4620      	mov	r0, r4
 8006c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c58:	4718      	bx	r3
 8006c5a:	5949      	ldr	r1, [r1, r5]
 8006c5c:	b941      	cbnz	r1, 8006c70 <_reclaim_reent+0x94>
 8006c5e:	3504      	adds	r5, #4
 8006c60:	69e3      	ldr	r3, [r4, #28]
 8006c62:	2d80      	cmp	r5, #128	; 0x80
 8006c64:	68d9      	ldr	r1, [r3, #12]
 8006c66:	d1f8      	bne.n	8006c5a <_reclaim_reent+0x7e>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 f841 	bl	8006cf0 <_free_r>
 8006c6e:	e7c0      	b.n	8006bf2 <_reclaim_reent+0x16>
 8006c70:	680e      	ldr	r6, [r1, #0]
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 f83c 	bl	8006cf0 <_free_r>
 8006c78:	4631      	mov	r1, r6
 8006c7a:	e7ef      	b.n	8006c5c <_reclaim_reent+0x80>
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	e7ef      	b.n	8006c60 <_reclaim_reent+0x84>
 8006c80:	bd70      	pop	{r4, r5, r6, pc}
 8006c82:	bf00      	nop
 8006c84:	200000b8 	.word	0x200000b8

08006c88 <__libc_init_array>:
 8006c88:	b570      	push	{r4, r5, r6, lr}
 8006c8a:	4d0d      	ldr	r5, [pc, #52]	; (8006cc0 <__libc_init_array+0x38>)
 8006c8c:	4c0d      	ldr	r4, [pc, #52]	; (8006cc4 <__libc_init_array+0x3c>)
 8006c8e:	1b64      	subs	r4, r4, r5
 8006c90:	10a4      	asrs	r4, r4, #2
 8006c92:	2600      	movs	r6, #0
 8006c94:	42a6      	cmp	r6, r4
 8006c96:	d109      	bne.n	8006cac <__libc_init_array+0x24>
 8006c98:	4d0b      	ldr	r5, [pc, #44]	; (8006cc8 <__libc_init_array+0x40>)
 8006c9a:	4c0c      	ldr	r4, [pc, #48]	; (8006ccc <__libc_init_array+0x44>)
 8006c9c:	f000 f880 	bl	8006da0 <_init>
 8006ca0:	1b64      	subs	r4, r4, r5
 8006ca2:	10a4      	asrs	r4, r4, #2
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	42a6      	cmp	r6, r4
 8006ca8:	d105      	bne.n	8006cb6 <__libc_init_array+0x2e>
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb0:	4798      	blx	r3
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	e7ee      	b.n	8006c94 <__libc_init_array+0xc>
 8006cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cba:	4798      	blx	r3
 8006cbc:	3601      	adds	r6, #1
 8006cbe:	e7f2      	b.n	8006ca6 <__libc_init_array+0x1e>
 8006cc0:	08006ec4 	.word	0x08006ec4
 8006cc4:	08006ec4 	.word	0x08006ec4
 8006cc8:	08006ec4 	.word	0x08006ec4
 8006ccc:	08006ec8 	.word	0x08006ec8

08006cd0 <__retarget_lock_acquire_recursive>:
 8006cd0:	4770      	bx	lr

08006cd2 <__retarget_lock_release_recursive>:
 8006cd2:	4770      	bx	lr

08006cd4 <memcpy>:
 8006cd4:	440a      	add	r2, r1
 8006cd6:	4291      	cmp	r1, r2
 8006cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cdc:	d100      	bne.n	8006ce0 <memcpy+0xc>
 8006cde:	4770      	bx	lr
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cea:	4291      	cmp	r1, r2
 8006cec:	d1f9      	bne.n	8006ce2 <memcpy+0xe>
 8006cee:	bd10      	pop	{r4, pc}

08006cf0 <_free_r>:
 8006cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	d044      	beq.n	8006d80 <_free_r+0x90>
 8006cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cfa:	9001      	str	r0, [sp, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8006d02:	bfb8      	it	lt
 8006d04:	18e4      	addlt	r4, r4, r3
 8006d06:	f000 f83f 	bl	8006d88 <__malloc_lock>
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <_free_r+0x94>)
 8006d0c:	9801      	ldr	r0, [sp, #4]
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	b933      	cbnz	r3, 8006d20 <_free_r+0x30>
 8006d12:	6063      	str	r3, [r4, #4]
 8006d14:	6014      	str	r4, [r2, #0]
 8006d16:	b003      	add	sp, #12
 8006d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d1c:	f000 b83a 	b.w	8006d94 <__malloc_unlock>
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d908      	bls.n	8006d36 <_free_r+0x46>
 8006d24:	6825      	ldr	r5, [r4, #0]
 8006d26:	1961      	adds	r1, r4, r5
 8006d28:	428b      	cmp	r3, r1
 8006d2a:	bf01      	itttt	eq
 8006d2c:	6819      	ldreq	r1, [r3, #0]
 8006d2e:	685b      	ldreq	r3, [r3, #4]
 8006d30:	1949      	addeq	r1, r1, r5
 8006d32:	6021      	streq	r1, [r4, #0]
 8006d34:	e7ed      	b.n	8006d12 <_free_r+0x22>
 8006d36:	461a      	mov	r2, r3
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	b10b      	cbz	r3, 8006d40 <_free_r+0x50>
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d9fa      	bls.n	8006d36 <_free_r+0x46>
 8006d40:	6811      	ldr	r1, [r2, #0]
 8006d42:	1855      	adds	r5, r2, r1
 8006d44:	42a5      	cmp	r5, r4
 8006d46:	d10b      	bne.n	8006d60 <_free_r+0x70>
 8006d48:	6824      	ldr	r4, [r4, #0]
 8006d4a:	4421      	add	r1, r4
 8006d4c:	1854      	adds	r4, r2, r1
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	6011      	str	r1, [r2, #0]
 8006d52:	d1e0      	bne.n	8006d16 <_free_r+0x26>
 8006d54:	681c      	ldr	r4, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	6053      	str	r3, [r2, #4]
 8006d5a:	440c      	add	r4, r1
 8006d5c:	6014      	str	r4, [r2, #0]
 8006d5e:	e7da      	b.n	8006d16 <_free_r+0x26>
 8006d60:	d902      	bls.n	8006d68 <_free_r+0x78>
 8006d62:	230c      	movs	r3, #12
 8006d64:	6003      	str	r3, [r0, #0]
 8006d66:	e7d6      	b.n	8006d16 <_free_r+0x26>
 8006d68:	6825      	ldr	r5, [r4, #0]
 8006d6a:	1961      	adds	r1, r4, r5
 8006d6c:	428b      	cmp	r3, r1
 8006d6e:	bf04      	itt	eq
 8006d70:	6819      	ldreq	r1, [r3, #0]
 8006d72:	685b      	ldreq	r3, [r3, #4]
 8006d74:	6063      	str	r3, [r4, #4]
 8006d76:	bf04      	itt	eq
 8006d78:	1949      	addeq	r1, r1, r5
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	6054      	str	r4, [r2, #4]
 8006d7e:	e7ca      	b.n	8006d16 <_free_r+0x26>
 8006d80:	b003      	add	sp, #12
 8006d82:	bd30      	pop	{r4, r5, pc}
 8006d84:	20001898 	.word	0x20001898

08006d88 <__malloc_lock>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__malloc_lock+0x8>)
 8006d8a:	f7ff bfa1 	b.w	8006cd0 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	20001894 	.word	0x20001894

08006d94 <__malloc_unlock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__malloc_unlock+0x8>)
 8006d96:	f7ff bf9c 	b.w	8006cd2 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	20001894 	.word	0x20001894

08006da0 <_init>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	bf00      	nop
 8006da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da6:	bc08      	pop	{r3}
 8006da8:	469e      	mov	lr, r3
 8006daa:	4770      	bx	lr

08006dac <_fini>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr
